# This is the main configuration file for the application.
# ~~~~~
# See https://www.playframework.com/documentation/latest/Configuration for
# more information on editing this configuration file.

# Error handling
# ~~~~~
# Define the HttpErrorHandler object to use for error handling in this
# application.
#
# See https://www.playframework.com/documentation/latest/JavaErrorHandling for
# more information on error handling.
#
# play.http.errorHandler = "play.http.DefaultErrorHandler"

# Dependency injection bindings
# ~~~~~
# Define modules to be referenced by the application in resolving
# object dependencies at runtime using dependency injection.
#
# See https://www.playframework.com/documentation/latest/JavaDependencyInjection
# for more information on dependency injection.
#
# play.modules.enabled += "tld.myapp.MyModule"

# Database configuration
# ~~~~~
# Set database connection settings here, or create "db.conf" in the "conf"
# directory and include it, as shown.
#
# To see an example "db.conf" file, open "db.conf.example" in the "conf"
# directory.
# include "db.conf"

# Cryptographic secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# Set these values if you plan to use Play!'s built-in cryptographics
# functions.
#
# This must be changed for production, but we recommend not changing it in
# this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret
# for more details.
# play.crypto.secret = "changeme"
# play.crypto.secret = ${?MYAPPLICATION_PLAY_CRYPTO_SECRET}

play.crypto.secret="changeme"
play.crypto.secret=${?APPLICATION_SECRET}

APPLICATION_SECRET="PbJ2]H^WhFEBqKT3rlNtJMY1i^PHUX>eMjiPyaC`w5RB[W]jihkhK?Vb1m`gJMw5"


# Generating and updating secrets
# [from play console]> playGenerateSecret
# [from play console]> playUpdateSecret

#The path to the keystore containing the private key and certificate, if not provided generates a keystore for you

#play.server.https.keyStore.path = ${front-end-data}

#The key store type, defaults to JKS
#play.server.https.keyStore.type = JKS

#The password, defaults to a blank password
# play.server.https.keyStore.password =
# play.server.https.keyStore.algorithm =

#http.port=disabled
#https.port=9443

http.port=9100

# CORS filter configuration
play.filters.cors {

    # The path prefixes to filter.
    pathPrefixes = ["/"]

    # The allowed origins. If null, all origins are allowed.
    allowedOrigins = null

    # The allowed HTTP methods. If null, all methods are allowed
    allowedHttpMethods = [ "POST", "GET", "OPTIONS" ]

    # The allowed HTTP headers. If null, all headers are allowed.
    allowedHttpHeaders = null

    # The exposed headers
    exposedHeaders = []

    # Whether to support credentials
    supportsCredentials = true

    # The maximum amount of time the CORS meta data should be cached by the client
    preflightMaxAge = 1 hour
}

play.http.filters = "controllers.Filters"


# Port must be passed to play as CMD parameter, THERE IS NO DEFAULT VALUE
http.port=9100

# Application-supported languages
# ~~~~~
# Set these values if your application requires I18N support.
#
# See https://www.playframework.com/documentation/latest/JavaI18N
# for more details.

# akka.jvm-exit-on-fatal-error = off

play.i18n.langs = [ "en" ]


es = {

#  es 5
#host = "rtesap101"

# es 1.7
  host = "rtesap201"
  timeout = 30
  port = 9200

}

security = {

  host = "10.49.0.172"
  timeout = 30
  port = 9021
  path = "/saw-security/auth/validateToken"
  bypass = false


}

metadata = {

  path = "/main/metadata/objectstore"
  zookeeper-quorum = "rtmapr101.sncrbda.dev.cloud.synchronoss.net,rtmapr103.sncrbda.dev.cloud.synchronoss.net,rtmapr104.sncrbda.dev.cloud.synchronoss.net,rtmapr102.sncrbda.dev.cloud.synchronoss.net"
  user = "mapr"

}


spark = {

  master = "spark://rtmapr101.sncrbda.dev.cloud.synchronoss.net:7077"
  executor.memory = "2G"
  cores.max = "2"
  driver.memory = "2G"

}

