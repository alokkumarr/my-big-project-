# This is the main configuration file for the application.
# ~~~~~
# See https://www.playframework.com/documentation/latest/Configuration for
# more information on editing this configuration file.

# Error handling
# ~~~~~
# Define the HttpErrorHandler object to use for error handling in this
# application.
#
# See https://www.playframework.com/documentation/latest/JavaErrorHandling for
# more information on error handling.
#
# play.http.errorHandler = "play.http.DefaultErrorHandler"

# Dependency injection bindings
# ~~~~~
# Define modules to be referenced by the application in resolving
# object dependencies at runtime using dependency injection.
#
# See https://www.playframework.com/documentation/latest/JavaDependencyInjection
# for more information on dependency injection.
#
# play.modules.enabled += "tld.myapp.MyModule"

# Database configuration
# ~~~~~
# Set database connection settings here, or create "db.conf" in the "conf"
# directory and include it, as shown.
#
# To see an example "db.conf" file, open "db.conf.example" in the "conf"
# directory.
# include "db.conf"

# Cryptographic secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# Set these values if you plan to use Play!'s built-in cryptographics
# functions.
#
# This must be changed for production, but we recommend not changing it in
# this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret
# for more details.
# play.crypto.secret = "changeme"
# play.crypto.secret = ${?MYAPPLICATION_PLAY_CRYPTO_SECRET}

play.crypto.secret="changeme"
play.crypto.secret=${?APPLICATION_SECRET}

### Dev secret: APPLICATION_SECRET=y=5L3Lrezk1j0KsBo8K>YHR6JIxfcb=ax]0sT7m2NZHcafHZM73_=fqnNcGP8r<x


# Generating and updating secrets
# [from play console]> playGenerateSecret
# [from play console]> playUpdateSecret

#The path to the keystore containing the private key and certificate, if not provided generates a keystore for you

#play.server.https.keyStore.path = ${front-end-data}

#The key store type, defaults to JKS
#play.server.https.keyStore.type = JKS

#The password, defaults to a blank password
# play.server.https.keyStore.password =
# play.server.https.keyStore.algorithm =

#http.port=disabled
#https.port=9443

http.port=9000

# Application-supported languages
# ~~~~~
# Set these values if your application requires I18N support.
#
# See https://www.playframework.com/documentation/latest/JavaI18N
# for more details.
play.i18n.langs = [ "en" ]
play.modules.enabled += "play.modules.swagger.SwaggerModule"

mapping = [

    {
      app_key = countly_event
			streams_1 = [
				{
						topic = event
						queue = streams-countly-1
				}
			]
			streams_2 = [
				{
						topic = event
						queue = streams-countly-2
				}
			]

      class = synchronoss.handlers.countly.CountlyEventHandler
      bootstrap.servers= "localhost:9092"
      #acks=all
      #retries=0
      batch.size = 16384
      #auto.commit.interval.ms=1000 // consumer
      #linger.ms=0
      key.serializer=org.apache.kafka.common.serialization.ByteArraySerializer
      value.serializer=org.apache.kafka.common.serialization.ByteArraySerializer
      block.on.buffer.full=true
    }

    {
      app_key = countly_crash
      topic = rt
      queue_name = streams
			streams_1 = [
				{
						topic = crash
						queue = streams-crash-1
				}
			]
			
			streams_2 = [
				{
						topic = crash
						queue = streams-crash-2
				}
			]

      class = synchronoss.handlers.countly.CountlyCrashHandler
      bootstrap.servers= "localhost:9092"
      #acks=all
      #retries=0
      batch.size=16384
      #auto.commit.interval.ms=1000 // consumer
      #linger.ms=0
      key.serializer=org.apache.kafka.common.serialization.ByteArraySerializer
      value.serializer=org.apache.kafka.common.serialization.ByteArraySerializer
      block.on.buffer.full=true
    }
		
    {
      app_key = generic
      streams_1 = [
				{
						topic = event
						queue = streams-generic-1
				}
			]
			
			streams_2 = [
				{
						topic = event
						queue = streams-generic-2
				}
			]
									
      class = synchronoss.handlers.GenericEventHandler
      bootstrap.servers= "localhost:9092"
      #acks=all
      #retries=0
      batch.size=16384
      #auto.commit.interval.ms=1000 // consumer
      #linger.ms=0
      key.serializer=org.apache.kafka.common.serialization.ByteArraySerializer
      value.serializer=org.apache.kafka.common.serialization.ByteArraySerializer
      block.on.buffer.full=true
    }

    {
      app_key = Charter.SmartCare
			streams_1 = [
				{
						topic = event
						queue = streams-charter-1
				}
			]
			
			streams_2 = [
				{
						topic = event
						queue = streams-charter-2
				}
			]
			
      class = synchronoss.handlers.charter.smartcare.CharterEventHandler
      bootstrap.servers= "localhost:9092"
      #acks=all
      #retries=0
      batch.size=16384
      #auto.commit.interval.ms=1000 // consumer
      #linger.ms=0
      key.serializer=org.apache.kafka.common.serialization.StringSerializer
      value.serializer=org.apache.kafka.common.serialization.StringSerializer
      block.on.buffer.full=true
    }
		
]

stream.file.location = "./streams.check.point"


api.version="1.2"
swagger.api.info.title="Syncronoss Real Time Ingestion Service API 1.0"
swagger.api.info.description="Syncronoss RTI is designed to accept events and crash reports in countly formats, please see  http://count.ly"
swagger.api.info.termsOfServiceUrl="http://termsOfServiceUrl"
swagger.api.info.contact="Suren.Nathan@synchronoss.com"
swagger.api.info.license="TBD"
swagger.api.info.licenseUrl="TBD"
swagger.api.basepath="/"
swagger.api.host="localhost:9000"

# example swagger authorisation filter
swagger.filter="security.AuthorisationFilter"

swagger.api.info.modelClasses = [ synchronoss.data.countly.model.BaseEvent ]

logger.ch.qos=NONE

monitoring {
  email.addresses = [ "srya0001@synchronoss.com" ]
  email.subject = "Monitoring Service: FrontEnd Server"
  email.from =  "ec2-user@rtfe101.sncrbda.dev.cloud.synchronoss.net"
  email.fromName = "Administrator"

  ping.timeout = 10
  ping.host = localhost
  ping.port = 9000
}

