- name: Migrate Security Service database password from old location
  fetch:
    src: /etc/bda/saw-security-db-password
    dest: "{{ inventory_dir + '/sip-security-db-password' }}"
    flat: yes
    fail_on_missing: no
  when: "groups['saw-security'].index(inventory_hostname) == 0"
- name : Check password already migrated
  stat: path=/etc/bda/saw-security-db-password-migrated
  register: saw_security_db_password_migrated
- name: Look up Security Service database password
  set_fact:
    saw_security_db_get_password: >-
      {{ lookup('password', inventory_dir
        + '/sip-security-db-password chars=ascii_letters,digits') }}
- name: Run the password encryption if not encoded.
  shell: "/opt/sip/sip-common-components/bin/ccode {{ saw_security_db_get_password }} 20-89-C3-13-D6-29-9E-91-6C-35-C2-4D-0A-B5-2C-D4 "
  register: saw_security_db_password_encoded
  when: not saw_security_db_password_migrated.stat.exists
- name: Register the sip-security Encoded paswword value (If Password not encoded)
  set_fact:
    saw_security_db_password: >-
      {{ saw_security_db_password_encoded.stdout }}
  when: not saw_security_db_password_migrated.stat.exists
- name: Register the sip-security Encoded paswword value (If already Encoded )
  set_fact:
    saw_security_db_password: >-
      {{ saw_security_db_get_password }}
  when: saw_security_db_password_migrated.stat.exists
- name: Set the SAW Security Service database password
  copy:
    content: "{{ saw_security_db_password }}"
    dest: /etc/bda/saw-security-db-password
- name: Markng the password migration
  file:
    path: /etc/bda/saw-security-db-password-migrated
    state: touch
    mode: 0755
  when: not saw_security_db_password_migrated.stat.exists
- name: Run the password decoding
  shell: "/opt/sip/sip-common-components/bin/ccode {{ saw_security_db_password }} 20-89-C3-13-D6-29-9E-91-6C-35-C2-4D-0A-B5-2C-D4 decrypt"
  register: saw_security_db_get_password
- name: Create SAW Security group
  group: name=saw
- name: Create SAW Security user
  user: name=saw group=saw

#- name: Create BDA directory
#  file: 
#    path: /etc/bda state=directory
#    mode: 0777

 # Creating env file to hold the connector streaming
- name: Create the /etc/bda/security.env file
  file:
    path: /etc/bda/security.env
    state: touch
    mode: 0755

- name: Copy the content of the file when it is secure
  copy:
    content: "SECURE=true"
    dest: "/etc/bda/security.env"
  when: sip_secure

- name: Copy the content of the file when it is not secure
  copy:
    content: "SECURE=false"
    dest: "/etc/bda/security.env"
  when: not sip_secure

# Generate the random secret key to make key unique per SIP enviroment.
- name: Generate sip-security jwt secret key
  set_fact:
    saw_security_jwt_secret: >-
      {{ lookup('password', inventory_dir
        + '/sip-security-jwt-secret chars=ascii_letters,digits') }}

- name: Create SAW Security variables file
  template: src=saw-security.vars dest=/etc/bda/saw-security.vars
- name: Copy SAW Security package
  copy: src="{{ item }}" dest=/tmp/saw-security.rpm
  with_fileglob: ["../rpms/sip-security-*.rpm"]
- name: Install SAW Security package
  yum: name=/tmp/saw-security.rpm state=present
  notify:
    - restart saw-security
- name: Run SAW Security configuration initialization when environment is not secure
  command: /opt/bda/saw-security/bin/conf_init
  when: not sip_secure

- name: Run SAW Security configuration initialization when environment is secure
  command: /opt/bda/saw-security/bin/conf_init_secure
  when: sip_secure

- name: Run SAW Security initial database setup
  command: /opt/bda/saw-security/db/setup/init
  # Note: Run database initialization only on one of the nodes
  when: "groups['saw-security'].index(inventory_hostname) == 0"

- name: Fetch mariadb database password from existing
  fetch:
    src: /etc/bda/mariadb-root-password
    dest: "{{ inventory_dir + '/mariadb-root-password' }}"
    flat: yes
    fail_on_missing: no

- name: Look up mariadb database password
  set_fact:
    saw_mariadb_db_get_password: >-
      {{ lookup('password', inventory_dir+'/mariadb-root-password chars=ascii_letters,digits') }}
- name: Run the password decoding if its encoded.
  shell: "/opt/sip/sip-common-components/bin/ccode {{ saw_mariadb_db_get_password }} 20-89-C3-13-D6-29-9E-91-6C-35-C2-4D-0A-B5-2C-D4 decrypt"
  register: saw_mariadb_db_password

- name: create MariaDB user for saw_security to other sip-nodes
  command: >
    mysql -u root -e "CREATE USER IF NOT EXISTS 'saw_security'@'{{ hostvars[inventory_hostname]
    ['ansible_default_ipv4']['address'] }}' IDENTIFIED VIA ed25519 USING  PASSWORD('{{ saw_security_db_get_password.stdout }}')"
    -p{{ saw_mariadb_db_password.stdout }}
    
- name: GRANT PRIVILEGES for saw_security to other sip-nodes
  command: >
    mysql -u root -e "GRANT ALL PRIVILEGES ON saw_security.* TO 'saw_security'@'{{ hostvars[inventory_hostname]
    ['ansible_default_ipv4']['address'] }}'" -p{{ saw_mariadb_db_password.stdout }}
    
- name: create MariaDB SSL user other sip-nodes
  command: >
    mysql -u root -e "CREATE USER IF NOT EXISTS 'sstssl'@'%' IDENTIFIED BY 'sstssl'" -p{{ saw_mariadb_db_password.stdout }}
    
- name: GRANT PRIVILEGES for SSL to other sip-nodes
  command: >
    mysql -u root -e "GRANT ALL ON *.* TO 'sstssl'@'%' IDENTIFIED BY 'sstssl' REQUIRE SSL" -p{{ saw_mariadb_db_password.stdout }}
 
    
- name: Enable SIP Security service
  systemd: name=sip-security enabled=true daemon_reload=true
