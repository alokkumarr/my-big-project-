# Workaround: High availability requires the Galera cluster, but
# MariaDB 5 that comes by default with CentOS 7 does not include it.
# So add the MariaDB package repository to make MariaDB 10 available,
# which does include the Galera cluster.  Remove the MariaDB
# repository CentOS defaults to MariaDB 10 or higher.
- name: Install MariaDB package repository
  yum_repository:
    name: mariadb
    description: MariaDB repository
    baseurl: "{{ sip_mariadb_yum_url | default('http://yum.mariadb.org/10.4/centos7-amd64') }}"
    gpgcheck: no
- name: Check the Mariadb version to determine if upgrade is required
  shell: "mysql --version | grep 10.3"
  register: mariadb_upgrade
  ignore_errors: yes
- name: Stop MariaDB server if mariadb upgrade required to 10.4
  systemd: name=mariadb state=stopped
  when:
   - mariadb_upgrade is defined
   - mariadb_upgrade.stdout | length > 0
  ignore_errors: yes
- name: Uninstall and Remove MariaDB galera Service
  yum: name=galera state=absent
  when:
    - mariadb_upgrade is defined
    - mariadb_upgrade.stdout | length > 0
- name: Install MariaDB package
  # Note: While using the MariaDB repository, use the capitalized
  # package name "MariaDB-server" instead of "mariadb-server"
  yum: name=MariaDB-server state=present
  notify:
    - restart mariadb
- name: Install MariaDB client package
  yum: name=MariaDB-client state=present

# Mariadb Security at rest - also known as DARE - Only for secure clusters
- name: Include mariadb-dare.yml if sip_secure=true
  include: mariadb-dare.yml
  when: sip_secure

- name: Install MariaDB configuration additions
  template: src=mysql-saw.cnf dest=/etc/my.cnf.d/saw.cnf
# Workaround: The MariaDB Galera cluster initialization below invokes
# "systemctl start" (instead of "systemctl restart").  Trigger
# handlers here to ensure that the MariaDB service is stopped after a
# possible package update and is subsequently started with the new
# version.
- meta: flush_handlers
# Note: This script cannot be put into the SAW Security package
# because it is installed only after the database initialization.
- name: Install MariaDB Galera cluster initialization script
  template:
    src: sip-mariadb-cluster-init
    dest: /opt/sip/libexec/sip-mariadb-cluster-init
    mode: a+x
- name: Install MariaDB Galera cluster initialization service
  template:
    src: sip-mariadb-cluster-init.service
    dest: /etc/systemd/system/sip-mariadb-cluster-init.service
# Log the safe to bootstrap value of the node
- name: Check the MariaDB Galera safe to bootstrap value
  command: grep "^safe_to_bootstrap:" /var/lib/mysql/grastate.dat
  register: safe_to_bootstrap
  # Proceed even if the grastate.dat file does not exist
  failed_when: false
- name: Log the MariaDB Galera safe to boostrap value
  debug:
    msg: "MariaDB Galera cluster safe to bootstrap:
      {{ safe_to_bootstrap.stdout }}"
- name: Set the safe_to_bootstrap as 1 before cluster restart
  lineinfile:
    path: /var/lib/mysql/grastate.dat
    regexp: 'safe_to_bootstrap*'
    line: 'safe_to_bootstrap: 1'
  when:
    - mariadb_upgrade is defined
    - mariadb_upgrade.stdout | length > 0
    - "groups['saw-security'].index(inventory_hostname) == 0"
- name: Store MariaDB host index into file
  template:
    src: sip-mariadb-host-index
    dest: /etc/sip/sip-mariadb-host-index
# Note: The MariaDB Galera cluster initialization must run before
# MariaDB service is started, because the "galera_new_cluster" will
# start the MariaDB service if the node is chosen as a bootstrap node.
- name: Enable and start MariaDB Galera cluster initialization service
  systemd: name=sip-mariadb-cluster-init enabled=true state=started
# Start any non-bootstrap nodes, which will join the MariaDB Galera
# cluster initialized above
- name: Enable and start MariaDB service
  systemd: name=mariadb enabled=true state=started
# Note: Run mysql_upgrade for upgrades from MariaDB 5.5, which are
# always single-node environments.  When environments with MariaDB 5.5
# no longer exist, the mysql_upgrade task below can be removed.
- name: Run MariaDB databases upgrade
  shell: "mysql_upgrade --password=$(< /etc/bda/mariadb-root-password)"
  when: "groups['saw-security'].index(inventory_hostname) == 0"
- name: Migrate MariaDB root password from old location
  fetch:
    src: /etc/bda/mariadb-root-password
    dest: "{{ inventory_dir + '/mariadb-root-password' }}"
    flat: yes
    fail_on_missing: no
  when: "groups['saw-services'].index(inventory_hostname) == 0"
- name: Look up MariaDB root database password
  set_fact:
    mariadb_root_password: >-
      {{ lookup('password', inventory_dir
        + '/mariadb-root-password chars=ascii_letters,digits') }}
- name: Store the MariaDB root password
  copy:
    content: "{{ mariadb_root_password }}"
    dest: /etc/bda/mariadb-root-password
    mode: u=rw,g=,o=
