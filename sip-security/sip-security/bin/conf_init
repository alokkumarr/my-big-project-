#!/bin/bash
###
# This script executes post-install step(s):
# - get 'db.init.password' parameter value from
#   /etc/bda/saw-security.vars file, if found -
#   calculate encrypted value for 'ds.cpass' vars parameter;
# - create application configuration file(s) from template(s)
#   in conf/templates;
# - execute DB initial seturp script: $APPL_HOME/db/setup/Initial_Setup.py
# The script is executed as root during post-install phase
# of application rpm installation.
# Required files:
#   /etc/bda/saw-security.vars
#   $CMD_DIR/appl_info
#   $APPL_HOME/bin/mk_conf.sh
#   $APPL_HOME/bin/ccode.sh
#   $APPL_HOME/lib/$APPL_NAME*.jar
#   $APPL_HOME/conf/templates/*
###
[[ $DEBUG ]] && set -vx

CMD_DIR=$( cd $( dirname $0 ); pwd )

# Check appl_info DB is available
( $CMD_DIR/appl_info ) || exit $?
# Function API
appl_info() {
    $CMD_DIR/appl_info ${1:?arg missing}
}

# Get and check application properties
# Application name
APPL_NAME=$( appl_info name )
: ${APPL_NAME:?no value}
# Application home directory
APPL_HOME=$( appl_info optdir )
: ${APPL_HOME:?no value}
( cd $APPL_HOME ) || exit $?
# Application user
APPL_USER=$( appl_info user )
: ${APPL_USER:?no value}
# Application group
APPL_GROUP=$( appl_info group )
: ${APPL_GROUP:?no value}

# Check vars file exists
vars_file=/etc/bda/$APPL_NAME.vars
( <$vars_file ) || exit $?

# Check mk_conf.sh can be executed
( $APPL_HOME/bin/mk_conf.sh -h >/dev/null ) || exit $?
# Function API
mk_conf() {
    $APPL_HOME/bin/mk_conf.sh "$@"
}

# extended pattern matching operators
shopt -s extglob

# Set database password
db_password_file=/etc/bda/saw-security-db-password
initial_setup_marker=/etc/bda/saw-security-initial-setup

# For old environments, if password file does not exist, initialize to default
if [ ! -e $db_password_file -a -e $initial_setup_marker ]; then
   echo saw_security > $db_password_file
   chmod go-rwx $db_password_file
fi

# Generate database passwords
generate_password() {
    local password_file=$1
    if [ -e $password_file ]; then
        return
    fi
    local password=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 14)
    echo $password > $password_file
    chmod go-rwx $password_file
}
generate_password $db_password_file

# Calculate encrypted database password
db_init_pass=$(< $db_password_file)
ds_cpass_val=
[[ $db_init_pass ]] && {
    # Calc pass crypto
    ( $APPL_HOME/bin/ccode.sh ) || exit
    db_cenc_pass=$($APPL_HOME/bin/ccode.sh "$db_init_pass")
    ds_cpass_val='db.cpass='"$db_cenc_pass"
    echo '# pass crypto created'
}

# Generate conf files from template
for tfn in $APPL_HOME/conf/templates/application.properties ; do
    bfn=$(basename $tfn)
    echo "# generate $APPL_NAME conf file: $bfn"
    conf_tmpl=$tfn
    conf_file=$APPL_HOME/conf/$bfn
    xarg=
    [[ $bfn = application.properties ]] && xarg="$ds_cpass_val"
    mk_conf $conf_tmpl $vars_file "$xarg" >$conf_file || {
        # remove empty file
        [[ -s $conf_file ]] || rm -f $conf_file
        echo "
***************************************
* ERROR creating configuration file:
* $conf_file
* Check contents of files:
*   template: $conf_tmpl
*   vars: $vars_file
* and fix manually by excuting command:
=======================================
\$ $APPL_HOME/bin/mk_conf.sh $conf_tmpl $vars_file $xarg >$conf_file
=======================================
"
        exit 1
    }
    [[ -s $conf_file ]] && {
        chown $APPL_USER:$APPL_GROUP $conf_file &&
        chmod 0644 $conf_file
        echo "# $APPL_NAME conf file created: $conf_file"
    }
done

echo '========================================'
echo '# Manual step required to'
echo '# execute DB Initial Setup'
echo sudo python $APPL_HOME/db/setup/Initial_Setup.py --vars
echo '========================================'

exit
