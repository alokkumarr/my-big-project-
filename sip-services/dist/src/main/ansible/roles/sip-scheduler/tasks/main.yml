- name: Copy SAW Scheduler Service package
  copy: src="{{ item }}" dest=/tmp/saw-scheduler.rpm
  with_fileglob: ["../rpms/sip-scheduler-*.rpm"]
- name: Install SAW Scheduler package
  yum: name=/tmp/saw-scheduler.rpm state=present
  notify:
    - restart sip-scheduler
- name: Migrate Scheduler Service database password from old location
  fetch:
    src: /etc/bda/saw-scheduler-db-password
    dest: "{{ inventory_dir + '/sip-scheduler-db-password' }}"
    flat: yes
    fail_on_missing: no
  when: "groups['saw-services'].index(inventory_hostname) == 0"
- name : Check password already migrated
  stat: path=/etc/bda/saw-scheduler-db-password-migrated
  register: saw_scheduler_db_password_migrated
- name: Look up Scheduler Service database password
  set_fact:
    saw_scheduler_db_get_password: >-
      {{ lookup('password', inventory_dir
        + '/sip-scheduler-db-password chars=ascii_letters,digits') }}
- name: Run the password encryption if not encoded.
  shell: "/opt/sip/sip-common-components/bin/ccode {{ saw_scheduler_db_get_password }} 20-89-C3-13-D6-29-9E-91-6C-35-C2-4D-0A-B5-2C-D4 "
  register: saw_scheduler_db_password_encoded
  when: not saw_scheduler_db_password_migrated.stat.exists
- name: Register the sip-scheduler Encoded paswword value (If Password not encoded)
  set_fact:
    saw_scheduler_db_password: >-
      {{ saw_scheduler_db_password_encoded.stdout }}
  when: not saw_scheduler_db_password_migrated.stat.exists
- name: Register the sip-scheduler Encoded password value (If already Encoded )
  set_fact:
    saw_scheduler_db_password: >-
      {{ saw_scheduler_db_get_password }}
  when: saw_scheduler_db_password_migrated.stat.exists
- name: Markng the SIP-scheduler password migration
  file:
    path: /etc/bda/saw-scheduler-db-password-migrated
    state: touch
    mode: 0755
  when: not saw_scheduler_db_password_migrated.stat.exists
- name: Set the SAW Scheduler Service database password
  copy:
    content: "{{ saw_scheduler_db_password }}"
    dest: /etc/bda/saw-scheduler-db-password
- name: Install SAW scheduler Service configuration file
  template: src=application.yml dest=/opt/bda/saw-scheduler-service/conf
  notify:
    - restart sip-scheduler
- name: Run the password decoding
  shell: "/opt/sip/sip-common-components/bin/ccode {{ saw_scheduler_db_password }} 20-89-C3-13-D6-29-9E-91-6C-35-C2-4D-0A-B5-2C-D4 decrypt"
  register: saw_scheduler_get_db_password
- name: Run SAW scheduler initial database setup
  command: /opt/bda/saw-scheduler-service/db-setup/init
  # Note: Run database initialization only on one of the nodes
  when: "groups['saw-security'].index(inventory_hostname) == 0"
- name: Fetch mariadb database password from existing
  fetch:
    src: /etc/bda/mariadb-root-password
    dest: "{{ inventory_dir + '/mariadb-root-password' }}"
    flat: yes
    fail_on_missing: no
- name: Look up mariadb database password
  set_fact:
    saw_mariadb_db_get_password: >-
      {{ lookup('password', inventory_dir+'/mariadb-root-password chars=ascii_letters,digits') }}
- name: Run the password decoding if its encoded.
  shell: "/opt/sip/sip-common-components/bin/ccode {{ saw_mariadb_db_get_password }} 20-89-C3-13-D6-29-9E-91-6C-35-C2-4D-0A-B5-2C-D4 decrypt"
  register: saw_mariadb_db_password
- name: create MariaDB user for saw_scheduler to other sip-nodes
  command: >
    mysql -u root -e "CREATE USER IF NOT EXISTS 'saw_scheduler'@'{{ hostvars[inventory_hostname]
    ['ansible_default_ipv4']['address'] }}' IDENTIFIED VIA ed25519 USING
    PASSWORD('{{ saw_scheduler_get_db_password.stdout }}')" -p{{ saw_mariadb_db_password.stdout }}
- name: GRANT PRIVILEGES for saw_scheduler to other sip-nodes
  command: >
    mysql -u root -e "GRANT ALL PRIVILEGES ON saw_scheduler.* TO 'saw_scheduler'@'{{ hostvars
    [inventory_hostname]['ansible_default_ipv4']['address'] }}'" -p{{ saw_mariadb_db_password.stdout }}
# Workaround: The service restart handler will run only after all
# tasks have completed.  This causes the service to remain running
# using the old port when the new socket activation proxy starts up,
# resulting in a port already in use error.  So trigger the restart
# handler already here, to force the service to pick up the new port
# setting before starting the socket activation proxy.  Can be removed
# as no longer needed after the next SAW release.
- meta: flush_handlers
- name: Enable SIP Scheduler Service
  systemd: name=sip-scheduler-proxy.socket enabled=true state=started
# Note: In difference to other socket-activates services, the
# Scheduler Service is by default also enabled itself to ensure that
# scheduled tasks are executed even without traffic to activate the
# service
- name: Enable SIP Scheduler Service
  systemd: name=sip-scheduler enabled=true
