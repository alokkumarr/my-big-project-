info:
  component: Synchronoss Gateway Service
spring:
  application:
    name: saw-gateway-service
  servlet:
    multipart:
      enabled : true
      max-request-size: 25MB
      max-file-size: 25MB
      file-size-threshold: 2KB
  main:
    banner-mode: 'off'
logging:
  level:
    com.synchronoss.saw.gateway: INFO
server:
  # Note: Bind to all available addresses (not just localhost) so that
  # a proxy which might be on another host can connect
  address: 0.0.0.0
  port: 9100
  max-http-header-size: 65536
  servlet:
    context-path: ''
  compression:
    enabled: true
    mime-types: text/html,text/css,application/javascript,application/json

  {% if sip_secure %}

  ssl:
   key-store: {{ store_path }}/{{ ansible_host }}/keystore.jks
   key-alias: sip
   key-store-password: "{{ sip_keystore_password }}"
   trust-store: {{ store_path }}/{{ ansible_host }}/truststore.jks
   trust-store-password: "{{ sip_keystore_password }}"

  {% endif %}

management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: info, health, prometheus
alert:
  service:
    host: http://localhost:9620

{% if sip_secure %}

connector: https


{% else %}

connector: http


{% endif %}

internal-analysis:
    service:
        host: ${connector}://localhost:9200
metadata:
    service:
        host: ${connector}://localhost:9500
semantic:
    service:
        host: ${connector}://localhost:9200
security:
    service:
        host: ${connector}://localhost:9000/saw-security
export:
    service:
        host: ${connector}://localhost:9400
scheduler:
    service:
        host: ${connector}://localhost:9600
workbench:
    service:
        host: ${connector}://localhost:9700
proxy:
    service:
        host: ${connector}://localhost:9800
batch:
   service:
        host: ${connector}://localhost:9903

api:
  gateway:
        endpoints:
        -   location: ${metadata.service.host}
            method: POST
            path: '[/]md*'
        -   location: ${alert.service.host}
            method: GET
            path: '[/]alerts.*'
        -   location: ${alert.service.host}
            method: POST
            path: '[/]alerts.*'
        -   location: ${alert.service.host}
            method: PUT
            path: '[/]alerts.*'
        -   location: ${alert.service.host}
            method: DELETE
            path: '[/]alerts.*'
        -   location: ${internal-analysis.service.host}
            method: GET
            path: '[/]analysis.*'
        -   location: ${internal-analysis.service.host}
            method: POST
            path: '[/]analysis*'
        -   location: ${semantic.service.host}
            method: POST
            path: '[/]semantic*'
        -   location: ${export.service.host}
            method: GET
            path: '[/]export.*'
        -   location: ${export.service.host}
            method : POST
            path : '[/]export.*'
        -   location: ${scheduler.service.host}
            method : GET
            path : '[/]scheduler.*'
        -   location: ${scheduler.service.host}
            method : POST
            path : '[/]scheduler.*'
        -   location: ${scheduler.service.host}
            method : DELETE
            path : '[/]scheduler.*'
        -   location: ${metadata.service.host}
            method: POST
            path: '[/]observe.*'
        -   location: ${metadata.service.host}
            method: GET
            path: '[/]observe.*'
        -   location: ${metadata.service.host}
            method: PUT
            path: '[/]observe.*'
        -   location: ${metadata.service.host}
            method: DELETE
            path: '[/]observe.*'
        -   location: ${internal-analysis.service.host}
            method: POST
            path: '[/]filters.*'
        -   location: ${internal-analysis.service.host}
            method: POST
            path: '[/]kpi.*'
        -   location: ${workbench.service.host}
            method: POST
            path: '[/]internal/workbench.*'
        -   location: ${workbench.service.host}
            method: GET
            path: '[/]internal/workbench.*'
        -   location: ${proxy.service.host}
            method: GET
            path: '[/]internal/proxy.*'
        -   location: ${proxy.service.host}
            method: POST
            path: '[/]internal/proxy.*'
        -   location: ${proxy.service.host}
            method: PUT
            path: '[/]internal/proxy.*'
        -   location: ${proxy.service.host}
            method: DELETE
            path: '[/]internal/proxy.*'
        -   location: ${metadata.service.host}
            method: POST
            path: '[/]internal/semantic.*'
        -   location: ${metadata.service.host}
            method: GET
            path: '[/]internal/semantic.*'
        -   location: ${metadata.service.host}
            method: PUT
            path: '[/]internal/semantic.*'
        -   location: ${batch.service.host}
            method: PUT
            path: '[/]ingestion/batch.*'
        -   location: ${batch.service.host}
            method: POST
            path: '[/]ingestion/batch.*'
        -   location: ${batch.service.host}
            method: GET
            path: '[/]ingestion/batch.*'
        -   location: ${batch.service.host}
            method: DELETE
            path: '[/]ingestion/batch.*'


   {% if sip_secure %}

sip:
   ssl:
     enable : true

   trust:
       store: ${server.ssl.trust-store}
       password: ${server.ssl.trust-store-password}
   key:
      store: ${server.ssl.key-store}
      password: ${server.ssl.key-store-password}

  {% else %}

sip:
   ssl:
     enable : false
     

  {% endif %}
