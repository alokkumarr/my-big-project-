# This is the main configuration file for the application.

play.crypto.secret="changeme"
play.crypto.secret=${?APPLICATION_SECRET}

# Port must be passed to play as CMD parameter, THERE IS NO DEFAULT VALUE
http.port=9950

play.i18n.langs = [ "en" ]
play.modules.enabled += "play.modules.swagger.SwaggerModule"

mapping = [

###
# Server sends messages (from events) to applications;
# each target application must be configured by populating
# application specific object below;
###
    {
      # Charter.SmartCare application specific parameters
		
      app_key = ${:app.key:} # app.key=Charter.SmartCare
      
      streams_1 = [
        {
            topic = ${:streams_1.topic:} # streams_1.topic=data1
            queue = ${:streams_1.queue:} # streams_1.queue=bda/data/streams/charter-sc1
        }
      ]
      streams_2 = [
        {
            topic = ${:streams_2.topic:} # streams_2.topic=data1
            queue = ${:streams_2.queue:} # streams_2.queue=bda/data/streams/charter-sc2
        }
      ]

      class = ${:app.class:} # app.class=synchronoss.handlers.charter.smartcare.CharterEventHandler

			# came from kafka
    	bootstrap.servers= "localhost:9092"
      batch.size=16384
      key.serializer=${:key.serializer:} # key.serializer=org.apache.kafka.common.serialization.StringSerializer
      value.serializer=${:value.serializer:} # value.serializer=org.apache.kafka.common.serialization.StringSerializer
      block.on.buffer.full=true
			timeout.ms=30000
    }
####
    
]

genericlog = {
   mapping = [
   ### Sample configuration
   ###{
   ###    customer = c
   ###    logtype = l
   ###    topic = data
   ###    queue = bda/data/streams/rta-pc_bt
   ###    class = mapr.streaming.LogMessageHandler
   ###    bootstrap.servers = "localhost:9092"
   ###    batch.size = 16384
   ###    key.serializer = org.apache.kafka.common.serialization.StringSerializer
   ###    value.serializer = org.apache.kafka.common.serialization.StringSerializer
   ###    block.on.buffer.full = true
   ###    timeout.ms = 30000
   ###    heartbeat.ms = 1000
   ###}
    ]
}

# registration config url where to get config detail on demand
connector=http
rtis.config.url=${connector}"://localhost:9501/internal/rtisconfig/config"
stream.queue.location=/var/sip/streams
stream.file.location=/var/bda/rtis/run/stream.${http.port}.dump

# Waiting time on send call to Kafka/MapR Streams client 
stream.send.timeout = 60

api.version="${revision}"
swagger.api.info.title="Synchronoss Insights Platform (SIP ) Real Time Ingestion Service API"
swagger.api.info.description="SIP Real Time Ingestion Service is designed to accept events from client systems using a generic construct and JSON as the payload"
swagger.api.info.termsOfServiceUrl=""
swagger.api.info.contact="Suren.Nathan@synchronoss.com"
#swagger.api.info.license=""
#swagger.api.info.licenseUrl=""
swagger.api.basepath=""
swagger.api.host="TBS"

# example swagger authorisation filter
swagger.filter="security.AuthorisationFilter"
swagger.api.info.modelClasses = [ synchronoss.data.countly.model.BaseEvent ]

# Max request size ~64K (from netty)
play.server.netty.maxInitialLineLength=65536

stream.topic.selectormethod=random
