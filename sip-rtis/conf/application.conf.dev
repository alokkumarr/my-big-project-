# This is the main configuration file for the application.
# ~~~~~
# See https://www.playframework.com/documentation/latest/Configuration for
# more information on editing this configuration file.

# Error handling
# ~~~~~
# Define the HttpErrorHandler object to use for error handling in this
# application.
#
# See https://www.playframework.com/documentation/latest/JavaErrorHandling for
# more information on error handling.
#
# play.http.errorHandler = "play.http.DefaultErrorHandler"

# Dependency injection bindings
# ~~~~~
# Define modules to be referenced by the application in resolving
# object dependencies at runtime using dependency injection.
#
# See https://www.playframework.com/documentation/latest/JavaDependencyInjection
# for more information on dependency injection.
#
# play.modules.enabled += "tld.myapp.MyModule"

# Database configuration
# ~~~~~
# Set database connection settings here, or create "db.conf" in the "conf"
# directory and include it, as shown.
#
# To see an example "db.conf" file, open "db.conf.example" in the "conf"
# directory.
# include "db.conf"

# Cryptographic secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# Set these values if you plan to use Play!'s built-in cryptographics
# functions.
#
# This must be changed for production, but we recommend not changing it in
# this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret
# for more details.
# play.crypto.secret = "changeme"
# play.crypto.secret = ${?MYAPPLICATION_PLAY_CRYPTO_SECRET}

play.crypto.secret="changeme"
play.crypto.secret=${?APPLICATION_SECRET}

### Dev secret: APPLICATION_SECRET=y=5L3Lrezk1j0KsBo8K>YHR6JIxfcb=ax]0sT7m2NZHcafHZM73_=fqnNcGP8r<x


# Generating and updating secrets
# [from play console]> playGenerateSecret
# [from play console]> playUpdateSecret

#The path to the keystore containing the private key and certificate, if not provided generates a keystore for you

#play.server.https.keyStore.path = ${front-end-data}

#The key store type, defaults to JKS
#play.server.https.keyStore.type = JKS

#The password, defaults to a blank password
# play.server.https.keyStore.password =
# play.server.https.keyStore.algorithm =

#http.port=disabled
#https.port=9443

# Port must be passed to play as CMD parameter, THERE IS NO DEFAULT VALUE
http.port=9100

# Application-supported languages
# ~~~~~
# Set these values if your application requires I18N support.
#
# See https://www.playframework.com/documentation/latest/JavaI18N
# for more details.
play.i18n.langs = [ "en" ]
play.modules.enabled += "play.modules.swagger.SwaggerModule"

mapping = [

    {
      app_key = countly_event

      streams_1 = [
        {
            topic = data1
            queue = main/data/streams/countlyevents1
        }
      ]
      streams_2 = [
        {
            topic = data2
            queue = main/data/streams/countlyevents2
        }
      ]

      class = synchronoss.handlers.countly.CountlyGenericBridge
      bootstrap.servers= "localhost:9092"
      batch.size=16384
      key.serializer=org.apache.kafka.common.serialization.StringSerializer
      value.serializer=org.apache.kafka.common.serialization.StringSerializer
      block.on.buffer.full=true
			timeout.ms=30000
    }

    {
      app_key = countly_crash
			
      streams_1 = [
        {
            topic = data1
            queue = main/data/streams/crashreports1
        }
      ]
      streams_2 = [
        {
            topic = data2
            queue = main/data/streams/crashreports2
        }
      ]

      class = synchronoss.handlers.countly.CountlyCrashBridge
      bootstrap.servers= "localhost:9092"
      batch.size=16384
      key.serializer=org.apache.kafka.common.serialization.StringSerializer
      value.serializer=org.apache.kafka.common.serialization.StringSerializer
      block.on.buffer.full=true
			timeout.ms=30000
    }
    
    {
      app_key = generic

      streams_1 = [
        {
            topic = generic
            queue = string_streams_1
        }
      ]
      streams_2 = [
        {
            topic = generic
            queue = string_streams_2
        }
      ]

      class = synchronoss.handlers.GenericEventHandler
      bootstrap.servers= "localhost:9092"
      batch.size=16384
      key.serializer=org.apache.kafka.common.serialization.ByteArraySerializer
      value.serializer=org.apache.kafka.common.serialization.ByteArraySerializer
      block.on.buffer.full=true
			timeout.ms=30000
    }

    {
      app_key = Charter.SmartCare
      
      streams_1 = [
        {
            topic = data1
            queue = main/data/streams/charter-sc1
        }
      ]
      streams_2 = [
        {
            topic = data1
            queue = main/data/streams/charter-sc2
        }
      ]

      class = synchronoss.handlers.charter.smartcare.CharterEventHandler
      bootstrap.servers= "localhost:9092"
      batch.size=16384
      key.serializer=org.apache.kafka.common.serialization.StringSerializer
      value.serializer=org.apache.kafka.common.serialization.StringSerializer
      block.on.buffer.full=true
			timeout.ms=30000
    }
]

genericlog = {

    mapping = [
        {
            customer = c
            logtype = l

            topic = t
            queue = q

            class = mapr.streaming.LogMessageHandler
            bootstrap.servers= "localhost:9092"
            batch.size=16384
            key.serializer=org.apache.kafka.common.serialization.StringSerializer
            value.serializer=org.apache.kafka.common.serialization.StringSerializer
            block.on.buffer.full=true
            timeout.ms=30000
            heartbeat.ms = 1000
        }
    ]

}

stream.file.location=/opt/bda/rtis/var/run/stream.${http.port}.dump

# Waiting time on send call to Kafka/MapR Streams client 
stream.send.timeout = 60

api.version="${revision}"
swagger.api.info.title="Synchronoss Insights Platform (SIP ) Real Time Ingestion Service API"
swagger.api.info.description="SIP Real Time Ingestion Service is designed to accept events from client systems using a generic construct and JSON as the payload"
swagger.api.info.termsOfServiceUrl=""
swagger.api.info.contact="Suren.Nathan@synchronoss.com"
#swagger.api.info.license=""
#swagger.api.info.licenseUrl=""
swagger.api.basepath=""
swagger.api.host="TBS"

# example swagger authorisation filter
swagger.filter="security.AuthorisationFilter"
swagger.api.info.modelClasses = [ synchronoss.data.countly.model.BaseEvent ]

logger.ch.qos=NONE

# Max request size ~64K
play.server.netty.maxInitialLineLength=65536

stream.topic.selectormethod=random


