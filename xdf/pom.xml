<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>bda</groupId>
    <artifactId>xdf-nextgen</artifactId>
    <version>1.0.0_dev</version>
  </parent>

  <!-- use app.name from parent pom -->
  <!--artifactId>${app.name}</artifactId-->
  <artifactId>xdf-rpm</artifactId>

  <packaging>pom</packaging>
  <!--name>xdf</name-->
  <properties>
    <!--
    <build.finalName>${project.artifactId}-${project.version}</build.finalName>
    -->
    <build.finalName>${app.name}-${project.version}</build.finalName>
    <!-- value generated by Maven -->
    <!-- assembly ID in ..assembly.xml -->
    <ass.id>ass</ass.id>
    <ass.desc>src/main/assembly/xdf-assembly.xml</ass.desc>
    <!-- value generated by Maven -->
    <ass.out>${project.artifactId}-${project.version}-${ass.id}</ass.out>
  </properties>
  <dependencies>
    <dependency>
      <groupId>bda</groupId>
      <artifactId>xdf-rest</artifactId>
      <version>${project.version}</version>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <!-- Assembly plugin -->
<!--
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>${maven.assembly.version}</version>
        <executions>
          <execution>
            <id>razorsight-xdf-assembly</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <outputDirectory>${output.directory}</outputDirectory>
              <!-*-archiveBaseDirectory>${ass.out}</archiveBaseDirectory-*->
              <descriptors>
                <!-*- descriptor>src/main/assembly/xdf-assembly.xml</descriptor -*->
                <descriptor>${ass.desc}</descriptor>
              </descriptors>
            </configuration>
          </execution>
        </executions>
      </plugin>
-->
      <!-- Assembly plugin : end -->
      <!-- RPM plugin -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>rpm-maven-plugin</artifactId>
        <version>2.1.5</version>
        <executions>
          <execution>
            <id>xdf-rpm-build</id>
            <goals>
              <goal>rpm</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <license>Synchronoss proprietary code</license>
          <distribution>XDF-${rpm.version}</distribution>
          <needarch>false</needarch>
          <targetOS>i386-linux</targetOS>
          <group>SNCR/BDA</group>
          <packager>BDA</packager>

          <name>${rpm.name}</name>
          <!-- version>${rpm.version}</version -->
          <!--
            Only applicable to a Mapping if filemode,
            username, AND groupname are NOT populated.
          -->
          <defaultUsername>${app.user}</defaultUsername>
          <defaultGroupname>${app.group}</defaultGroupname>
          <defaultDirmode>755</defaultDirmode>
          <defaultFilemode>444</defaultFilemode>
          <!-- -->
          <defineStatements>
            <defineStatement>_unpackaged_files_terminate_build 0</defineStatement>
          </defineStatements>
          <mappings>
            <!-- dirs -->
            <mapping>
              <directory>${app.optDir}</directory>
            </mapping>
            <mapping>
              <directory>${app.optDir}/bin</directory>
            </mapping>
            <mapping>
              <directory>${app.optDir}/lib</directory>
            </mapping>
            <mapping>
              <directory>${app.optDir}/test</directory>
            </mapping>
            <mapping>
              <directory>${app.optDir}/conf</directory>
            </mapping>
            <mapping>
              <directory>${app.varDir}/log</directory>
            </mapping>

            <!-- lib files -->
            <mapping>
              <directory>${app.optDir}/lib</directory>
              <directoryIncluded>false</directoryIncluded>
              <filemode>444</filemode>
              <username>${app.user}</username>
              <groupname>${app.group}</groupname>
              <sources><source>
                  <location>../xdf-rest/target/xdf-rest-${project.version}-all.jar</location>
              </source></sources>
            </mapping>

            <mapping>
              <directory>${app.optDir}/test</directory>
              <directoryIncluded>false</directoryIncluded>
              <filemode>444</filemode>
              <username>${app.user}</username>
              <groupname>${app.group}</groupname>
              <sources><source>
                <location>../xdf-rest/test</location>
                <includes>
                  <include>*.sh</include>
                  <include>*.json</include>
                </includes>
              </source></sources>
            </mapping>

            <mapping>
              <directory>${app.optDir}/bin</directory>
              <directoryIncluded>false</directoryIncluded>
              <filemode>755</filemode>
              <username>${app.user}</username>
              <groupname>${app.group}</groupname>
              <sources>
                <!-- xdf-component -->
                <!--source>
                  <location>../xdf-component/src/main/scripts/*.sh</location>
                </source-->
                <!-- xdf-core -->
                <source>
                  <location>../xdf-core/src/main/scripts/xdf_info</location>
                  <filter>true</filter>
                </source>
                <source>
                  <location>../xdf-core/src/main/scripts/execute-component.sh</location>
                </source>
                <!-- xdf-meta -->
                <source>
                  <location>../xdf-meta/src/main/scripts</location>
                  <includes>
                    <include>create-metadata.sh</include>
                    <include>xdf-mdcli.sh</include>
                  </includes>
                </source>
                <!-- xdf-rest -->
                <source>
                  <location>../xdf-rest/src/main/scripts</location>
                  <includes>
                    <include>run-task.sh</include>
                    <include>start-server.sh</include>
                    <include>mk_csv.sh</include>
                  </includes>
                </source>
              </sources>
            </mapping>

            <mapping>
              <directory>${app.optDir}/conf</directory>
              <directoryIncluded>false</directoryIncluded>
              <filemode>644</filemode>
              <username>${app.user}</username>
              <groupname>${app.group}</groupname>
              <sources>
                <source>
                  <location>../xdf-core</location>
                  <includes>
                    <include>log4j.dtd</include>
                    <include>log4j.xml</include>
                  </includes>
                </source>
                <source>
                  <location>../xdf-rest</location>
                  <includes>
                    <include>logback.xml</include>
                    <include>xdf-rest.conf</include>
                  </includes>
                </source>
                <source>
                  <location>../xdf/src/main/resources/log4j.properties</location>
                </source>
              </sources>
            </mapping>

          </mappings>
          <!-- Installation scripts -->
          <preinstallScriptlet>
            <script>
#echo PreInstall done: ${app.nameVer}
            </script>
          </preinstallScriptlet>
          <postinstallScriptlet>
            <script>
echo PostInstall started: ${app.nameVer}
(
  cd ${app.optParDir} # /dfs/opt/bda
  rm -f ${app.name}-current
  ln -s ${app.name}/${app.nameVer} ${app.name}-current
)
#(cd ${app.optDir};ln -s bin sbin)
echo Soft link created:
ls -l ${app.optParDir}/${app.name}-current # ${app.optDir}/sbin
#
echo PostInstall done: ${app.nameVer}
            </script>
          </postinstallScriptlet>
          <preremoveScriptlet>
            <script>
echo PreRemove started: ${app.nameVer}
echo Remove soft link
rm -f ${app.optParDir}/${app.name}-current # ${app.optDir}/sbin
echo PreRemove done: ${app.nameVer}
            </script>
          </preremoveScriptlet>
        </configuration>
      </plugin>
      <!-- RPM plugin : end -->
    </plugins>
  </build>
</project>
