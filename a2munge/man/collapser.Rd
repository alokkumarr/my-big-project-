% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/collapser.R
\name{collapser}
\alias{collapser}
\alias{collapser.data.frame}
\alias{collapser.tbl_spark}
\title{Date Interval Ceiling Value function}
\usage{
collapser(df, input_col_name, input_format, period_value, side)

\method{collapser}{data.frame}(df, input_col_name, input_format, period_value,
  side)

\method{collapser}{tbl_spark}(df, input_col_name, input_format, period_value,
  side)
}
\arguments{
\item{df}{Dataframe}

\item{input_col_name}{Input Date column for which ceiling date has to be derived}

\item{input_format}{Date format of the input column. Primary usage is for Spark Data frames}

\item{period_value}{Period for which collapsing logic has to be applied}

\item{side}{Direction in which collapsing logic has to be applied}
}
\value{
returns DataFrame with ceiling date value derived on column {INPUT_COLUMN_NAME}_CEI
}
\description{
This is a function to extract the maximum possible value for a date column
for a given interval
}
\details{
For R data frames, the base ceiling date function will be used from the lubridate 
package with logic to negate the resulting date value by 1 period of the relevant 
interval Function returns a date value which will be the maximum possible value.
For Spark data frames, SQL logic has been coded to get the ceiling date. The output
format will be yyyy-MM-dd or yyyy-MM-dd HH:mm:ss only since Spark SQL does not allow
formatted Dates
}
\examples{

library(lubridate)

collapser(df, "2018-12-28 12:15:15", "yyyy-MM-dd HH:mm:ss", "month", "end")
Return value = 2018-12-31 00:00:00
}
