% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/summariser_map.R
\name{summariser_map}
\alias{summariser_map}
\alias{summariser_map.data.frame}
\alias{summariser_map.tbl_spark}
\title{DataFrame Summariser Map function}
\usage{
summariser_map(df, id_vars, map, sep, fill)

\method{summariser_map}{data.frame}(df, id_vars, map = list(), sep = "_",
  fill = NULL)

\method{summariser_map}{tbl_spark}(df, id_vars, map = list(), sep = "_",
  fill = NULL)
}
\arguments{
\item{df}{DataFrame}

\item{id_vars}{vector of column names. used in the group by aggregration. used
as the left hand side of pivot. used as the by in the join step. can be zero
or more columns.}

\item{map}{nested list of summariser function arguments. Can handle more than
one list of summariser arguments. Can also process additional parameters to the
aggregation function - similiar to the ... argument in summariser}

\item{sep}{argument passed to pivoter function. see pivoter function for
details}

\item{fill}{optional argument passed to pivoter function. see pivoter function
for details}
}
\value{
returns DataFrame
}
\description{
Function that allows for 1 or more aggregation combinations for a single
dataset. Applies aggregation logic, pivots and joins to create a single
dataframe. A wrapper function for multiple combinations of summariser function
and pivoter. See summariser documentation for more functionality details
}
\examples{
library(dplyr)


# Create toy dataset
set.seed(319)
id_vars <- seq(101, 200, by=1)
dates <- seq(from=Sys.Date()-365, to=Sys.Date(), by="day")
cat1 <- c("A", "B")
cat2 <- c("X", "Y", "Z")

dat <- data.frame()
for(id in id_vars){
  n <- floor(runif(1)*100)
  d <- data.frame(id = id,
                 date = sample(dates, n, replace = TRUE),
                 cat1 = sample(cat1, n, replace = TRUE),
                 cat2 = sample(cat2, n, replace = TRUE),
                 metric1 = sample(1:5, n, replace = TRUE),
                 metric2 = rnorm(n, mean=50, sd = 5))
 dat <- rbind(dat, d)
}

summariser_map(dat,
               id_vars = "id",
               map = list(
                 list(
                      group_vars = c("cat1"),
                      measure_vars = c("metric1", "metric2"),
                      fun = c("sum")),
                     list(group_vars = c("cat2"),
                          measure_vars = c("metric2"),
                          fun = c("mean"))
                   ))
}
