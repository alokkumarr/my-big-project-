% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mutater.R
\name{mutater}
\alias{mutater}
\alias{mutater.data.frame}
\alias{mutater.tbl_spark}
\title{DataFrame Mutater Function}
\usage{
mutater(df, order_vars, group_vars, measure_vars, fun, ...)

\method{mutater}{data.frame}(df, order_vars = NULL, group_vars = NULL,
  measure_vars, fun, ...)

\method{mutater}{tbl_spark}(df, order_vars = NULL, group_vars = NULL,
  measure_vars, fun, ...)
}
\arguments{
\item{df}{DataFrame}

\item{order_vars}{optional vector of column names to arrange data by. can be
one or more columns. default is NULL. order matters - arranges left to
right. supports decreasing ordering - see examples.}

\item{group_vars}{optional vector of column names to group data by. can be one
or more columns. default is NULL}

\item{measure_vars}{vector of column names to apply functional transformation
to. can be one or more columns}

\item{fun}{transformation function. accepts either fun name string or a
expression wrapped in funs() call. see examples for example of using custom
function with funs()}

\item{...}{additional arguments to pass to the transformation function}
}
\value{
DataFrame with additional calculated columns appended
}
\description{
Appends additional calculated columns to a dataframe. Allows for grouping and
ordering calculations. Additional arguments to the can be passed directly to
transformation function.
}
\examples{
library(dplyr)


# Create toy dataset
set.seed(319)
id_vars <- seq(101, 200, by=1)
dates <- seq(from=Sys.Date()-365, to=Sys.Date(), by="day")
cat1 <- c("A", "B")
cat2 <- c("X", "Y", "Z")

dat <- data.frame()
for(id in id_vars){
  n <- floor(runif(1)*100)
  d <- data.frame(id = id,
                 date = sample(dates, n, replace = TRUE),
                 cat1 = sample(cat1, n, replace = TRUE),
                 cat2 = sample(cat2, n, replace = TRUE),
                 metric1 = sample(1:5, n, replace = TRUE),
                 metric2 = rnorm(n, mean=50, sd = 5))
 dat <- rbind(dat, d)
}

# Mutater
dat \%>\% mutater(
                order_vars = c("date"),
                group_vars = c("id"),
                measure_vars = "metric1",
                fun = "cumsum")
dat \%>\% mutater(measure_vars = "metric1",
                fun = funs(add2 = .+2))
}
