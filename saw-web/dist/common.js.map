{"version":3,"sources":["webpack:///./src/app/common/utils/cron2Readable.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACQ;AACQ;AACN;AACF;AAEnC,SAAS,gBAAgB,CAAC,cAAc,EAAE,SAAS,EAAE,QAAQ;IAClE,IAAI,+CAAW,CAAC,cAAc,CAAC,IAAI,+CAAW,CAAC,SAAS,CAAC,EAAE;QACzD,OAAO,EAAE,CAAC;KACX;SAAM,IAAI,SAAS,KAAK,WAAW,EAAE;QACpC,yEAAyE;QACzE,OAAO,EAAE,CAAC;KACX;SAAM,IAAI,CAAC,4CAAQ,CAAC,cAAc,CAAC,EAAE;QACpC,MAAM,IAAI,KAAK,CACb,kEAAgE,OAAO,cAAgB,CACxF,CAAC;KACH;IACD,IAAI,2CAAO,CAAC,cAAc,CAAC,EAAE;QAC3B,OAAO,EAAE,CAAC;KACX;IACD,IAAI,SAAS,KAAK,QAAQ,EAAE;QAC1B,2FAA2F;QAC3F,OAAO,gDAAS,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;KAC3C;IACD,IAAM,SAAS,GAAG,cAAc,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;IAC3D,OAAO,gDAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;AACvC,CAAC;AAEM,SAAS,cAAc,CAAC,OAAO,EAAE,QAAQ;IAC9C,IAAM,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACtC,IAAM,WAAW,GAAG,kDAAS,CAAI,UAAU,CAAC,CAAC,CAAC,SAAI,UAAU,CAAC,CAAC,CAAG,EAAE,OAAO,EAAE,QAAQ,IAAI,SAAS,CAAC,CAAC,MAAM,EAAE,CAAC;IAC5G,IAAM,iBAAiB,GAAG,4CAAM,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACzE,UAAU,CAAC,CAAC,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;IACrC,UAAU,CAAC,CAAC,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;IACrC,OAAO,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC9B,CAAC","file":"common.js","sourcesContent":["import cronstrue from 'cronstrue';\nimport * as isEmpty from 'lodash/isEmpty';\nimport * as isUndefined from 'lodash/isUndefined';\nimport * as isString from 'lodash/isString';\nimport * as moment from 'moment-timezone';\n\nexport function generateSchedule(cronExpression, activeTab, timezone) {\n  if (isUndefined(cronExpression) && isUndefined(activeTab)) {\n    return '';\n  } else if (activeTab === 'immediate') {\n    // cronExpression won't be present if it's an immediate scheduled entity.\n    return '';\n  } else if (!isString(cronExpression)) {\n    throw new Error(\n      `generateSchedule expects a string as a first parameter, not: ${typeof cronExpression}`\n    );\n  }\n  if (isEmpty(cronExpression)) {\n    return '';\n  }\n  if (activeTab === 'hourly') {\n    // there is no time stamp in hourly cron hence converting to utc and local is not required.\n    return cronstrue.toString(cronExpression);\n  }\n  const localCron = convertToLocal(cronExpression, timezone);\n  return cronstrue.toString(localCron);\n}\n\nexport function convertToLocal(cronUTC, timezone) {\n  const splitArray = cronUTC.split(' ');\n  const timeInLocal = moment.tz(`${splitArray[1]} ${splitArray[2]}`, 'mm HH', timezone || 'Etc/GMT').toDate();\n  const extractMinuteHour = moment(timeInLocal).format('mm HH').split(' ');\n  splitArray[1] = extractMinuteHour[0];\n  splitArray[2] = extractMinuteHour[1];\n  return splitArray.join(' ');\n}\n"],"sourceRoot":""}