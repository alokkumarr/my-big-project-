{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{\"+Auh\":function(t,e){t.exports=\":host {\\n  width: 100%;\\n  height: 100%;\\n  max-height: 100%; }\\n\\n.md-subhead {\\n  color: #1a89d4;\\n  font-weight: 600;\\n  text-transform: uppercase; }\\n\\n.btn-card2 {\\n  background-color: #636363 !important;\\n  color: #fff !important;\\n  padding: 2px 15px; }\\n\\n.branded-column-name {\\n  color: #0077be;\\n  font-weight: 600; }\\n\\n.dp-card {\\n  min-height: 220px;\\n  max-height: 220px;\\n  height: 220px !important; }\\n\\n.dataPods-card {\\n  transition: box-shadow 0.5s;\\n  border-radius: 3px !important;\\n  background-color: #fff;\\n  border: solid 1px #d7eafa;\\n  padding: 3px !important;\\n  margin: 7px;\\n  height: 200px !important; }\\n\\n.dataPods-card:hover {\\n    /* prettier-ignore */\\n    box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12) !important; }\\n\\n.dataPods-card .mat-title {\\n    margin: 0 !important; }\\n\\n.dataPods-card mat-card-header {\\n    padding: 6px; }\\n\\n.dataPods-card mat-card-header .datapod-name {\\n      color: #0077be;\\n      font-weight: 300;\\n      font-size: 18px;\\n      -webkit-line-clamp: 1;\\n      overflow: hidden;\\n      text-overflow: ellipsis; }\\n\\n.dataPods-card .status-icon {\\n    width: 30px; }\\n\\n.dataPods-card .status-icon .mat-icon {\\n      font-size: 21px; }\\n\\n.dataPods-card .mat-card-header-text {\\n    margin: 0 3px; }\\n\\n.dataPods-card mat-card-content {\\n    padding: 16px;\\n    font-size: 14px; }\\n\\n.dataPods-card span {\\n    word-wrap: break-word; }\\n\\n.dataPods-card .descr {\\n    font-size: 13px;\\n    overflow: hidden;\\n    text-overflow: ellipsis;\\n    display: -webkit-box;\\n    line-height: 16px;\\n    max-height: 32px;\\n    min-height: 32px;\\n    -webkit-line-clamp: 2;\\n    /* number of lines to show */ }\\n\\n.dataPods-card .descr > span {\\n      font-size: 12px; }\\n\\n.FAILED {\\n  border-left: 3px solid #ab0e27; }\\n\\n.SUCCESS {\\n  border-left: 3px solid #73b421; }\\n\\n.INIT {\\n  border-left: 3px solid #f07601; }\\n\"},\"0tXz\":function(t,e){t.exports=\".test-connectivity {\\n  display: block !important;\\n  color: greenyellow; }\\n  .test-connectivity .console-header {\\n    height: 30px;\\n    background-color: #3b3b3b;\\n    padding: 0 3px 0 12px;\\n    color: #d7d7d7;\\n    border-radius: 7px 7px 0 0; }\\n  .test-connectivity .console-body {\\n    padding: 0 9px; }\\n  .test-connectivity #prompt {\\n    font-style: unset;\\n    font-size: 1em; }\\n  .test-connectivity #prompt.idle {\\n    animation: blink 1100ms linear infinite;\\n    -webkit-animation: blink 1100ms linear infinite; }\\n  @keyframes blink {\\n  49% {\\n    opacity: 1; }\\n  50% {\\n    opacity: 0; }\\n  89% {\\n    opacity: 0; }\\n  90% {\\n    opacity: 1; } }\\n  @-webkit-keyframes blink {\\n  49% {\\n    opacity: 1; }\\n  50% {\\n    opacity: 0; }\\n  89% {\\n    opacity: 0; }\\n  90% {\\n    opacity: 1; } }\\n\"},\"10fp\":function(t,e){t.exports='<button\\n  mat-icon-button\\n  e2e=\"open-sql-editor-btn\"\\n  class=\"triggerbtn\"\\n  [matMenuTriggerFor]=\"datasetmenu\"\\n>\\n  <mat-icon fontIcon=\"icon-action-solid\"></mat-icon>\\n</button>\\n<mat-menu #datasetmenu=\"matMenu\">\\n  <button\\n    e2e=\"execute-sql-btn\"\\n    mat-menu-item\\n    [disabled]=\"dsMetadata?.asOfNow?.status !== \\'SUCCESS\\'\"\\n    (click)=\"openSQLEditor()\"\\n  >\\n    <mat-icon\\n      style=\"margin-right: 0px !important; vertical-align: baseline;\"\\n      fontIcon=\"icon-query-mode\"\\n    ></mat-icon>\\n    <span>Execute SQL</span>\\n  </button>\\n  <button mat-menu-item disabled>\\n    <mat-icon\\n      style=\"margin-right: 0px; vertical-align: baseline;\"\\n      fontIcon=\"icon-delete\"\\n    ></mat-icon>\\n    <span>delete</span>\\n  </button>\\n</mat-menu>\\n'},\"1LLy\":function(t,e){t.exports=\".inpElement {\\n  width: 100%; }\\n\\n.formatList {\\n  border: 1px #ab0e27 solid;\\n  margin-bottom: 9px; }\\n\"},\"1iBz\":function(t,e){t.exports='<button mat-icon-button class=\"triggerbtn\" [matMenuTriggerFor]=\"datapodmenu\">\\n  <mat-icon fontIcon=\"icon-action-solid\"></mat-icon>\\n</button>\\n<mat-menu #datapodmenu=\"matMenu\">\\n  <button mat-menu-item disabled (click)=\"openSQLEditor()\">\\n    <mat-icon style=\"margin-right: 0px !important; vertical-align: baseline;\" fontIcon=\"icon-combo-chart\"></mat-icon>\\n    <span>Visualize</span>\\n  </button>\\n  <button mat-menu-item disabled (click)=\"openSQLEditor()\">\\n    <mat-icon style=\"margin-right: 0px !important; vertical-align: baseline;\" fontIcon=\"icon-utilities-solid\"></mat-icon>\\n    <span>Inspect</span>\\n  </button>\\n  <button mat-menu-item (click)=\"gotoEdit()\">\\n    <mat-icon style=\"margin-right: 0px !important; vertical-align: baseline;\" fontIcon=\"icon-edit\"></mat-icon>\\n    <span>Edit</span>\\n  </button>\\n  <button mat-menu-item disabled>\\n    <mat-icon style=\"margin-right: 0px; vertical-align: baseline;\" fontIcon=\"icon-delete\"></mat-icon>\\n    <span>delete</span>\\n  </button>\\n</mat-menu>'},\"1n4i\":function(t,e){t.exports=\":host {\\n  width: 100%;\\n  height: calc(100% - 3px);\\n  background-color: #f5f9fc;\\n  overflow: auto; }\\n\\n.details-container {\\n  height: calc(100% - 4px);\\n  padding: 0 4px 4px;\\n  background-color: #f5f9fc; }\\n\\n.details-container mat-tab-group {\\n    max-width: 100%;\\n    height: 100%; }\\n\\n.details-container .details-header {\\n    color: rgba(0, 0, 0, 0.54);\\n    background: rgba(0, 0, 0, 0.03);\\n    padding: 8px 0;\\n    height: 50px;\\n    font-size: 18px;\\n    font-weight: 500;\\n    border: 2px solid white; }\\n\\n.details-container .details-header .mat-icon {\\n      font-size: 26px; }\\n\\n.details-container .details-header .mat-chip {\\n      color: rgba(0, 0, 0, 0.54);\\n      font-size: 16px; }\\n\\n.details-container .details-header .status-icon {\\n      width: 36px; }\\n\\n.details-container .details-header .status-icon .mat-icon {\\n        font-size: 24px;\\n        vertical-align: middle; }\\n\\n.details-container .details-body {\\n    background-color: #fff;\\n    height: calc(100% - 50px); }\\n\\n.details-container ::ng-deep .mat-tab-body {\\n    background-color: #f5f9fc; }\\n\\n.details-container ::ng-deep .mat-tab-label-active {\\n    color: #0077be; }\\n\\n.details-container ::ng-deep .mat-tab-body-wrapper {\\n    height: 100%; }\\n\\n.details-container ::ng-deep .mat-tab-body-wrapper .mat-tab-body {\\n      overflow: hidden !important; }\\n\\n.details-container ::ng-deep .mat-tab-body-wrapper .mat-tab-body .mat-tab-body-content {\\n        overflow: hidden !important; }\\n\\n.details-container ::ng-deep .mat-tab-label,\\n  .details-container .mat-tab-link {\\n    font-size: 17px;\\n    font-weight: 600; }\\n\\n.details-container .details-card {\\n    margin: 3px; }\\n\\n.details-container .details-card .details-title {\\n      font-size: 16px;\\n      font-weight: 600;\\n      text-align: left;\\n      color: #555; }\\n\\n.details-container .details-card .details-content {\\n      font-size: 14px;\\n      font-weight: normal;\\n      line-height: 1.43; }\\n\\n.details-container .details-card .mat-divider {\\n      position: relative;\\n      padding-bottom: 5px; }\\n\\n.details-container .details-card .prop-name {\\n      color: #727272;\\n      width: 136px;\\n      line-height: 1.43; }\\n\\n.details-container .details-card .prop-value {\\n      color: #555; }\\n\\n.details-container .details-card .status_INIT {\\n      color: #f07601; }\\n\\n.details-container .details-card .status_SUCCESS {\\n      color: #73b421; }\\n\\n.details-container .details-card .status_FAILED {\\n      color: #ab0e27; }\\n\\n.details-container .details-grid {\\n    padding: 3px; }\\n\\n.details-container .data-cont {\\n    height: 100%; }\\n\\n.details-container .data-cont .data-grid {\\n      padding: 3px;\\n      height: 100%;\\n      width: 100%;\\n      overflow: auto;\\n      max-height: 100%; }\\n\\n.details-container .loading {\\n    width: 100%;\\n    height: 100%;\\n    color: #bdbdbd;\\n    text-align: center;\\n    background-color: #fff; }\\n\\n.details-container .loading span {\\n      font-size: 28px;\\n      word-break: break-word; }\\n\\n.details-container .loading .load-gif {\\n      height: 70%;\\n      width: 70%;\\n      background-image: url('/saw/web/assets/svg/loading-ripple.svg');\\n      background-size: contain;\\n      background-repeat: no-repeat;\\n      background-position: center; }\\n\\n.details-container ::ng-deep .dx-freespace-row {\\n    height: 0 !important; }\\n\"},\"3jxb\":function(t,e){t.exports='<ace-editor #editor\\n  [(text)]=\"query\"\\n  (textChanged)=\"queryUpdated($event)\"\\n  [options]=\"editorOptions\"\\n  [readOnly]=\"readOnlyMode\"\\n  theme=\"sqlserver\"\\n  mode=\"sql\">\\n</ace-editor>'},\"4xxA\":function(t,e){t.exports=\"::ng-deep .createsource-dialog {\\n  height: calc(100% - 48px); }\\n  ::ng-deep .createsource-dialog .mat-card-content {\\n    height: calc(100% - 36px); }\\n  ::ng-deep .createsource-dialog .mat-stepper-horizontal {\\n    height: 100%; }\\n  ::ng-deep .createsource-dialog .mat-horizontal-content-container {\\n    height: calc(100% - 55px);\\n    padding: 0; }\\n  ::ng-deep .createsource-dialog .mat-horizontal-content-container .mat-horizontal-stepper-content {\\n      height: 98%; }\\n  ::ng-deep .createsource-dialog .mat-horizontal-stepper-content[aria-expanded='false'] {\\n    height: 0 !important; }\\n  ::ng-deep .createsource-dialog .mat-form-field {\\n    min-width: 75% !important; }\\n  ::ng-deep .createsource-dialog .source-container {\\n    height: 85%;\\n    overflow: auto; }\\n  ::ng-deep .createsource-dialog .no-click {\\n    cursor: not-allowed !important; }\\n  ::ng-deep .createsource-dialog .details-title {\\n    text-align: left;\\n    color: #1a89d4;\\n    padding-left: 10px;\\n    margin: 0; }\\n  ::ng-deep .createsource-dialog .source-list > mat-card {\\n    margin: 9px 0;\\n    border-radius: 4px;\\n    padding: 9px 24px;\\n    cursor: pointer; }\\n  ::ng-deep .createsource-dialog mat-card > img {\\n    height: 60px;\\n    max-width: 70px; }\\n  ::ng-deep .createsource-dialog .selected {\\n    border: 3px #1a89d4 solid; }\\n\"},\"5NSV\":function(t,e){t.exports=\":host {\\n  display: flex;\\n  padding: 10px;\\n  flex-direction: column;\\n  height: 95%; }\\n\\n[mat-dialog-title] {\\n  padding: 0 20px 0 30px;\\n  border-bottom: 1px solid #d1d3d3; }\\n\\n[mat-dialog-title] h3 {\\n    color: #0077be; }\\n\\n.mat-card {\\n  margin: 0;\\n  padding: 20px; }\\n\\n.mat-dialog-content {\\n  margin: 0;\\n  flex-grow: 1;\\n  display: flex;\\n  flex-direction: column; }\\n\\n.title {\\n  text-align: left;\\n  color: #1a89d4;\\n  padding-left: 10px;\\n  margin: 0;\\n  font-weight: 600 !important; }\\n\\n.logs__route-details .mat-divider.mat-divider-horizontal {\\n  width: calc(100% - 40px);\\n  margin-left: 20px; }\\n\\n.logs__route-details__cell {\\n  font-size: 14px;\\n  font-weight: normal;\\n  line-height: 3;\\n  padding: 0 9px; }\\n\\n.logs__route-details__cell__label {\\n    color: #727272;\\n    width: 136px; }\\n\\n::ng-deep #routeLogsGrid .dx-row > tr > td {\\n  padding: 3px 7px; }\\n\\n::ng-deep #routeLogsGrid .dx-freespace-row {\\n  visibility: hidden; }\\n\\n::ng-deep #routeLogsGrid tbody:nth-child(even) {\\n  background-color: #f5f9fc; }\\n\\n.close-button {\\n  -webkit-transform: translateY(-6px);\\n          transform: translateY(-6px); }\\n\"},\"69C/\":function(t,e){t.exports='<div class=\"datasource-view\" fxLayout=\"column\" fxFlex fxFill>\\n  <mat-toolbar class=\"toolbar-white\">\\n    <mat-toolbar-row>\\n      <div\\n        fxFlex=\"47\"\\n        fxLayout=\"row\"\\n        fxLayoutAlign=\"start center\"\\n        fxLayoutGap=\"5px\"\\n      >\\n        <span i18n>Data Sources</span>\\n      </div>\\n      <span fxFlex></span>\\n      <div class=\"action-buttons\" fxLayout=\"row\" fxLayoutGap=\"10px\">\\n        <button\\n          mat-raised-button\\n          color=\"primary\"\\n          e2e=\"add-new-channel-btn\"\\n          (click)=\"createSource(undefined)\"\\n        >\\n          <span i18n>+ Channel</span>\\n        </button>\\n      </div>\\n    </mat-toolbar-row>\\n  </mat-toolbar>\\n  <div class=\"body-container\" fxLayout=\"column\">\\n    <div fxFlex=\"1 1 100px\" fxLayout=\"row\" fxLayoutAlign=\"space-around start\">\\n      <div\\n        type=\"button\"\\n        [attr.aria-label]=\"source.name\"\\n        class=\"mat-elevation-z3 source-row\"\\n        fxLayoutAlign=\"center center\"\\n        [class.selected]=\"selectedSourceType === source.uid\"\\n        *ngFor=\"let source of sourceTypes\"\\n        (click)=\"sourceSelectedType(source.uid, source.count)\"\\n        [matBadge]=\"source.count\"\\n        matBadgePosition=\"after\"\\n        [matBadgeColor]=\"source.color\"\\n        [matTooltip]=\"source.name\"\\n        [class.no-click]=\"source.count == 0\"\\n      >\\n        <img [src]=\"source.imgsrc\" [attr.alt]=\"source.name\" />\\n      </div>\\n    </div>\\n\\n    <div fxFlex fxLayout=\"row\" fxLayoutGap=\"5px\">\\n      <dx-data-grid\\n        #channelsGrid\\n        fxFlex=\"25\"\\n        e2e=\"channels-container\"\\n        class=\"mat-elevation-z3 sources-grid\"\\n        [dataSource]=\"sourceData\"\\n        [showBorders]=\"false\"\\n        [columnAutoWidth]=\"false\"\\n        [showColumnLines]=\"false\"\\n        [showRowLines]=\"true\"\\n        (onToolbarPreparing)=\"onToolbarPreparing($event)\"\\n        keyExpr=\"bisChannelSysId\"\\n        [rowAlternationEnabled]=\"false\"\\n        (onSelectionChanged)=\"onSourceSelectionChanged($event)\"\\n      >\\n        <dxo-selection mode=\"single\"></dxo-selection>\\n        <dxo-filter-row [visible]=\"false\" applyFilter=\"auto\"></dxo-filter-row>\\n        <dxo-search-panel\\n          [visible]=\"true\"\\n          [width]=\"220\"\\n          placeholder=\"Search...\"\\n        ></dxo-search-panel>\\n        <dxo-scrolling mode=\"virtual\" [useNative]=\"false\"></dxo-scrolling>\\n        <dxi-column\\n          caption=\"Channel Name\"\\n          dataField=\"channelName\"\\n          alignment=\"left\"\\n          cellTemplate=\"nameTemplate\"\\n        ></dxi-column>\\n        <dxi-column\\n          caption=\"Host Name\"\\n          dataField=\"hostName\"\\n          alignment=\"left\"\\n        ></dxi-column>\\n        <dxi-column\\n          caption=\"Actions\"\\n          dataField=\"bisRouteSysId\"\\n          alignment=\"center\"\\n          cellTemplate=\"actionsTemplate\"\\n          [allowFiltering]=\"false\"\\n          [allowSorting]=\"false\"\\n        >\\n        </dxi-column>\\n        <div\\n          *dxTemplate=\"let data of \\'actionsTemplate\\'\"\\n          fxLayout=\"row\"\\n          fxLayoutAlign=\"center center\"\\n        >\\n          <button\\n            mat-icon-button\\n            i18n-matTooltip\\n            [attr.e2e]=\"data.data.status\"\\n            class=\"grid-icon-btn\"\\n            [color]=\"data.data.status ? \\'error\\' : \\'primary\\'\"\\n            [matTooltip]=\"data.data.status ? \\'Deactivate\\' : \\'Activate\\'\"\\n            (click)=\"toggleChannelActivation(data.data)\"\\n          >\\n            <mat-icon fontIcon=\"icon-logout\"></mat-icon>\\n          </button>\\n        </div>\\n        <div *dxTemplate=\"let data of \\'sourceTypeTemplate\\'\">\\n          <div\\n            fxHide.lt-lg=\"true\"\\n            class=\"master-detail-caption\"\\n            e2e=\"current-source-name\"\\n          >\\n            {{ selectedSourceType | uppercase }}\\n          </div>\\n        </div>\\n        <div *dxTemplate=\"let data of \\'nameTemplate\\'\">\\n          <div class=\"s-name\" [attr.e2e]=\"data.value\" [matTooltip]=\"data.value\">\\n            {{ data.value }}\\n          </div>\\n        </div>\\n      </dx-data-grid>\\n\\n      <mat-card fxFlex class=\"routes-card\" fxLayout=\"column\">\\n        <div\\n          fxFlex=\"1 1 40px\"\\n          fxLayout=\"row\"\\n          fxLayoutGap=\"9px\"\\n          fxLayoutAlign=\"space-around center\"\\n        >\\n          <div class=\"mat-body-1\">\\n            <span\\n              class=\"details-title mat-subheading-2\"\\n              e2e=\"channel-name-detail-panel\"\\n              >{{ selectedSourceData?.channelName | uppercase }}</span\\n            >\\n          </div>\\n          <span fxFlex></span>\\n          <button\\n            mat-mini-fab\\n            e2e=\"channel-test-connect-btn-detail\"\\n            class=\"mat-elevation-z2\"\\n            color=\"primary\"\\n            [disabled]=\"!channelEditable\"\\n            (click)=\"testChannel(selectedSourceData?.bisChannelSysId)\"\\n            i18n-matTooltip\\n            matTooltip=\"Test Channel Connectivity\"\\n          >\\n            <mat-icon fontIcon=\"icon-query-mode\"></mat-icon>\\n          </button>\\n          <button\\n            mat-mini-fab\\n            e2e=\"edit-channel\"\\n            class=\"mat-elevation-z2\"\\n            color=\"primary\"\\n            [disabled]=\"!channelEditable\"\\n            (click)=\"createSource(selectedSourceData)\"\\n            matTooltip=\"Edit Channel\"\\n            i18n-matTooltip\\n          >\\n            <mat-icon fontIcon=\"icon-edit-solid\"></mat-icon>\\n          </button>\\n          <button\\n            mat-mini-fab\\n            e2e=\"delete-channel\"\\n            class=\"mat-elevation-z3\"\\n            color=\"warn\"\\n            [disabled]=\"!channelEditable\"\\n            (click)=\"deleteChannel(selectedSourceData?.bisChannelSysId)\"\\n            matTooltip=\"Delete Channel\"\\n            i18n-matTooltip\\n          >\\n            <mat-icon fontIcon=\"icon-delete-solid\"></mat-icon>\\n          </button>\\n          <button\\n            mat-raised-button\\n            e2e=\"add-route\"\\n            color=\"primary\"\\n            [disabled]=\"!channelEditable\"\\n            (click)=\"createRoute(selectedSourceData?.bisChannelSysId)\"\\n          >\\n            <span i18n>+ Route</span>\\n          </button>\\n        </div>\\n        <div style=\"padding-top: 5px;\">\\n          <mat-divider></mat-divider>\\n        </div>\\n        <div class=\"routes-card-body\">\\n          <div\\n            fxLayout=\"row\"\\n            fxLayoutalign=\"start center\"\\n            fxLayout.lt-md=\"column\"\\n          >\\n            <div class=\"details-content\" fxFlex=\"50\" fxLayout=\"row\">\\n              <span class=\"prop-name\" e2e=\"host-name\" i18n>Host Name : </span>\\n              <span>{{ selectedSourceData?.hostName }}</span>\\n            </div>\\n            <mat-divider [vertical]=\"true\"></mat-divider>\\n            <div class=\"details-content\" fxFlex=\"50\" fxLayout=\"row\">\\n              <span class=\"prop-name\" e2e=\"port-number\" i18n>Port No : </span>\\n              <span>{{ selectedSourceData?.portNo }}</span>\\n            </div>\\n          </div>\\n          <mat-divider></mat-divider>\\n          <div\\n            fxLayout=\"row\"\\n            fxLayoutalign=\"start center\"\\n            fxLayout.lt-md=\"column\"\\n          >\\n            <div class=\"details-content\" fxFlex=\"50\" fxLayout=\"row\">\\n              <span class=\"prop-name\" e2e=\"access-type\" i18n\\n                >Access Type :\\n              </span>\\n              <span>{{ selectedSourceData?.accessType }}</span>\\n            </div>\\n            <mat-divider [vertical]=\"true\"></mat-divider>\\n            <div class=\"details-content\" fxFlex=\"50\" fxLayout=\"row\">\\n              <span class=\"prop-name\" e2e=\"description\" i18n\\n                >Description :\\n              </span>\\n              <span>{{ selectedSourceData?.description }}</span>\\n            </div>\\n          </div>\\n          <mat-divider></mat-divider>\\n          <div\\n            fxLayout=\"row\"\\n            fxLayoutalign=\"start center\"\\n            fxLayout.lt-md=\"column\"\\n          >\\n            <div class=\"details-content\" fxFlex=\"50\" fxLayout=\"row\">\\n              <span class=\"prop-name\" e2e=\"created-by\" i18n>Created By : </span>\\n              <span>{{\\n                selectedSourceData?.modifiedBy || selectedSourceData?.createdBy\\n              }}</span>\\n            </div>\\n            <mat-divider [vertical]=\"true\"></mat-divider>\\n            <div class=\"details-content\" fxFlex=\"50\" fxLayout=\"row\">\\n              <span class=\"prop-name\" e2e=\"last-modified-at\" i18n\\n                >Last Modified:\\n              </span>\\n              <span *ngIf=\"selectedSourceData\">\\n                <span>{{\\n                  selectedSourceData?.modifiedDate ||\\n                    selectedSourceData?.createdDate | date: \\'short\\'\\n                }}</span>\\n              </span>\\n            </div>\\n          </div>\\n          <mat-divider></mat-divider>\\n          <div\\n            fxLayout=\"row\"\\n            fxLayoutalign=\"start center\"\\n            fxLayout.lt-md=\"column\"\\n          >\\n            <div class=\"details-content\" fxFlex=\"50\" fxLayout=\"row\">\\n              <span class=\"prop-name\" e2e=\"user-name\" i18n>User Name : </span>\\n              <span>{{ selectedSourceData?.userName }}</span>\\n            </div>\\n            <mat-divider [vertical]=\"true\"></mat-divider>\\n            <div class=\"details-content\" fxFlex=\"50\" fxLayout=\"row\">\\n              <span class=\"prop-name\" e2e=\"password-name\" i18n\\n                >Password :\\n              </span>\\n              <div *ngIf=\"selectedSourceData\">\\n                <span *ngIf=\"show; else hidePwd\">{{\\n                  selectedSourceData?.password\\n                }}</span>\\n                <ng-template #hidePwd\\n                  >&bull; &bull; &bull; &bull; &bull; &bull; &bull; &bull;\\n                  &bull;</ng-template\\n                >\\n                <button\\n                  *ngIf=\"!show\"\\n                  e2e=\"show-password-ds\"\\n                  matTooltip=\"Show Password\"\\n                  color=\"primary\"\\n                  mat-button\\n                  matSuffix\\n                  mat-icon-button\\n                  aria-label=\"show\"\\n                  (click)=\"togglePWD()\"\\n                >\\n                  <mat-icon fontIcon=\"icon-show\"></mat-icon>\\n                </button>\\n                <button\\n                  *ngIf=\"show\"\\n                  e2e=\"hide-password-ds\"\\n                  matTooltip=\"Hide Password\"\\n                  color=\"primary\"\\n                  mat-button\\n                  matSuffix\\n                  mat-icon-button\\n                  aria-label=\"show\"\\n                  (click)=\"togglePWD()\"\\n                >\\n                  <mat-icon fontIcon=\"icon-hide\"></mat-icon>\\n                </button>\\n              </div>\\n            </div>\\n          </div>\\n          <mat-divider></mat-divider>\\n          <dx-data-grid\\n            class=\"routes-grid\"\\n            [dataSource]=\"routesData\"\\n            [showBorders]=\"false\"\\n            [columnAutoWidth]=\"false\"\\n            [showColumnLines]=\"false\"\\n            (onToolbarPreparing)=\"onRoutesToolbarPreparing($event)\"\\n            [rowAlternationEnabled]=\"true\"\\n            keyExpr=\"bisRouteSysId\"\\n            [width]=\"\\'100%\\'\"\\n            [allowColumnResizing]=\"true\"\\n            e2e=\"routes-container\"\\n          >\\n            <dxo-filter-row\\n              [visible]=\"true\"\\n              applyFilter=\"auto\"\\n            ></dxo-filter-row>\\n            <dxo-search-panel\\n              [visible]=\"true\"\\n              [width]=\"240\"\\n              placeholder=\"Search...\"\\n            ></dxo-search-panel>\\n            <dxo-scrolling\\n              mode=\"virtual\"\\n              showScrollbar=\"always\"\\n              [useNative]=\"false\"\\n            ></dxo-scrolling>\\n            <dxi-column\\n              caption=\"Route Name\"\\n              dataField=\"routeName\"\\n              alignment=\"left\"\\n            ></dxi-column>\\n            <dxi-column\\n              caption=\"Created By\"\\n              dataField=\"createdBy\"\\n              alignment=\"left\"\\n            ></dxi-column>\\n            <dxi-column\\n              caption=\"Last Modified\"\\n              dataField=\"createdDate\"\\n              alignment=\"left\"\\n              cellTemplate=\"dateTemplate\"\\n            ></dxi-column>\\n            <dxi-column\\n              caption=\"File Pattern\"\\n              dataField=\"filePattern\"\\n              alignment=\"left\"\\n            ></dxi-column>\\n            <dxi-column\\n              caption=\"Schedule\"\\n              dataField=\"schedulerExpression\"\\n              alignment=\"left\"\\n              [calculateCellValue]=\"calculateScheduleCellValue\"\\n            ></dxi-column>\\n            <dxi-column\\n              caption=\"Source Location\"\\n              dataField=\"sourceLocation\"\\n              alignment=\"left\"\\n            ></dxi-column>\\n            <dxi-column\\n              caption=\"Destination Location\"\\n              dataField=\"destinationLocation\"\\n              alignment=\"left\"\\n            ></dxi-column>\\n            <dxi-column\\n              caption=\"Description\"\\n              dataField=\"description\"\\n              alignment=\"left\"\\n            ></dxi-column>\\n            <dxi-column\\n              caption=\"Actions\"\\n              dataField=\"bisRouteSysId\"\\n              alignment=\"center\"\\n              cellTemplate=\"actionsTemplate\"\\n              [allowFiltering]=\"false\"\\n              [allowSorting]=\"false\"\\n            ></dxi-column>\\n\\n            <div *dxTemplate=\"let data of \\'nameTemplate\\'\">\\n              <div\\n                class=\"details-title mat-subheading-2\"\\n                e2e=\"available-routes\"\\n                i18n\\n              >\\n                Available Routes\\n              </div>\\n            </div>\\n\\n            <div *dxTemplate=\"let data of \\'dateTemplate\\'\">\\n              <span *ngIf=\"data.data.modifiedDate; else defDate\">{{\\n                data.data.modifiedDate | date: \\'short\\'\\n              }}</span>\\n              <ng-template #defDate>{{\\n                data.data.createdDate | date: \\'short\\'\\n              }}</ng-template>\\n            </div>\\n\\n            <div *dxTemplate=\"let data of \\'actionsTemplate\\'\">\\n              <button\\n                mat-icon-button\\n                class=\"triggerbtn\"\\n                [attr.e2e]=\"data.data.routeName\"\\n                [matMenuTriggerFor]=\"datapodmenu\"\\n              >\\n                <mat-icon fontIcon=\"icon-action-solid\"></mat-icon>\\n              </button>\\n              <mat-menu #datapodmenu=\"matMenu\">\\n                <button\\n                  mat-menu-item\\n                  e2e=\"route-active-inactive-btn\"\\n                  [disabled]=\"!selectedSourceData?.status\"\\n                  [attr.color]=\"data.data.status ? \\'warn\\' : \\'primary\\'\"\\n                  (click)=\"toggleRouteActivation(data.data)\"\\n                >\\n                  <mat-icon\\n                    class=\"menu-btn-icon\"\\n                    [color]=\"data.data.status ? \\'warn\\' : \\'primary\\'\"\\n                    [attr.color]=\"data.data.status ? \\'warn\\' : \\'primary\\'\"\\n                    fontIcon=\"icon-logout\"\\n                  >\\n                  </mat-icon>\\n                  <span>{{\\n                    data.data.status ? \\'Deactivate\\' : \\'Activate\\'\\n                  }}</span>\\n                </button>\\n                <button\\n                  mat-menu-item\\n                  (click)=\"openLogsDialog(data.data)\"\\n                  e2e=\"view-route-logs-btn\"\\n                >\\n                  <mat-icon\\n                    class=\"menu-btn-icon\"\\n                    fontIcon=\"icon-clipboard\"\\n                  ></mat-icon>\\n                  <span i18n>View Route Logs</span>\\n                </button>\\n                <button\\n                  mat-menu-item\\n                  (click)=\"testRoute(data.data)\"\\n                  e2e=\"test-connectivity-btn\"\\n                >\\n                  <mat-icon\\n                    class=\"menu-btn-icon\"\\n                    fontIcon=\"icon-query-mode\"\\n                  ></mat-icon>\\n                  <span i18n>Test Route Connectivity</span>\\n                </button>\\n                <button\\n                  mat-menu-item\\n                  (click)=\"createRoute(data.data)\"\\n                  e2e=\"edit-route-btn\"\\n                >\\n                  <mat-icon\\n                    class=\"menu-btn-icon\"\\n                    fontIcon=\"icon-edit\"\\n                  ></mat-icon>\\n                  <span i18n>Edit Route</span>\\n                </button>\\n                <button\\n                  color=\"warn\"\\n                  mat-menu-item\\n                  (click)=\"deleteRoute(data.data)\"\\n                  e2e=\"delete-route-btn\"\\n                >\\n                  <mat-icon\\n                    color=\"warn\"\\n                    class=\"menu-btn-icon\"\\n                    fontIcon=\"icon-delete\"\\n                  ></mat-icon>\\n                  <span i18n>Delete Route</span>\\n                </button>\\n              </mat-menu>\\n            </div>\\n          </dx-data-grid>\\n        </div>\\n      </mat-card>\\n    </div>\\n  </div>\\n</div>\\n'},\"856K\":function(t,e){t.exports=\".inpElement {\\n  width: 100%; }\\n\\n.formatList {\\n  border: 1px #ab0e27 solid;\\n  margin-bottom: 9px; }\\n\"},\"8rGW\":function(t,e){t.exports='<form [formGroup]=\"form\" (ngSubmit)=\"submit(form)\">\\n  <mat-dialog-content>\\n    <mat-list class=\"formatList\" *ngIf=\"formatArr.length > 0\">\\n        <h3 mat-subheader>Identified formats</h3>\\n      <mat-list-item class=\"list-items\" *ngFor=\"let format of formatArr; index as i\">\\n        <p mat-line>{{i + 1}}. &ensp; {{ format }}</p>\\n        <mat-divider></mat-divider>\\n      </mat-list-item>\\n    </mat-list>\\n    <mat-form-field class=\"inpElement\">\\n      <input matInput formControlName=\"dateformat\" placeholder=\"{{placeholder}}\" />\\n    </mat-form-field>\\n  </mat-dialog-content>\\n  <mat-dialog-actions>\\n    <button mat-button type=\"submit\">OK</button>\\n    <button mat-button type=\"button\" style=\"color: #E5524C;\" mat-dialog-close>Cancel</button>\\n  </mat-dialog-actions>\\n</form>\\n'},\"8xfp\":function(t,e){t.exports=\":host {\\n  height: 100%;\\n  width: 100%; }\\n\\ntextarea {\\n  margin-bottom: 10px; }\\n\\n.ace_editor {\\n  width: 100%;\\n  height: 100% !important; }\\n\\n.query-actions {\\n  display: flex;\\n  flex-direction: row-reverse; }\\n\\n.ace-sqlserver {\\n  background-color: #f5f9fc; }\\n\"},\"9l9C\":function(t,e){t.exports=\":host {\\n  width: 100%;\\n  height: 100%; }\\n\\n.datasource-view {\\n  width: 100%;\\n  background-color: #f5f9fc;\\n  height: 100%; }\\n\\n.datasource-view .action-buttons .mat-raised-button {\\n    line-height: 32px !important;\\n    vertical-align: middle; }\\n\\n.datasource-view .grid-icon-btn {\\n    line-height: normal !important;\\n    height: 25px !important; }\\n\\n.datasource-view .icon-search {\\n    font-size: 26px !important; }\\n\\n.datasource-view .source-row {\\n    border-radius: 50%;\\n    background-color: white;\\n    width: 70px;\\n    height: 70px;\\n    margin: 20px 10px;\\n    cursor: pointer; }\\n\\n.datasource-view .source-row > img {\\n      height: 45px;\\n      width: 45px;\\n      border-radius: 20%; }\\n\\n.datasource-view .selected {\\n    border: 2px #1a89d4 solid; }\\n\\n.datasource-view .no-click {\\n    cursor: not-allowed; }\\n\\n.datasource-view .toolbar-white {\\n    background-color: #fff;\\n    height: 45px !important;\\n    min-height: 45px !important; }\\n\\n.datasource-view .body-container {\\n    height: calc(100% - 52px);\\n    margin: 3px;\\n    padding: 5px 3px 0; }\\n\\n.datasource-view .master-detail-caption {\\n    padding: 12px;\\n    font-size: 14px;\\n    font-weight: 600;\\n    color: #1a89d4; }\\n\\n.datasource-view .sources-grid {\\n    padding: 3px 3px 3px 0;\\n    border-radius: 5px; }\\n\\n.datasource-view .sources-grid .s-name {\\n      font-size: 14px;\\n      font-weight: 600;\\n      color: #1a89d4; }\\n\\n.datasource-view .routes-card {\\n    padding: 3px;\\n    border-radius: 5px; }\\n\\n.datasource-view .routes-card .routes-card-body {\\n      overflow: auto;\\n      height: calc(100% - 43px); }\\n\\n.datasource-view .routes-card .routes-card-body .mat-divider {\\n        border-color: rgba(0, 0, 0, 0.05) !important; }\\n\\n.datasource-view .routes-card .routes-card-body .route-grid--action-buttons button {\\n        width: 24px; }\\n\\n.datasource-view .routes-card .mat-mini-fab {\\n      height: 36px !important;\\n      width: 36px !important; }\\n\\n.datasource-view .routes-card .details-title {\\n      text-align: left;\\n      color: #1a89d4;\\n      padding-left: 10px;\\n      margin: 0;\\n      font-weight: 600 !important; }\\n\\n.datasource-view .routes-card .details-content {\\n      font-size: 14px;\\n      font-weight: normal;\\n      line-height: 3;\\n      padding: 0 9px; }\\n\\n.datasource-view .routes-card .prop-name {\\n      color: #727272;\\n      width: 136px; }\\n\\n.datasource-view .routes-card .routes-grid {\\n      padding-top: 3px; }\\n\\n.datasource-view .routes-card .menu-btn-icon {\\n      margin-right: 0px;\\n      vertical-align: baseline; }\\n\\n.datasource-view .routes-card .menu-btn-icon.mat-error {\\n        color: red; }\\n\\n.datasource-view .routes-card .menu-btn-icon.mat-primary {\\n        color: #1a89d4; }\\n\\n.datasource-view .dx-virtual-row {\\n    height: 0 !important; }\\n\\n::ng-deep .sourceDialogClass {\\n  padding: 0; }\\n\\n::ng-deep .sourceDialogClass ::ng-deep .mat-dialog-container {\\n    padding: 0 !important; }\\n\\n::ng-deep .testConnectivityClass {\\n  height: 222px !important;\\n  width: 768px !important;\\n  min-width: 768px !important;\\n  padding: 0 !important;\\n  background-color: black;\\n  border-radius: 7px 7px 0 0 !important; }\\n\"},\"9q4Y\":function(t,e){t.exports='<mat-card fxFlex fxFill fxLayout=\"row\">\\n  <mat-horizontal-stepper linear=\"true\" (selectionChange)=\"stepChanged($event)\">\\n    <ng-template matStepperIcon=\"edit\">\\n      <mat-icon fontIcon=\"icon-checkmark\"></mat-icon>\\n    </ng-template>\\n    <ng-template matStepperIcon=\"done\">\\n      <mat-icon fontIcon=\"icon-checkmark\"></mat-icon>\\n    </ng-template>\\n    <mat-step e2e=\"create-dataset-first-window\" [completed]=\"selectFullfilled\" label=\"SELECT\">\\n      <select-rawdata (onSelectFullfilled)=\"markSelectDone($event)\"></select-rawdata>\\n      <div fxLayout=\"row\" fxLayoutGap=\"20px\">\\n        <button e2e=\"first-window-stepperCancel\" mat-stroked-button (click)=\"backtoLists()\" color=\"warn\" class=\"stepperBtn\">\\n          <span i18n>Cancel</span>\\n        </button>\\n        <div fxFlex></div>\\n        <button mat-raised-button e2e=\"first-window-stepperFwd\" color=\"primary\" matStepperNext class=\"stepperBtn\">\\n          <span i18n>Next</span>\\n          <mat-icon fontIcon=\"icon-right-arrow\"></mat-icon>\\n        </button>\\n      </div>\\n    </mat-step>\\n    <mat-step e2e=\"create-dataset-second-window\" [completed]=\"detailsFilled\" label=\"DETAILS\">\\n      <dataset-details #detailsComponent [selFiles]=\"selectedFiles\" [previewConfig]=\"csvConfig\" (onDetailsFilled)=\"markDetailsDone($event)\"></dataset-details>\\n      <div fxLayout=\"row\" fxLayoutGap=\"20px\">\\n        <button e2e=\"second-window-stepperCancel\" mat-stroked-button (click)=\"backtoLists()\" color=\"warn\" class=\"stepperBtn\">\\n          <span i18n>Cancel</span>\\n        </button>\\n        <div fxFlex></div>\\n        <button mat-stroked-button e2e=\"second-window-stepperPrev\" color=\"primary\" matStepperPrevious class=\"stepperBtn previous \">\\n          <mat-icon fontIcon=\"icon-back\"></mat-icon>\\n          <span i18n>Previous</span>\\n        </button>\\n        <button mat-raised-button e2e=\"second-window-stepperFwd\" color=\"primary\" matStepperNext class=\"stepperBtn\">\\n          <span i18n> Next</span>\\n          <mat-icon fontIcon=\"icon-right-arrow\"></mat-icon>\\n        </button>\\n      </div>\\n    </mat-step>\\n    <mat-step e2e=\"create-dataset-third-window\" [completed]=\"previewDone\" label=\"PREVIEW\">\\n      <parser-preview *ngIf=\"selectedIndex === 2 || selectedIndex === 3\" [previewObj]=\"parsedPreview\" #previewComponent\\n        (parserConfig)=\"getParserConfig($event)\"></parser-preview>\\n      <div fxLayout=\"row\" fxLayoutGap=\"20px\">\\n        <button e2e=\"third-window-stepperCancel\" mat-stroked-button (click)=\"backtoLists()\" color=\"warn\" class=\"stepperBtn\">\\n          <span i18n>Cancel</span>\\n        </button>\\n        <div fxFlex></div>\\n        <button e2e=\"third-window-stepperPrev\" mat-stroked-button matStepperPrevious color=\"primary\" class=\"stepperBtn previous\">\\n          <mat-icon fontIcon=\"icon-back\"></mat-icon>\\n          <span i18n>Previous</span>\\n        </button>\\n        <button e2e=\"third-window-stepperFwd\" mat-raised-button color=\"primary\" matStepperNext class=\"stepperBtn\">\\n          <span i18n>Next</span>\\n          <mat-icon fontIcon=\"icon-right-arrow\"></mat-icon>\\n        </button>\\n      </div>\\n    </mat-step>\\n    <mat-step e2e=\"create-dataset-fourth-window\" label=\"ADD_DATASET\" [stepControl]=\"nameFormGroup\">\\n      <div fxLayout.gt-sm=\"row\" fxLayoutGap=\"20px\" class=\"data-details\">\\n        <div fxFlex=\"35\" fxShow fxHide.xs=\"true\" class=\"list-margin1\">\\n          <mat-list>\\n            <h3 class=\"list-header\" mat-subheader i18n>Selected Files</h3>\\n            <mat-list-item class=\"list-items\" *ngFor=\"let file of selectedFiles; index as i\" (click)=\"previewDialog(file)\">\\n              <p mat-line>{{i + 1}}. &ensp; {{ file.name }}</p>\\n              <div class=\"icon-div\">\\n                <mat-icon mat-list-icon class=\"preview-icon\" fontIcon=\"icon-show\"></mat-icon>\\n              </div>\\n              <mat-divider></mat-divider>\\n            </mat-list-item>\\n          </mat-list>\\n        </div>\\n        <mat-card fxFlex class=\"top-margin\">\\n          <mat-card-header class=\"headerGradient\">\\n            <div class=\"mat-body-1\" i18n>Describe Your Dataset</div>\\n          </mat-card-header>\\n          <mat-card-content>\\n            <div class=\"form-div\">\\n              <form [formGroup]=\"nameFormGroup\">\\n                <section class=\"input-section\">\\n                  <mat-form-field class=\"margin20\">\\n                    <input matInput placeholder=\"Dataset Name\" e2e=\"dataset-name\" name=\"datasetName\" formControlName=\"nameControl\"\\n                      maxlength=\"18\" required />\\n                    <mat-error *ngIf=\"nameFormGroup.controls.nameControl.hasError(\\'required\\')\" i18n>\\n                      Dataset Name is\\n                      <strong>required</strong>\\n                    </mat-error>\\n                    <mat-error *ngIf=\"nameFormGroup.controls.nameControl.hasError(\\'pattern\\')\" i18n>\\n                      <strong> Only alphabets, numbers are allowed\\n                      </strong>\\n                    </mat-error>\\n                    <mat-hint> Only alphabets, numbers are allowed </mat-hint>\\n                  </mat-form-field>\\n                  \\x3c!-- <div class=\"margin20\">\\n                    <mat-radio-group labelPosition=\"before\" [(ngModel)]=\"parserConf.outputs[0].mode\" [ngModelOptions]=\"{standalone: true}\">\\n                      <mat-radio-button value=\"replace\">\\n                        Replace\\n                      </mat-radio-button>\\n                      <mat-radio-button value=\"append\">\\n                        Append\\n                      </mat-radio-button>\\n                    </mat-radio-group>\\n                  </div> --\\x3e\\n                </section>\\n                <section class=\"input-section\">\\n                  <mat-form-field class=\"margin20\">\\n                    <input matInput placeholder=\"Description\" name=\"description\" e2e=\"dataset-desc\" formControlName=\"descControl\"\\n                      maxlength=\"50\" required />\\n                    <mat-error *ngIf=\"nameFormGroup.controls.descControl.hasError(\\'required\\')\" i18n>\\n                      Dataset description is\\n                      <strong>required</strong>\\n                    </mat-error>\\n                  </mat-form-field>\\n                </section>\\n                \\x3c!-- <mat-divider></mat-divider>\\n                <section class=\"input-section\">\\n                  <mat-form-field class=\"margin20\">\\n                    <mat-select placeholder=\"SPARK_MASTER\" [(value)]=\"parserConf.parameters[0].value\">\\n                      <mat-option value=\"yarn\">Yarn</mat-option>\\n                      <mat-option value=\"standard\" disabled>Standard</mat-option>\\n                    </mat-select>\\n                  </mat-form-field>\\n                  <div class=\"margin20\">\\n                    <span fxFlex=\"20\">Spark Instances</span>\\n                    <mat-slider matInput fxFlex name=\"sparkInstances\" class=\"margin20\" max=\"10\" min=\"2\" step=\"1\" thumb-label=\"true\" tick-interval=\"1\"\\n                      [(ngModel)]=\"parserConf.parameters[1].value\" [ngModelOptions]=\"{standalone: true}\">\\n                    </mat-slider>\\n                    <span>{{parserConf.parameters[1].value}}</span>\\n                  </div>\\n                </section> --\\x3e\\n              </form>\\n            </div>\\n          </mat-card-content>\\n        </mat-card>\\n      </div>\\n      <div fxLayout=\"row\" fxLayoutGap=\"20px\">\\n        <button e2e=\"fourth-window-stepperCancel\" mat-stroked-button (click)=\"backtoLists()\" class=\"stepperBtn Outline\">\\n          <span i18n>Cancel</span>\\n        </button>\\n        <div fxFlex></div>\\n        <button e2e=\"fourth-window-stepperPrev\" mat-stroked-button color=\"primary\" matStepperPrevious class=\"stepperBtn previous\">\\n          <mat-icon fontIcon=\"icon-back\"></mat-icon>\\n          <span i18n>Previous</span>\\n        </button>\\n        <button e2e=\"fourth-window-stepperAdd\" mat-raised-button color=\"primary\" matStepperNext [disabled]=\"!nameFormGroup.valid\"\\n          (click)=\"triggerParser()\" class=\"stepperBtn\">\\n          <span i18n>ADD</span>\\n          <mat-icon fontIcon=\"icon-right-arrow\"></mat-icon>\\n        </button>\\n      </div>\\n    </mat-step>\\n  </mat-horizontal-stepper>\\n</mat-card>'},Adow:function(t,e){t.exports='<div class=\"details-container\">\\n  <div class=\"details-header\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\\n    <button mat-button class=\"bck-btn\">\\n      <mat-icon fontIcon=\"icon-arrow-left\" (click)=\"backToDS()\"></mat-icon>\\n    </button>\\n    <div class=\"ds-name\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"10px\">\\n      <span>Selected Dataset: </span>\\n      <mat-chip-list>\\n        <mat-chip>{{dsMetadata.system.name}}</mat-chip>\\n      </mat-chip-list>\\n      <div class=\"status-icon\" matTooltip=\"{{dsMetadata.asOfNow.status}}\" [ngSwitch]=\"dsMetadata.asOfNow.status\">\\n        <mat-icon *ngSwitchCase=\"\\'FAILED\\'\" style=\"color: #AB0E27;\" fontIcon=\"icon-warning\"></mat-icon>\\n        <mat-icon *ngSwitchCase=\"\\'SUCCESS\\'\" style=\"color: #73B421;\" fontIcon=\"icon-exchange\"></mat-icon>\\n        \\x3c!-- <img *ngSwitchCase=\"\\'SUCCESS\\'\" src=\"../../../../../../../../../assets/svg/happy.svg\" height=\"24\" width=\"24\" /> --\\x3e\\n        <mat-icon *ngSwitchCase=\"\\'INIT\\'\" fontIcon=\"icon-wip\"></mat-icon>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\"details-body\">\\n    <mat-tab-group dynamicHeight=\"false\" (selectedTabChange)=\"tabChanged($event)\">\\n      <mat-tab label=\"Summary\">\\n        <div class=\"data-summary-view\" e2e=\"data-set-summary-preview\" fxLayout=\"row\" fxFill fxFlex fxLayoutGap=\"10px\">\\n          <mat-card class=\"details-card\" fxLayout=\"column\" fxFlex=\"60\">\\n            <div class=\"ds-details\">\\n              <span class=\"details-title mat-subheading-2\">Dataset Details</span>\\n              <mat-divider></mat-divider>\\n              <div class=\"details-content\" fxLayout=\"row\">\\n                <span class=\"prop-name\">Dataset Name :</span>\\n                <span class=\"prop-value\">{{dsMetadata.system.name}}</span>\\n              </div>\\n              <div class=\"details-content\" fxLayout=\"row\">\\n                <span class=\"prop-name\">Dataset Description :</span>\\n                <span class=\"prop-value\">{{dsMetadata.system.description}}</span>\\n              </div>\\n              <div class=\"details-content\" fxLayout=\"row\">\\n                <span class=\"prop-name\">Execution Status :</span>\\n                <span class=\"prop-value status_{{dsMetadata.asOfNow.status}}\">{{dsMetadata.asOfNow.status}}</span>\\n              </div>\\n              <div class=\"details-content\" fxLayout=\"row\">\\n                <span class=\"prop-name\">Format :</span>\\n                <span class=\"prop-value\">{{dsMetadata.system.format}}</span>\\n              </div>\\n              <div class=\"details-content\" fxLayout=\"row\">\\n                <span class=\"prop-name\">Number of Files :</span>\\n                <span class=\"prop-value\">{{dsMetadata.system.numberOfFiles}}</span>\\n              </div>\\n            </div>\\n            <h2></h2>\\n            <div class=\"ds-details\">\\n              <span class=\"details-title mat-subheading-2\">Audit Log</span>\\n              <mat-divider></mat-divider>\\n              <div class=\"details-content\" fxLayout=\"row\">\\n                <span class=\"prop-name\">Created By :</span>\\n                <span class=\"prop-value\">{{dsMetadata.system.user}}</span>\\n              </div>\\n              <div class=\"details-content\" fxLayout=\"row\">\\n                <span class=\"prop-name\">Started :</span>\\n                <span class=\"prop-value\">{{dsMetadata.asOfNow.started}}</span>\\n              </div>\\n              <div class=\"details-content\" fxLayout=\"row\">\\n                <span class=\"prop-name\">Finished :</span>\\n                <span class=\"prop-value\">{{dsMetadata.asOfNow.finished}}</span>\\n              </div>\\n            </div>\\n          </mat-card>\\n          <mat-card class=\"details-card details-grid\" fxFlex=\"40\">\\n            <div fxFill>\\n              <dx-data-grid fxFlex [dataSource]=\"dsMetadata?.schema?.fields\" [rowAlternationEnabled]=\"true\" [height]=\"\\'98%\\'\" [width]=\"\\'100%\\'\" style=\"position:absolute;top:0;bottom:0;left:0;bottom:0;\"\\n                [showBorders]=\"false\">\\n                <dxi-column caption=\"Field Name\" dataField=\"name\"></dxi-column>\\n                <dxi-column caption=\"Data Type\" dataField=\"type\"></dxi-column>\\n                <dxo-scrolling mode=\"virtual\" showScrollbar=\"always\" [useNative]=\"false\"></dxo-scrolling>\\n                <dxo-filter-row [visible]=\"true\" applyFilter=\"auto\"></dxo-filter-row>\\n                <dxo-header-filter [visible]=\"true\"></dxo-header-filter>\\n              </dx-data-grid>\\n            </div>\\n          </mat-card>\\n        </div>\\n      </mat-tab>\\n      <mat-tab  label=\"Data Preview\" [disabled]=\"previewStatus === \\'failed\\'\">\\n        <div e2e=\"data-set-detial-preview\" fxLayout=\"row\" class=\"data-cont\" fxFlex fxLayoutAlign=\"center center\">\\n          <mat-card class=\"data-grid\" fxFlex=\"100\">\\n            <dx-data-grid #dpGrid id=\"dpGrid\" *ngIf=\"previewStatus === \\'success\\'\" fxFlex [dataSource]=\"previewData\" [height]=\"\\'99.5%\\'\" [width]=\"\\'100%\\'\" [allowColumnResizing]=\"true\" style=\"position:absolute;top:0;bottom:0;left:0;bottom:0;\"\\n              [columnAutoWidth]=\"true\" [rowAlternationEnabled]=\"true\" [showBorders]=\"false\">\\n              <dxo-scrolling mode=\"virtual\" showScrollbar=\"always\" [useNative]=\"false\"></dxo-scrolling>\\n              <dxo-filter-row [visible]=\"true\" applyFilter=\"auto\"></dxo-filter-row>\\n              <dxo-header-filter [visible]=\"false\"></dxo-header-filter>\\n              <dxo-load-panel [enabled]=\"false\">\\n              </dxo-load-panel>\\n            </dx-data-grid>\\n            <div class=\"loading\" fxLayout=\"column\" fxLayoutAlign=\"center center\" *ngIf=\"previewStatus === \\'queued\\'\">\\n              <span class=\"load-gif\">Generating Preview... </span>\\n            </div>\\n          </mat-card>\\n        </div>\\n      </mat-tab>\\n    </mat-tab-group>\\n  </div>\\n</div>\\n'},BRvR:function(t,e){t.exports='<div mat-dialog-title fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\\n  <h3>{{ routeData.routeName }}</h3>\\n  <button mat-icon-button color=\"warn\" class=\"close-button\" (click)=\"close()\">\\n    <mat-icon fontIcon=\"icon-close\"></mat-icon>\\n  </button>\\n</div>\\n<div mat-dialog-content id=\"route-log__dialog-content-container\">\\n  <div class=\"logs__route-details\">\\n    <div fxLayout=\"row\" fxLayoutalign=\"start center\" fxLayout.lt-md=\"column\">\\n      <div class=\"logs__route-details__cell\" fxFlex=\"50\" fxLayout=\"row\">\\n        <span class=\"logs__route-details__cell__label\" i18n\\n          >Channel Name :\\n        </span>\\n        <span e2e=\"channel-name-route-logs\">{{ routeData?.channelName }}</span>\\n      </div>\\n      <div class=\"logs__route-details__cell\" fxFlex=\"50\" fxLayout=\"row\">\\n        <span class=\"logs__route-details__cell__label\" i18n\\n          >File pattern :\\n        </span>\\n        <span e2e=\"file-pattern-route-logs\">{{ routeData?.filePattern }}</span>\\n      </div>\\n    </div>\\n    <mat-divider></mat-divider>\\n    <div fxLayout=\"row\" fxLayoutalign=\"start center\" fxLayout.lt-md=\"column\">\\n      <div class=\"logs__route-details__cell\" fxFlex=\"50\" fxLayout=\"row\">\\n        <span class=\"logs__route-details__cell__label\" i18n\\n          >Modified by :\\n        </span>\\n        <span e2e=\"modifiedby-route-logs\">{{ routeData?.modifiedBy || routeData?.mcreatedBy }}</span>\\n      </div>\\n      <mat-divider [vertical]=\"true\"></mat-divider>\\n      <div class=\"logs__route-details__cell\" fxFlex=\"50\" fxLayout=\"row\">\\n        <span class=\"logs__route-details__cell__label\" i18n\\n          >Modified at :\\n        </span>\\n        <span e2e=\"modified-at-route-logs\">{{\\n          routeData?.modifiedDate || routeData?.createdDate | date: \\'short\\'\\n        }}</span>\\n      </div>\\n    </div>\\n    <mat-divider></mat-divider>\\n    <div fxLayout=\"row\" fxLayoutalign=\"start center\" fxLayout.lt-md=\"column\">\\n      <div class=\"logs__route-details__cell\" fxFlex=\"50\" fxLayout=\"row\">\\n        <span class=\"logs__route-details__cell__label\" i18n\\n          >Destination :\\n        </span>\\n        <span e2e=\"destination-route-logs\">{{ routeData?.destinationLocation }}</span>\\n      </div>\\n      <mat-divider [vertical]=\"true\"></mat-divider>\\n      <div class=\"logs__route-details__cell\" fxFlex=\"50\" fxLayout=\"row\">\\n        <span class=\"logs__route-details__cell__label\" i18n>Source : </span>\\n        <span e2e=\"source-loc-route-logs\">{{ routeData?.sourceLocation }}</span>\\n      </div>\\n    </div>\\n    <mat-divider></mat-divider>\\n    <div fxLayout=\"row\" fxLayoutalign=\"start center\" fxLayout.lt-md=\"column\">\\n      <div class=\"logs__route-details__cell\" fxFlex=\"50\" fxLayout=\"row\">\\n        <span class=\"logs__route-details__cell__label\" i18n\\n          >Last Fire Time :\\n        </span>\\n        <span e2e=\"last-fire-route-logs\">{{\\n          lastFireTime > 0 ? (lastFireTime | date: \\'short\\') : \\'NA\\'\\n        }}</span>\\n      </div>\\n      <mat-divider [vertical]=\"true\"></mat-divider>\\n      <div class=\"logs__route-details__cell\" fxFlex=\"50\" fxLayout=\"row\">\\n        <span class=\"logs__route-details__cell__label\" i18n\\n          >Next Fire Time :\\n        </span>\\n        <span e2e=\"next-fire-route-logs\">{{\\n          nextFireTime > 0 ? (nextFireTime | date: \\'short\\') : \\'NA\\'\\n        }}</span>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <dx-data-grid\\n    id=\"routeLogsGrid\"\\n    class=\"mat-elevation-z3 route-log__data-grid\"\\n    [height]=\"customGridHeight\"\\n    width=\"100%\"\\n    e2e=\"route-logs-container\"\\n    [allowColumnResizing]=\"true\"\\n    [columnMinWidth]=\"50\"\\n    [dataSource]=\"logs\"\\n    [showBorders]=\"false\"\\n    [columnAutoWidth]=\"true\"\\n    [showRowLines]=\"false\"\\n    [showColumnLines]=\"false\"\\n    [rowAlternationEnabled]=\"true\"\\n    rowTemplate=\"logTableRowTemplate\"\\n    e2e=\"route-logs-container\"\\n  >\\n    <dxo-scrolling mode=\"virtual\" [useNative]=\"false\"></dxo-scrolling>\\n    <dxi-column\\n      caption=\"File Pattern\"\\n      dataField=\"filePattern\"\\n      alignment=\"left\"\\n    ></dxi-column>\\n    <dxi-column\\n      caption=\"File Name\"\\n      dataField=\"fileName\"\\n      alignment=\"left\"\\n    ></dxi-column>\\n    <dxi-column\\n      caption=\"Actual File Rec Date\"\\n      dataField=\"actualFileRecDate\"\\n      alignment=\"left\"\\n    ></dxi-column>\\n    <dxi-column\\n      caption=\"Rec File Name\"\\n      dataField=\"recdFileName\"\\n      alignment=\"left\"\\n    ></dxi-column>\\n    <dxi-column\\n      caption=\"Rec File Size\"\\n      dataField=\"recdFileSize\"\\n      alignment=\"left\"\\n    ></dxi-column>\\n    <dxi-column\\n      caption=\"File Status\"\\n      dataField=\"mflFileStatus\"\\n      alignment=\"left\"\\n    ></dxi-column>\\n    <dxi-column\\n      caption=\"Process State\"\\n      dataField=\"bisProcessState\"\\n      alignment=\"left\"\\n    ></dxi-column>\\n    <dxi-column\\n      caption=\"Transfer Start\"\\n      dataField=\"transferStartTime\"\\n      alignment=\"left\"\\n    ></dxi-column>\\n    <dxi-column\\n      caption=\"Transfer End\"\\n      dataField=\"transferEndTime\"\\n      alignment=\"left\"\\n    ></dxi-column>\\n    <dxi-column\\n      caption=\"Transfer Duration (ms)\"\\n      dataField=\"transferDuration\"\\n      alignment=\"left\"\\n    ></dxi-column>\\n    <dxi-column\\n      caption=\"Modified at\"\\n      dataField=\"modifiedDate\"\\n      alignment=\"left\"\\n    ></dxi-column>\\n    <dxi-column\\n      caption=\"Created at\"\\n      dataField=\"createdDate\"\\n      alignment=\"left\"\\n    ></dxi-column>\\n\\n    <tbody\\n      class=\"logRow dx-row\"\\n      e2e=\"route-log-row\"\\n      *dxTemplate=\"let logRow of \\'logTableRowTemplate\\'\"\\n    >\\n      <tr class=\"tr-row\" e2e=\"route-log-row-tr\">\\n        <td e2e=\"route-log-filePattern\">{{ logRow.data.filePattern }}</td>\\n        <td e2e=\"route-log-fileName\" [matTooltip]=\"logRow.data.fileName\">\\n          {{ logRow.data.fileName }}\\n        </td>\\n        <td e2e=\"route-log-actualFileRecDate\">\\n          {{ logRow.data.actualFileRecDate | date: \\'short\\' }}\\n        </td>\\n        <td\\n          e2e=\"route-log-recdFileName\"\\n          [matTooltip]=\"logRow.data.recdFileName\"\\n        >\\n          {{ logRow.data.recdFileName }}\\n        </td>\\n        <td e2e=\"route-log-recdFileSize\">{{ logRow.data.recdFileSize }}</td>\\n        <td e2e=\"route-log-mflFileStatus\">{{ logRow.data.mflFileStatus }}</td>\\n        <td e2e=\"route-log-bisProcessState\">\\n          {{ logRow.data.bisProcessState }}\\n        </td>\\n        <td e2e=\"route-log-transferStartTime\">\\n          {{ logRow.data.transferStartTime | date: \\'MM/dd/yyyy, HH:mm:ss.SSS\\' }}\\n        </td>\\n        <td e2e=\"route-log-transferEndTime\">\\n          {{ logRow.data.transferEndTime | date: \\'MM/dd/yyyy, HH:mm:ss.SSS\\' }}\\n        </td>\\n\\n        <td e2e=\"route-log-transferDuration\">\\n          {{ logRow.data.transferDuration }}\\n        </td>\\n        <td e2e=\"route-log-modifiedDate\">\\n          {{ logRow.data.modifiedDate | date: \\'short\\' }}\\n        </td>\\n        <td e2e=\"route-log-createdDate\">\\n          {{ logRow.data.createdDate | date: \\'short\\' }}\\n        </td>\\n      </tr>\\n    </tbody>\\n  </dx-data-grid>\\n</div>\\n'},CG1N:function(t,e){t.exports=\":host {\\n  width: 100%; }\\n\\n.container {\\n  height: calc(100% - 3px);\\n  background-color: #f5f9fc;\\n  padding: 0 3px 3px;\\n  overflow: auto; }\\n\\n.container .header {\\n    color: rgba(0, 0, 0, 0.54);\\n    background: rgba(0, 0, 0, 0.03);\\n    padding: 8px 0;\\n    height: 50px;\\n    font-size: 18px;\\n    font-weight: 700;\\n    border: 2px solid white; }\\n\\n.container .header .mat-icon {\\n      font-size: 26px; }\\n\\n.container .header > span {\\n      font-size: 14px;\\n      font-weight: normal; }\\n\\n.container .body {\\n    background-color: #fff;\\n    height: calc(100% - 50px);\\n    max-height: calc(100% - 50px) !important; }\\n\\n.container .body mat-card {\\n      padding: 0;\\n      height: 100%; }\\n\\n.container .body mat-card .mat-card-content {\\n        height: 100%;\\n        max-height: 100%;\\n        overflow: auto; }\\n\\n.container .body mat-card .mat-card-content .mat-tab-group {\\n          height: 100%; }\\n\\n.container .body mat-card .mat-card-content ::ng-deep .mat-tab-label-active {\\n          color: #0077be; }\\n\\n.container .body mat-card .mat-card-content ::ng-deep .mat-tab-body-wrapper {\\n          height: 100%; }\\n\\n.container .body mat-card .mat-card-content ::ng-deep .mat-tab-body-wrapper .mat-tab-body {\\n            overflow: hidden !important; }\\n\\n.container .body mat-card .mat-card-content ::ng-deep .mat-tab-body-wrapper .mat-tab-body .mat-tab-body-content {\\n              overflow: hidden !important; }\\n\"},EMm7:function(t,e){t.exports='<dx-data-grid id=\"gridContainer\">\\n  <div *dxTemplate=\"let data of \\'toggleViewTemplate\\'\">\\n    <div *ngIf=\"!fullScreen\">\\n      <button mat-icon-button matTooltip=\"Full screen mode\" (click)=\"togglePreview(true)\">\\n        <mat-icon fontIcon=\"icon-full-screen\" class=\"screen-icon\"></mat-icon>\\n      </button>\\n    </div>\\n    <div *ngIf=\"fullScreen\">\\n      <button mat-icon-button matTooltip=\"Exit full screen mode\" (click)=\"togglePreview(false)\">\\n        <mat-icon fontIcon=\"icon-fullscreen-exit\" class=\"screen-icon\" style=\"font-size: 28px;\"></mat-icon>\\n      </button>\\n    </div>\\n  </div>\\n</dx-data-grid>\\n'},EZzP:function(t,e){t.exports=\":host {\\n  width: 100%; }\\n\\n.select-view {\\n  height: calc(100% - 43px); }\\n\\n.select-view mat-card {\\n    height: 99%; }\\n\\n.select-view mat-card ::ng-deep .mat-card-header-text {\\n      display: none; }\\n\\n.tree-icon {\\n  color: #eecb00;\\n  font-size: 20px; }\\n\\n.toolbar-spacer {\\n  flex: 1 1 auto; }\\n\\n.margin-9 {\\n  margin: 3px 3px 0 0;\\n  padding-bottom: 0; }\\n\\n#infoForMask {\\n  padding-left: 9px;\\n  padding-right: 9px; }\\n\\n#infoForMask mat-icon {\\n    color: #0077be;\\n    font-size: 19px; }\\n\\n#infoForMask ::ng-deep .mat-form-field-wrapper {\\n    padding-bottom: 0; }\\n\\n#infoForMask ::ng-deep .mat-form-field-underline {\\n    bottom: 0.25em; }\\n\\n.selectCard {\\n  padding: 0;\\n  background-color: #f5f9fc; }\\n\\n.whiteFrame {\\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -1px rgba(0, 0, 0, 0.12);\\n  background-color: white; }\\n\\n.headerGradient {\\n  padding: 8px 15px;\\n  background-color: white;\\n  border-top-left-radius: 3px;\\n  border-top-right-radius: 3px; }\\n\\n.results {\\n  width: 100%;\\n  height: 150px;\\n  color: #bdbdbd;\\n  text-align: center; }\\n\\n.results span {\\n    font-size: 28px;\\n    word-break: break-word; }\\n\\n.file-icon {\\n  color: #73b421;\\n  font-size: 18px; }\\n\\n.tree {\\n  padding: 25px 0 0 9px;\\n  border-right-style: inset; }\\n\\n.preview-icon {\\n  font-size: 18px;\\n  cursor: pointer;\\n  color: #0077be; }\\n\\n.staging-content {\\n  height: calc(100% - 55px); }\\n\\n.mat-icon-button {\\n  height: 36px !important; }\\n\\n.gridContainer {\\n  height: calc(100% - 47px) !important; }\\n\\n.selected-files {\\n  padding-top: 0;\\n  max-height: calc(100% - 55px) !important;\\n  overflow: auto; }\\n\"},GKfJ:function(t,e){t.exports='<div class=\"dataSets-cardView\" fxLayout=\"row wrap\">\\n  <div\\n    class=\"ds-card\"\\n    fxFlex.gt-md=\"25\"\\n    fxFlex.md=\"33\"\\n    fxFlex.lt-md=\"50\"\\n    fxFlex.lt-sm=\"100\"\\n    *ngFor=\"let sets of dataSets\"\\n  >\\n    <mat-card class=\"datasets-card\">\\n      <mat-card-header class=\"{{ sets?.asOfNow?.status }}\">\\n        <div\\n          class=\"status-icon\"\\n          matTooltip=\"{{ sets?.asOfNow?.status }}\"\\n          [ngSwitch]=\"sets?.asOfNow?.status\"\\n        >\\n          <mat-icon\\n            *ngSwitchCase=\"\\'FAILED\\'\"\\n            style=\"color: #AB0E27;\"\\n            fontIcon=\"icon-warning\"\\n          ></mat-icon>\\n          <mat-icon\\n            *ngSwitchCase=\"\\'SUCCESS\\'\"\\n            fontIcon=\"icon-exchange\"\\n          ></mat-icon>\\n          <mat-icon *ngSwitchCase=\"\\'INIT\\'\" fontIcon=\"icon-wip\"></mat-icon>\\n        </div>\\n        <a\\n          class=\"dataset-name\"\\n          e2e=\"data-set-card\"\\n          (click)=\"viewDetails(sets)\"\\n          fxFlex\\n          [innerHTML]=\"sets.system.name | highlight: searchTerm\"\\n        ></a>\\n        <dataset-actions [dsMetadata]=\"sets\"></dataset-actions>\\n      </mat-card-header>\\n      <mat-divider></mat-divider>\\n      <mat-card-content class=\"mat-body-1\">\\n        <div class=\"margin-btm-9\" fxLayout=\"row wrap\">\\n          <div fxFlex=\"70\" class=\"mat-body-1\">\\n            Data Pods: <span [innerHTML]=\"sets?.dataPods?.numberOfPods\"></span>\\n          </div>\\n          <div class=\"mat-caption\" fxLayoutAlign=\"end end\" fxFlex=\"30\">\\n            Size: {{ sets.size }}\\n          </div>\\n        </div>\\n        <div class=\"descr margin-btm-9\">\\n          Description:\\n          <span\\n            [innerHTML]=\"sets?.system?.description | highlight: searchTerm\"\\n          ></span>\\n        </div>\\n        <div class=\"margin-btm-9\" fxLayout=\"row\">\\n          <div fxFlex=\"35\" fxLayout=\"column\" fxLayoutAlign=\"start start\">\\n            Added by:\\n            <span\\n              [innerHTML]=\"sets.system.createdBy | highlight: searchTerm\"\\n            ></span>\\n          </div>\\n          <div\\n            fxFlex=\"65\\n                    \"\\n            fxLayout=\"column\"\\n            fxLayoutAlign=\"center end\"\\n          >\\n            Last updated:\\n            <div fxLayout=\"row\" style=\"align-items: baseline;\">\\n              <span\\n                [innerHTML]=\"\\n                  sets.system.modifiedTime * 1000\\n                    | date: \\'short\\'\\n                    | highlight: searchTerm\\n                \"\\n              >\\n              </span>\\n            </div>\\n          </div>\\n        </div>\\n      </mat-card-content>\\n    </mat-card>\\n  </div>\\n  <div\\n    class=\"dataSets-view_no-results\"\\n    *ngIf=\"searchTerm && dataSets.length == 0\"\\n  >\\n    <span i18n>NO MATCHING RESULTS</span>\\n  </div>\\n</div>\\n'},KeS2:function(t,e){t.exports='<div class=\"container\">\\n    <div class=\"header\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"10px\">\\n        <button mat-button class=\"bck-btn\">\\n            <mat-icon fontIcon=\"icon-arrow-left\" (click)=\"backToDS()\"></mat-icon>\\n        </button>\\n        <div fxFlex>Update Datapod </div>\\n        <button mat-raised-button color=\"primary\" [disabled]=\"!isSelected\" (click)=\"updateSemantic()\">\\n            <span i18n>Update</span>\\n        </button>\\n    </div>\\n    <div class=\"body\" fxLayout=\"row\" fxLayoutAlign=\"center stretch\" fxLayoutGap=\"10px\">\\n        <mat-card fxFlex=\"25\" *ngIf=\"!dpID\">\\n            <mat-card-content>\\n                <dx-data-grid #dsGrid fxFlex [dataSource]=\"gridDataAvailableDP\" [rowAlternationEnabled]=\"true\" [height]=\"\\'100%\\'\" [width]=\"\\'100%\\'\"\\n                    keyExpr=\"id\" [showBorders]=\"false\" [showColumnLines]=\"false\" [hoverStateEnabled]=\"true\" (onSelectionChanged)=\"onDPSelectionChanged($event.currentSelectedRowKeys[0])\">\\n                    <dxo-selection mode=\"single\"></dxo-selection>\\n                    <dxi-column caption=\"Datapod Name\" dataField=\"metricName\"></dxi-column>\\n                    <dxi-column caption=\"Created By\" dataField=\"createdBy\"></dxi-column>\\n                    <dxi-column caption=\"Updated Time\" dataField=\"createdAt\" dataType=\"date\"></dxi-column>\\n                    <dxo-scrolling mode=\"virtual\" showScrollbar=\"always\" [useNative]=\"false\"></dxo-scrolling>\\n                    <dxo-filter-row [visible]=\"true\" [applyFilter]=\"auto\"></dxo-filter-row>\\n                </dx-data-grid>\\n            </mat-card-content>\\n        </mat-card>\\n        <mat-card fxFlex>\\n            <mat-card-content fxLayout=\"row\" fxLayoutAlign=\"center stretch\">\\n                <div class=\"results\" fxLayout=\"row\" fxLayoutAlign=\"center center\" *ngIf=\"!selectedDPData?.length\">\\n                    <span>Select Datapod from left pane to update</span>\\n                </div>\\n                <mat-tab-group *ngIf=\"selectedDPData?.length\" fxFlex>\\n                    <mat-tab *ngFor=\"let dp of selectedDPData; let index = index\" [label]=\"dp?.artifactName\">\\n                        <dx-data-grid #dsGrid [dataSource]=\"dp?.columns\" [showBorders]=\"true\" [height]=\"\\'100%\\'\" [width]=\"\\'100%\\'\" [rowAlternationEnabled]=\"true\"\\n                            [showColumnLines]=\"false\" style=\"position:absolute;top:0;bottom:0;left:0;bottom:0;\">\\n                            <dxo-editing mode=\"cell\" [allowUpdating]=\"true\">\\n                            </dxo-editing>\\n                            <dxi-column [width]=\"80\" caption=\"Include\" dataField=\"include\" dataType=\"boolean\"></dxi-column>\\n                            <dxi-column caption=\"Display Name\" dataField=\"displayName\">\\n                                <dxi-validation-rule type=\"required\"></dxi-validation-rule>\\n                                <dxi-validation-rule type=\"stringLength\" [max]=\"30\">\\n                                </dxi-validation-rule>\\n                            </dxi-column>\\n                            <dxi-column caption=\"Column Name\" [allowEditing]=\"false\" dataField=\"columnName\"></dxi-column>\\n                            <dxi-column [width]=\"150\" caption=\"Data Type\" [allowEditing]=\"false\" dataField=\"type\"></dxi-column>\\n                            <dxi-column [width]=\"100\" caption=\"Filter Eligible\" dataField=\"filterEligible\" dataType=\"boolean\"></dxi-column>\\n                            <dxi-column [width]=\"80\" caption=\"KPI Eligible\" dataField=\"kpiEligible\" dataType=\"boolean\"></dxi-column>\\n                            <dxi-column [width]=\"80\" *ngIf=\"isJoinEligible\" caption=\"Join Eligible\" dataField=\"joinEligible\" dataType=\"boolean\"></dxi-column>\\n                            <dxo-scrolling mode=\"virtual\" showScrollbar=\"always\" [useNative]=\"false\"></dxo-scrolling>\\n                            <dxo-filter-row [visible]=\"true\" [applyFilter]=\"auto\"></dxo-filter-row>\\n                            <dxo-header-filter [visible]=\"false\"></dxo-header-filter>\\n                        </dx-data-grid>\\n                    </mat-tab>\\n                </mat-tab-group>\\n            </mat-card-content>\\n        </mat-card>\\n    </div>\\n</div>'},\"L5/0\":function(t,e,n){var a=n(\"dt0z\");t.exports=function(t){return a(t).toLowerCase()}},LZA7:function(t,e){t.exports='<div class=\"grid-container\" fxFill>\\n  <dx-data-grid id=\"gridContainer\">\\n    <div *dxTemplate=\"let data of \\'nameCellTemplate\\'\">\\n      <a (click)=\"viewDetails(data.data)\" [innerHTML]=\"data.value | highlight: searchTerm\" e2e=\"data-set-grid-view-mode\"></a>\\n    </div>\\n    <div *dxTemplate=\"let data of \\'creatorCellTemplate\\'\">\\n      <span class=\"clickable\" [innerHTML]=\"data.value | highlight: searchTerm\"></span>\\n    </div>\\n    <div *dxTemplate=\"let data of \\'timecreatedCellTemplate\\'\">\\n      <span class=\"clickable\" [innerHTML]=\"data.value * 1000 | date: \\'short\\' | highlight: searchTerm\"></span>\\n    </div>\\n    <div *dxTemplate=\"let data of \\'actionsCellTemplate\\'\">\\n      <dataset-actions [dsMetadata]=\"data.data\"></dataset-actions>\\n    </div>\\n  </dx-data-grid>\\n</div>'},Nd39:function(t,e){t.exports='<mat-card class=\"preview-container\">\\n  <mat-card-content fxFill class=\"content-hgt\">\\n    <mat-tab-group fxFill dynamicHeight=\"false\" style=\"background-color: white;\">\\n      <mat-tab e2e=\"parsed-data-preview\" fxFill label=\"Parsed View\">\\n        <dx-data-grid *ngIf=\"!inspectError\" id=\"gridContainer\">\\n          <div *dxTemplate=\"let data of \\'headerTemplate\\'\">\\n            <div fxLayout=\"column\" class=\"fNameInp\">\\n              <mat-form-field>\\n                <input matInput [(ngModel)]=\"fieldInfo[data.columnIndex].name\" class=\"fieldName\" type=\"text\" required />\\n              </mat-form-field>\\n              <div fxLayout=\"row\" class=\"fTypeGroup\">\\n                <div fxFlex>\\n                  <select (change)=\"checkDate($event)\" id=\"{{ data.columnIndex }}\" class=\"fieldType\" [(ngModel)]=\"fieldInfo[data.columnIndex].type\">\\n                    <option value=\"string\">STRING</option>\\n                    <option value=\"long\">LONG</option>\\n                    <option value=\"date\">DATE</option>\\n                    <option value=\"boolean\">BOOLEAN</option>\\n                    <option value=\"double\">DOUBLE</option>\\n                  </select>\\n                  <mat-icon fontIcon=\"icon-edit-solid\" class=\"formatEditIcon\" id=\"edit_{{ data.columnIndex }}\" (click)=\"openDateFormatDialog($event)\"\\n                    [style.visibility]=\"fieldInfo[data.columnIndex].type === \\'date\\' ? \\'visible\\' : \\'hidden\\'\"></mat-icon>\\n                </div>\\n                <mat-icon fontIcon=\"icon-info-solid\" class=\"errorInfoIcon\" *ngIf=\"fieldInfo[data.columnIndex].format?.length > 1\"></mat-icon>\\n              </div>\\n            </div>\\n          </div>\\n        </dx-data-grid>\\n        <div *ngIf=\"inspectError\" fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\\n          <div fxFlex=\"75\" class=\"alert is-important\">\\n            <h4>Please validate entered details!</h4>\\n            <p>{{errMsg}}</p>\\n          </div>\\n        </div>\\n      </mat-tab>\\n      <mat-tab e2e=\"raw-data-preview\" fxFill label=\"Raw Preview\">\\n        <div class=\"raw-content\">\\n          <div *ngFor=\"let line of rawFile\">\\n            <span [textContent]=\"line\"></span>\\n          </div>\\n        </div>\\n      </mat-tab>\\n    </mat-tab-group>\\n  </mat-card-content>\\n</mat-card>\\n'},NwPg:function(t,e){t.exports=\".triggerbtn {\\n  height: 20px;\\n  line-height: 20px;\\n  font-size: 20px; }\\n\"},PduJ:function(t,e){t.exports=\":host {\\n  width: 100%; }\\n\\nmat-tab-group {\\n  max-width: 100%; }\\n\\n.fieldType {\\n  border-color: #C4C4C4;\\n  border-radius: 3px;\\n  font-size: 11px;\\n  color: rgba(0, 0, 0, 0.69); }\\n\\n::ng-deep .mat-tab-label-active {\\n  color: #0077be; }\\n\\n.formatEditIcon {\\n  font-size: 18px;\\n  padding-top: 7px; }\\n\\n.fTypeGroup {\\n  margin-top: -17px;\\n  padding-bottom: 0.3px;\\n  z-index: 99; }\\n\\n.mat-form-field-infix {\\n  padding: 0 !important; }\\n\\n.errorInfoIcon {\\n  font-size: 22px;\\n  padding-top: 2px;\\n  color: #ab0e27; }\\n\\n.preview-container {\\n  height: calc(100% - 47px);\\n  padding: 0 3px; }\\n\\n.raw-content {\\n  padding: 20px;\\n  font-size: 14px; }\\n\\n.content-hgt {\\n  height: 99% !important; }\\n\\n.alert {\\n  padding: 16px;\\n  margin: 24px 0;\\n  font-size: 14px;\\n  color: #333;\\n  width: 100%;\\n  box-sizing: border-box; }\\n\\n.is-important {\\n  border-left: 10px solid #ab0e27;\\n  background-color: #E5524C08; }\\n\"},R35o:function(t,e){t.exports='<h1 mat-dialog-title>Are you sure to delete ?</h1>\\n<mat-divider></mat-divider>\\n<div mat-dialog-content>\\n  <div fxLayout=\"column\">\\n    <div class=\"details-content\" fxFlex=\"50\" fxLayout=\"row\">\\n      <span class=\"prop-name\" e2e=\"delete-title\" i18n>{{ data?.typeTitle }} : </span>\\n      <span>{{ data?.typeName }}</span>\\n    </div>\\n    <p *ngIf=\"!data.routesNr\" class=\"mat-caption\" e2e=\"delete-route-warn-msg\" i18n>\\n      This action deletes the above permanently and cannot be un-done.\\n    </p>\\n    <p *ngIf=\"data.routesNr > 0\" class=\"mat-caption\" e2e=\"delete-channel-warn-msg\" i18n>\\n      This channel has {{data.routesNr}} routes and cannot be deleted. Delete the routes first!\\n    </p>\\n  </div>\\n</div>\\n<div mat-dialog-actions>\\n  <button mat-raised-button color=\"primary\" e2e=\"delete-no\" (click)=\"onNoClick()\">No</button>\\n  <div fxFlex></div>\\n  <button e2e=\"delete-yes\" [disabled]=\"data.routesNr > 0\" mat-raised-button color=\"warn\" (click)=\"onYesClick()\" cdkFocusInitial>\\n    Yes\\n  </button>\\n</div>\\n'},RC7d:function(t,e){t.exports='<div class=\"dataPods-cardView\" fxLayout=\"row wrap\">\\n  <div class=\"dp-card\" fxFlex.gt-md=\"25\" fxFlex.md=\"33\" fxFlex.lt-md=\"50\" fxFlex.lt-sm=\"100\" *ngFor=\"let pod of dataPods\">\\n    <mat-card class=\"dataPods-card\">\\n      <mat-card-header class=\"SUCCESS\">\\n\\n        \\x3c!-- There is no state for Datapods as of now since they are still logical entities. \\n          Once they are physical the below switch case will reflect real value --\\x3e\\n\\n        <div class=\"status-icon\" matTooltip=\"{{pod?.status}}\" ngSwitch=\"SUCCESS\">\\n          <mat-icon *ngSwitchCase=\"\\'FAILED\\'\" style=\"color: #AB0E27;\" fontIcon=\"icon-warning\"></mat-icon>\\n          <mat-icon *ngSwitchCase=\"\\'SUCCESS\\'\" fontIcon=\"icon-portal-libraries\"></mat-icon>\\n          <mat-icon *ngSwitchCase=\"\\'INIT\\'\" fontIcon=\"icon-wip\"></mat-icon>\\n        </div>\\n        <a class=\"datapod-name\" (click)=\"viewDetails(pod)\" fxFlex [innerHTML]=\"pod.metricName | highlight: searchTerm\"></a>\\n        <datapod-actions [dpMetadata]=\"pod\"></datapod-actions>\\n      </mat-card-header>\\n      <mat-divider></mat-divider>\\n      <mat-card-content class=\"mat-body-1\">\\n        <div class=\"margin-btm-9\" fxLayout=\"row wrap\">\\n          <div fxFlex=\"70\" class=\"mat-body-1\">Data Pods:\\n            <span [innerHTML]=\"pod?.dataPods?.numberOfPods\"></span>\\n          </div>\\n          <div class=\"mat-caption\" fxLayoutAlign=\"end end\" fxFlex=\"30\">Size: </div>\\n        </div>\\n        <div class=\"descr margin-btm-9\">\\n          Description:\\n          <span [innerHTML]=\"pod?.description | highlight: searchTerm\"></span>\\n        </div>\\n        <div class=\"margin-btm-9\" fxLayout=\"row\">\\n          <div fxFlex=\"35\" fxLayout=\"column\" fxLayoutAlign=\"start start\">Created by:\\n            <span [innerHTML]=\"pod?.createdBy | highlight: searchTerm\"></span>\\n          </div>\\n          <div fxFlex=\"65\\n                    \" fxLayout=\"column\" fxLayoutAlign=\"center end\">Last updated:\\n            <div fxLayout=\"row\" style=\"align-items: baseline;\">\\n              <span [innerHTML]=\"pod?.modifiedTime * 1000 | date: \\'short\\' | highlight: searchTerm\"> </span>\\n            </div>\\n          </div>\\n        </div>\\n      </mat-card-content>\\n    </mat-card>\\n  </div>\\n  <div class=\"dataPods-view_no-results\" *ngIf=\"searchTerm && dataPods.length== 0\">\\n    <span i18n>NO MATCHING RESULTS</span>\\n  </div>\\n</div>'},THpB:function(t,e){t.exports=\".triggerbtn {\\n  height: 20px;\\n  line-height: 20px;\\n  font-size: 20px; }\\n\"},USSH:function(t,e){t.exports=\":host {\\n  width: 100%; }\\n\\n.executor-container {\\n  width: 100%;\\n  height: calc(100% - 10px);\\n  padding: 3px;\\n  background-color: #f5f9fc; }\\n\\n.executor-container .ds-name {\\n    font-size: 16px;\\n    padding-left: 5%; }\\n\\n.executor-container .bck-btn {\\n    min-width: 50px;\\n    height: 32px; }\\n\\n.executor-container .details-grid {\\n    padding: 3px; }\\n\\n.executor-container .action-title {\\n    color: #0077be;\\n    font-size: 18px; }\\n\\n.executor-container .action-title mat-icon {\\n      vertical-align: middle; }\\n\\n.executor-container .gridContainer {\\n    border-right: 3px #f5f9fc solid;\\n    padding-top: 3px; }\\n\\n.executor-container .exec-body {\\n    height: calc(100% - 50px);\\n    max-height: calc(100% - 50px); }\\n\\n.executor-container .script-pane {\\n    overflow: auto; }\\n\\n.executor-container .fields-pane {\\n    background-color: #FFF; }\\n\\n.executor-container .preview-pane {\\n    overflow: auto; }\\n\\n.executor-container .exec-btn-icon {\\n    font-size: 24px; }\\n\\n.executor-container .list-items {\\n    background-color: white;\\n    border-radius: 0 3px 3px;\\n    border: #0077be 0.5px dotted; }\\n\\n.executor-container .list-items:hover {\\n      box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12) !important;\\n      cursor: pointer; }\\n\\n.executor-container .btn-icon {\\n    color: #0077be; }\\n\\n.executor-container .btn-icon .mat-button {\\n      vertical-align: middle;\\n      line-height: 32px !important;\\n      height: 32px !important;\\n      border-radius: 2px;\\n      background-color: white;\\n      border: solid 1px #0077be; }\\n\\n.executor-container .btn-icon .mat-button .mat-button-wrapper > * {\\n      vertical-align: initial; }\\n\\n.executor-container .create-btn > .mat-raised-button {\\n    line-height: 32px !important; }\\n\\n.executor-container .title-elem {\\n    color: rgba(0, 0, 0, 0.54);\\n    background: rgba(0, 0, 0, 0.03);\\n    padding: 8px 0;\\n    height: 50px;\\n    font-size: 18px;\\n    font-weight: 500;\\n    border: 2px solid white; }\\n\\n.executor-container .title-elem .mat-icon {\\n      font-size: 20px; }\\n\\n.executor-container .title-elem .mat-chip {\\n      color: rgba(0, 0, 0, 0.54);\\n      font-size: 16px; }\\n\\n.executor-container .title-elem .status-icon {\\n      width: 36px; }\\n\\n.executor-container .title-elem .status-icon .mat-icon {\\n        font-size: 24px;\\n        vertical-align: middle; }\\n\"},X4Nr:function(t,e){t.exports='<div class=\"select-view\" fxLayout=\"row\" fxLayoutGap=\"9px\">\\n  <mat-card class=\"margin-9\" style=\"padding:0px;\" fxFlex=\"75\" fxFlex.gt-md=\"75\" fxFlex.md=\"75\">\\n    <mat-card-header class=\"headerGradient\">\\n      <div class=\"mat-body-1\" i18n>Staging Area</div>\\n\\n      <span class=\"toolbar-spacer\"></span>\\n      <button for=\"fileUpload\" i18n-matTooltip matTooltip=\"Upload File\" e2e=\"upload-selected-file\" mat-icon-button color=\"primary\" (click)=\"fileUpload.click()\">\\n        <mat-icon fontIcon=\"icon-upload\"></mat-icon>\\n      </button>\\n      <input fxHide e2e=\"uploaded-file\" type=\"file\" #fileUpload (change)=\"fileInput($event)\" multiple accept=\"text/csv, \\'text/plain\\'\" />\\n    </mat-card-header>\\n    <mat-divider></mat-divider>\\n    <mat-card-content class=\"staging-content\">\\n      <div fxLayout=\"row\" [style.height.%]=\"100\">\\n        <div class=\"tree\" fxFlex=\"30\">\\n          <remote-folder-selector (selectionChange)=\"onFolderSelected($event)\"\\n                                  [fileSystemAPI]=\"fileSystemAPI\"\\n                                  [enableFolderCreation]=\"true\"\\n                                  [rootNode]=\"treeNodes\"\\n          >\\n          </remote-folder-selector>\\n        </div>\\n        <div fxFlex=\"70\" fxFill fxLayout=\"column\">\\n          <mat-form-field id=\"infoForMask\">\\n            <input matInput autocomplete=\"off\" i18n placeholder=\"Enter file mask\" [formControl]=\"fileMaskControl\" required />\\n            <mat-icon matSuffix fontIcon=\"icon-info\" matTooltip=\"File mask to select Files (e.g: *.csv, user*.csv...)\"></mat-icon>\\n          </mat-form-field>\\n          <div class=\"gridContainer\" e2e=\"grid-container\">\\n            <dx-data-grid id=\"gridContainer\">\\n              <div *dxTemplate=\"let data of \\'dobjTemplate\\'\">\\n                <div fxLayout=\"row\">\\n                  <mat-icon class=\"file-icon\" fontIcon=\"icon-file-solid\"></mat-icon>\\n                  <div>{{data.value}}</div>\\n                </div>\\n              </div>\\n              <div *dxTemplate=\"let data of \\'sizeTemplate\\'\">\\n                <span [innerHTML]=\"data.value\"></span>\\n              </div>\\n              <div *dxTemplate=\"let data of \\'dateTemplate\\'\">\\n                <span [innerHTML]=\"data.value | date : \\'short\\'\"></span>\\n              </div>\\n              <div *dxTemplate=\"let data of \\'actionsTemplate\\'\">\\n                <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\\n                  <span e2e=\"preview-file\" class=\"preview-icon\" matTooltip=\"Preview File\" (click)=\"previewDialog(data.value)\">\\n                    <mat-icon fontIcon=\"icon-show\"></mat-icon>\\n                  </span>\\n                </div>\\n              </div>\\n            </dx-data-grid>\\n          </div>\\n        </div>\\n      </div>\\n    </mat-card-content>\\n  </mat-card>\\n\\n  <mat-card class=\"margin-9 selectCard\" fxFlex=\"25\" fxFlex.gt-md=\"25\" fxFlex.md=\"25\">\\n    <mat-card-header class=\"headerGradient\">\\n      <div class=\"mat-body-1\" i18n>Selected Files</div>\\n      <span class=\"toolbar-spacer\"></span>\\n      <button mat-icon-button matTooltip=\"Clear All Selected\" color=\"warn\" (click)=\"clearSelected()\">\\n        <mat-icon fontIcon=\"icon-clear-all\"></mat-icon>\\n      </button>\\n    </mat-card-header>\\n    <mat-divider></mat-divider>\\n    <mat-card-content class=\"selected-files\">\\n      <mat-list role=\"list\" class=\"selected-files\">\\n        <mat-list-item class=\"whiteFrame\" role=\"listitem\" *ngFor=\"let file of selFiles; index as i\">\\n          <div class=\"mat-body-2\">{{i + 1}}. &ensp; {{ file.name }}</div>\\n        </mat-list-item>\\n      </mat-list>\\n      <div class=\"results\" fxLayout=\"row\" fxLayoutAlign=\"center center\" *ngIf=\"!fileMask && !selFiles.length\">\\n        <span>Use Mask to select files</span>\\n      </div>\\n      <div class=\"results\" fxLayout=\"row\" fxLayoutAlign=\"center center\" *ngIf=\"fileMask && !selFiles.length\">\\n        <span>NO MATCHING RESULTS</span>\\n      </div>\\n    </mat-card-content>\\n  </mat-card>\\n\\n</div>\\n'},XaOl:function(t,e){t.exports='<div class=\"container\" (window:resize)=\"onResize($event)\">\\n  <div\\n    class=\"header\"\\n    fxLayout=\"row\"\\n    fxLayoutAlign=\"center center\"\\n    fxLayoutGap=\"10px\"\\n  >\\n    <button mat-button class=\"bck-btn\">\\n      <mat-icon fontIcon=\"icon-arrow-left\" (click)=\"backToDS()\"></mat-icon>\\n    </button>\\n    <div fxFlex>Create Datapod</div>\\n    <span fxFlex>Select Dataset/s to Create</span>\\n    \\x3c!-- Commenting out creation of multiple Artifacts as there is issue with report. --\\x3e\\n\\n    \\x3c!-- <mat-slide-toggle\\n      (change)=\"joinEligibleToggled()\"\\n      [checked]=\"joinToggleValue\"\\n      [(ngModel)]=\"joinToggleValue\"\\n      labelPosition=\"before\"\\n    >\\n      Show Join Eligible\\n    </mat-slide-toggle> --\\x3e\\n    <button\\n      mat-raised-button\\n      color=\"primary\"\\n      [disabled]=\"!isSelected\"\\n      (click)=\"gotoValidate()\"\\n    >\\n      <span i18n>VALIDATE</span>\\n    </button>\\n  </div>\\n  <div\\n    class=\"body\"\\n    fxLayout=\"row\"\\n    fxLayoutAlign=\"center stretch\"\\n    fxLayoutGap=\"10px\"\\n  >\\n    <mat-card fxFlex=\"25\">\\n      <mat-card-content style=\"overflow:hidden;\">\\n        <dx-data-grid\\n          #dsGrid\\n          fxFlex\\n          [dataSource]=\"gridDataAvailableDS\"\\n          [rowAlternationEnabled]=\"true\"\\n          [height]=\"contentHeight\"\\n          [width]=\"\\'100%\\'\"\\n          [showBorders]=\"false\"\\n          [showColumnLines]=\"false\"\\n          [hoverStateEnabled]=\"true\"\\n          (onSelectionChanged)=\"onDSSelectionChanged($event)\"\\n        >\\n          <dxo-selection\\n            selectAllMode=\"allMode\"\\n            showCheckBoxesMode=\"always\"\\n            [mode]=\"selectionMode\"\\n          ></dxo-selection>\\n          <dxi-column\\n            caption=\"Dataset Name\"\\n            dataField=\"system.name\"\\n          ></dxi-column>\\n          <dxi-column\\n            caption=\"Created By\"\\n            dataField=\"system.createdBy\"\\n          ></dxi-column>\\n          <dxi-column\\n            caption=\"Updated Time\"\\n            dataField=\"system.modifiedTime\"\\n            dataType=\"date\"\\n            cellTemplate=\"timeTemplate\"\\n          ></dxi-column>\\n          <dxo-scrolling\\n            mode=\"virtual\"\\n            showScrollbar=\"always\"\\n            [useNative]=\"false\"\\n          ></dxo-scrolling>\\n          <dxo-filter-row [visible]=\"true\" applyFilter=\"auto\"></dxo-filter-row>\\n          <div *dxTemplate=\"let data of \\'timeTemplate\\'\">\\n            <span> {{ data.value * 1000 | date: \\'short\\' }}</span>\\n          </div>\\n        </dx-data-grid>\\n      </mat-card-content>\\n    </mat-card>\\n    <mat-card fxFlex=\"75\">\\n      <mat-card-content fxLayout=\"row\" fxLayoutAlign=\"center stretch\">\\n        <div\\n          class=\"results\"\\n          fxLayout=\"row\"\\n          fxLayoutAlign=\"center center\"\\n          *ngIf=\"!selectedDSData?.length\"\\n        >\\n          <span>Select Dataset/s from left pane to view schema</span>\\n        </div>\\n        <mat-tab-group\\n          fxFlex\\n          *ngIf=\"selectedDSData.length\"\\n          dynamicHeight=\"false\"\\n          [selectedIndex]=\"selectedDSData?.length\"\\n        >\\n          <mat-tab\\n            *ngFor=\"let ds of selectedDSData; let index = index\"\\n            [label]=\"ds?.system?.name\"\\n          >\\n            <dx-data-grid\\n              [dataSource]=\"ds.schema?.fields\"\\n              [showBorders]=\"true\"\\n              [height]=\"\\'100%\\'\"\\n              [width]=\"\\'100%\\'\"\\n              [rowAlternationEnabled]=\"true\"\\n              [showColumnLines]=\"false\"\\n              style=\"position:absolute;top:0;bottom:0;left:0;bottom:0;\"\\n            >\\n              <dxi-column\\n                caption=\"No\"\\n                [width]=\"50\"\\n                cellTemplate=\"NoTemplate\"\\n              ></dxi-column>\\n              <dxi-column caption=\"Field Name\" dataField=\"name\"></dxi-column>\\n              <dxi-column caption=\"Data Type\" dataField=\"type\"></dxi-column>\\n              <dxo-scrolling\\n                mode=\"virtual\"\\n                showScrollbar=\"always\"\\n                [useNative]=\"false\"\\n              ></dxo-scrolling>\\n              <dxo-filter-row\\n                [visible]=\"true\"\\n                applyFilter=\"auto\"\\n              ></dxo-filter-row>\\n              <dxo-header-filter [visible]=\"false\"></dxo-header-filter>\\n              <div *dxTemplate=\"let data of \\'NoTemplate\\'\">\\n                <span> {{ data.rowIndex + 1 }}</span>\\n              </div>\\n            </dx-data-grid>\\n          </mat-tab>\\n        </mat-tab-group>\\n      </mat-card-content>\\n    </mat-card>\\n  </div>\\n</div>\\n'},XpIw:function(t,e){t.exports='<div class=\"grid-container\" fxFill>\\n  <dx-data-grid #dsGrid fxFlex [dataSource]=\"gridData\" [rowAlternationEnabled]=\"true\" [height]=\"\\'100%\\'\" [width]=\"\\'100%\\'\"\\n    keyExpr=\"id\" [showBorders]=\"false\" [showColumnLines]=\"false\" [hoverStateEnabled]=\"true\">\\n    <dxo-selection mode=\"single\"></dxo-selection>\\n    <dxi-column caption=\"Datapod Name\" dataField=\"metricName\" cellTemplate=\"nameTemplate\"></dxi-column>\\n    <dxi-column caption=\"Created By\" dataField=\"createdBy\" cellTemplate=\"cellTemplate\"></dxi-column>\\n    <dxi-column caption=\"Updated Time\" dataField=\"modifiedTime\" dataType=\"date\" cellTemplate=\"dateTemplate\"></dxi-column>\\n    <dxi-column caption=\"Actions\" dataField=\"id\" cellTemplate=\"actionsTemplate\" [allowFiltering]=\"false\" [allowSorting]=\"false\"></dxi-column>\\n    <div *dxTemplate=\"let data of \\'nameTemplate\\'\">\\n      <a (click)=\"viewDetails(data.data)\" [innerHTML]=\"data.value | highlight: searchTerm\"></a>\\n    </div>\\n    <div *dxTemplate=\"let data of \\'cellTemplate\\'\">\\n      <span [innerHTML]=\"data.value | highlight: searchTerm\"></span>\\n    </div>\\n    <div *dxTemplate=\"let data of \\'dateTemplate\\'\">\\n      <span [innerHTML]=\"data.value * 1000 | date: \\'short\\' | highlight: searchTerm\"></span>\\n    </div>\\n    <div *dxTemplate=\"let data of \\'actionsTemplate\\'\">\\n      <datapod-actions [dpMetadata]=\"pod\"></datapod-actions>\\n    </div>\\n    <dxo-scrolling mode=\"virtual\" showScrollbar=\"always\" [useNative]=\"false\"></dxo-scrolling>\\n  </dx-data-grid>\\n</div>'},ZwXf:function(t,e){t.exports='<div mat-dialog-title>\\n  <span [textContent]=\"title\"></span>\\n  <span fxFlex></span>\\n  <button e2e=\"close-raw-preview-dialog-icon\" mat-icon-button mat-dialog-close class=\"xBtn\">\\n    <mat-icon style=\"color: #E5524C;\" fontIcon=\"icon-close\"></mat-icon>\\n  </button>\\n</div>\\n<div mat-dialog-content style=\"background-color: #F5F9FC; min-height:450px;\">\\n  \\x3c!-- <span [textContent]=\"message\"></span> --\\x3e\\n  <div *ngFor=\"let line of message\">\\n    <span [textContent]=\"line\"></span>\\n  </div>\\n</div>\\n<div mat-dialog-actions style=\"flex-direction: row-reverse\">\\n  <button e2e=\"close-raw-preview-dialog-button\" style=\"color: #E5524C;\" mat-button mat-raised-button (click)=\"closeDashboard()\">\\n    Close\\n  </button>\\n</div>\\n'},aiEQ:function(t,e){t.exports=\":host {\\n  width: 100%; }\\n\\n.container {\\n  width: 100%;\\n  height: 100%;\\n  background-color: #f5f9fc;\\n  overflow: auto; }\\n\\n.container .header {\\n    color: rgba(0, 0, 0, 0.54);\\n    background: rgba(0, 0, 0, 0.03);\\n    padding: 8px 0;\\n    height: 50px;\\n    font-size: 18px;\\n    font-weight: 700;\\n    border: 2px solid white; }\\n\\n.container .header .mat-icon {\\n      font-size: 26px; }\\n\\n.container .header > span {\\n      font-size: 14px;\\n      font-weight: normal; }\\n\\n.container .body {\\n    background-color: white;\\n    height: calc(100% - 54px);\\n    max-height: calc(100% - 54px) !important; }\\n\\n.container .body mat-card {\\n      padding: 0;\\n      height: 100%; }\\n\\n.container .body mat-card .mat-card-content {\\n        height: 100%;\\n        max-height: 100%;\\n        overflow: auto; }\\n\\n.container .body mat-card .mat-card-content .mat-tab-group {\\n          height: 100% !important;\\n          max-height: 100% !important;\\n          overflow: auto; }\\n\\n.container .body mat-card .mat-card-content ::ng-deep .mat-tab-label-active {\\n          color: #0077be; }\\n\\n.container .body mat-card .mat-card-content ::ng-deep .mat-tab-body-wrapper {\\n          height: 100%; }\\n\\n.container .body mat-card .mat-card-content ::ng-deep .mat-tab-body-wrapper .mat-tab-body {\\n            overflow: hidden !important; }\\n\\n.container .body mat-card .mat-card-content ::ng-deep .mat-tab-body-wrapper .mat-tab-body .mat-tab-body-content {\\n              overflow: hidden !important; }\\n\\n.container .body mat-card .mat-card-content .results {\\n          width: 100%;\\n          height: 100%;\\n          color: #bdbdbd;\\n          text-align: center; }\\n\\n.container .body mat-card .mat-card-content .results span {\\n            font-size: 28px;\\n            word-break: break-word; }\\n\\n.container .body mat-card .mat-card-content .dx-datagrid-content .dx-datagrid-table .dx-row .dx-command-select {\\n          padding: 0;\\n          width: 40px;\\n          min-width: 40px; }\\n\"},axgg:function(t,e){t.exports=\":host {\\n  width: 100%;\\n  height: 100%;\\n  overflow: hidden; }\\n\\n.branded-column-name {\\n  color: #0077be;\\n  font-weight: 600; }\\n\\n.grid-container {\\n  overflow: hidden;\\n  display: block; }\\n\\n.FAILED {\\n  border-left: 3px solid #ab0e27; }\\n\\n.SUCCESS {\\n  border-left: 3px solid #73b421; }\\n\\n.INIT {\\n  border-left: 3px solid #f07601; }\\n\"},\"b/9+\":function(t,e){t.exports=\":host {\\n  width: 100%;\\n  height: 100%;\\n  display: flex;\\n  flex-direction: column; }\\n\\nmat-icon {\\n  vertical-align: text-bottom !important; }\\n\\nmat-dialog-content {\\n  height: 100%;\\n  background-color: #f5f9fc;\\n  padding: 3px !important;\\n  margin: 0 !important;\\n  max-height: 100% !important; }\\n\\n::ng-deep .mat-horizontal-content-container {\\n  padding: 0 !important;\\n  height: calc(100% - 56px); }\\n\\n::ng-deep .mat-horizontal-stepper-header-container {\\n  background-color: #f5f9fc;\\n  height: 55px; }\\n\\n::ng-deep .mat-horizontal-stepper-content {\\n  height: 100%;\\n  padding: 1px; }\\n\\n::ng-deep .mat-stepper-horizontal {\\n  height: 100%;\\n  width: 100% !important;\\n  overflow: hidden; }\\n\\n.stepperBtn {\\n  margin-top: 3px;\\n  margin-right: 5px;\\n  font-size: 20px;\\n  width: 136px; }\\n\\n.stepperBtn .mat-icon {\\n    height: auto; }\\n\\n.Outline {\\n  color: #ab0e27; }\\n\\n.xBtn {\\n  color: #ab0e27; }\\n\\n.whiteFrame {\\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -1px rgba(0, 0, 0, 0.12);\\n  background-color: white; }\\n\\n.file-icon {\\n  color: #73b421; }\\n\\n.preview-icon {\\n  font-size: 18px;\\n  color: #0077be; }\\n\\n.mat-card {\\n  padding: 0 !important; }\\n\\n.margin20 {\\n  margin: 3px;\\n  width: 100%; }\\n\\n.input-section {\\n  display: flex;\\n  align-content: center;\\n  align-items: center;\\n  height: 9vh; }\\n\\n.headerGradient {\\n  padding: 8px 15px;\\n  background-color: white;\\n  border-top-left-radius: 3px;\\n  border-top-right-radius: 3px; }\\n\\n.headerText {\\n  margin: 9px !important;\\n  font-size: 16px !important; }\\n\\n.form-div {\\n  padding: 1% 9% 0; }\\n\\n.list-header {\\n  background-color: #0077be;\\n  font-size: 16px !important;\\n  border-radius: 12px 12px 0 0;\\n  color: white !important; }\\n\\n.list-items {\\n  background-color: white;\\n  border-radius: 0 3px 3px;\\n  border: #0077be 0.5px dotted; }\\n\\n.list-items:hover {\\n    box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12) !important;\\n    cursor: pointer; }\\n\\n.data-details {\\n  height: calc(100% - 50px); }\\n\\n.top-margin {\\n  margin-top: 3px; }\\n\\n.mat-horizontal-stepper-header {\\n  height: 55px; }\\n\"},\"be2+\":function(t,e){t.exports='<mat-card class=\"createsource-dialog\">\\n  <mat-card-header>\\n    <mat-card-title class=\"details-title mat-subheading-2\">{{\\n      dialogTitle\\n    }}</mat-card-title>\\n    <div fxFlex></div>\\n    <button mat-icon-button color=\"warn\" (click)=\"onCancelClick()\">\\n      <mat-icon fontIcon=\"icon-close\"></mat-icon>\\n    </button>\\n  </mat-card-header>\\n  <mat-divider></mat-divider>\\n  <mat-card-content e2e=\"data-source-panel\">\\n    <mat-horizontal-stepper linear [selectedIndex]=\"selectedStepIndex\">\\n      <ng-template matStepperIcon=\"edit\">\\n        <mat-icon fontIcon=\"icon-checkmark\"></mat-icon>\\n      </ng-template>\\n      <ng-template matStepperIcon=\"done\">\\n        <mat-icon fontIcon=\"icon-checkmark\"></mat-icon>\\n      </ng-template>\\n      <mat-step\\n        label=\"Select Channel Type\"\\n        [stepControl]=\"firstStep\"\\n        [editable]=\"isTypeEditable\"\\n      >\\n        <div\\n          fxFlex\\n          fxLayout=\"row\"\\n          fxLayoutAlign=\"center center\"\\n          class=\"source-container\"\\n        >\\n          <div\\n            fxFlex\\n            fxLayout=\"row wrap\"\\n            fxLayoutAlign=\"space-around space-around\"\\n            class=\"source-list\"\\n          >\\n            <mat-card\\n              class=\"mat-elevation-z3\"\\n              [class.selected]=\"selectedSource === source.uid\"\\n              *ngFor=\"let source of sources\"\\n              fxFlex=\"31\"\\n              fxLayout=\"row\"\\n              [attr.e2e]=\"source.name\"\\n              fxLayoutAlign=\"start center\"\\n              (click)=\"sourceSelected(source)\"\\n              [class.no-click]=\"source.supported === false\"\\n            >\\n              <div>{{ source.name }}</div>\\n              <div fxFlex></div>\\n              <img [src]=\"source.imgsrc\" [attr.alt]=\"source.name\" />\\n            </mat-card>\\n          </div>\\n        </div>\\n        <mat-divider></mat-divider>\\n        <div\\n          fxFlex\\n          fxLayout=\"row\"\\n          fxLayoutAlign=\"end center\"\\n          style=\"height: 15%;\"\\n        >\\n          <button\\n            mat-raised-button\\n            color=\"primary\"\\n            e2e=\"create-channel-next-button\"\\n            matStepperNext\\n            [disabled]=\"selectedSource === \\'\\'\"\\n            i18n\\n          >\\n            Next\\n          </button>\\n        </div>\\n      </mat-step>\\n      <mat-step label=\"Channel Details\">\\n        <form\\n          fxFlex\\n          fxLayout=\"row wrap\"\\n          class=\"source-container\"\\n          #sourceDetails\\n          novalidate\\n          [formGroup]=\"detailsFormGroup\"\\n          autocomplete=\"false\"\\n        >\\n          <section\\n            fxFlex=\"49\"\\n            fxLayout=\"column\"\\n            fxLayoutAlign=\"space-around center\"\\n          >\\n            <mat-form-field appearance=\"outline\">\\n              <mat-label i18n>Name Your Channel</mat-label>\\n              <input\\n                matInput\\n                name=\"name-of-channel\"\\n                e2e=\"name-of-channel\"\\n                formControlName=\"channelName\"\\n                maxlength=\"18\"\\n                required\\n                autocomplete=\"off\"\\n              />\\n              <mat-error\\n                *ngIf=\"\\n                  detailsFormGroup.controls.channelName.hasError(\\'required\\')\\n                \"\\n                i18n\\n              >\\n                Channel Name is\\n                <strong>required</strong>\\n              </mat-error>\\n              <mat-error\\n                e2e=\"channel-exist-error-msg\"\\n                *ngIf=\"\\n                  detailsFormGroup.controls.channelName.hasError(\\'isUnique\\')\\n                \"\\n                i18n\\n              >\\n                Channel Name already\\n                <strong>exists</strong>\\n              </mat-error>\\n            </mat-form-field>\\n            <mat-form-field appearance=\"outline\">\\n              <mat-label i18n>Hostname</mat-label>\\n              <input\\n                matInput\\n                placeholder=\"Host Name\"\\n                name=\"hostName\"\\n                e2e=\"host-name-input\"\\n                formControlName=\"hostName\"\\n                required\\n                name=\"name-of-host\"\\n                autocomplete=\"new-password\"\\n              />\\n              <mat-error\\n                *ngIf=\"detailsFormGroup.controls.hostName.hasError(\\'required\\')\"\\n                i18n\\n              >\\n                Host Name is\\n                <strong>required</strong>\\n              </mat-error>\\n            </mat-form-field>\\n            <mat-form-field appearance=\"outline\">\\n              <mat-label i18n>Port Number</mat-label>\\n              <input\\n                matInput\\n                placeholder=\"Port Number\"\\n                name=\"portNo\"\\n                e2e=\"port-no-input\"\\n                formControlName=\"portNo\"\\n                required\\n              />\\n              <mat-error\\n                *ngIf=\"detailsFormGroup.controls.portNo.hasError(\\'required\\')\"\\n                i18n\\n              >\\n                Port Number is\\n                <strong>required</strong>\\n              </mat-error>\\n              <mat-error\\n                e2e=\"port-number-error-msg\"\\n                *ngIf=\"detailsFormGroup.controls.portNo.hasError(\\'pattern\\')\"\\n                i18n\\n              >\\n                Port Number can consist of only\\n                <strong>Numbers</strong>\\n              </mat-error>\\n            </mat-form-field>\\n          </section>\\n          <mat-divider fxFlex=\"2\" [vertical]=\"true\"></mat-divider>\\n          <section\\n            fxFlex=\"49\"\\n            fxLayout=\"column\"\\n            fxLayoutAlign=\"space-around center\"\\n          >\\n            <mat-form-field appearance=\"outline\">\\n              <mat-label i18n>Access Type</mat-label>\\n              <mat-select formControlName=\"accessType\" e2e=\"access-type-select\">\\n                <mat-option value=\"R\" e2e=\"access-r\" i18n>Read</mat-option>\\n                <mat-option value=\"RW\" e2e=\"access-rw\" i18n\\n                  >Read & Write</mat-option\\n                >\\n              </mat-select>\\n            </mat-form-field>\\n            <mat-form-field appearance=\"outline\">\\n              <mat-label i18n>Username</mat-label>\\n              <input\\n                type=\"text\"\\n                matInput\\n                placeholder=\"Username\"\\n                name=\"name-of-user\"\\n                e2e=\"name-of-user-input\"\\n                autocomplete=\"new-password\"\\n                formControlName=\"userName\"\\n                required\\n              />\\n              <button mat-button matSuffix mat-icon-button>\\n                <mat-icon\\n                  matTooltip=\"Username\"\\n                  fontIcon=\"icon-chat-bot\"\\n                ></mat-icon>\\n              </button>\\n              <mat-error\\n                e2e=\"user-error-msg\"\\n                *ngIf=\"detailsFormGroup.controls.userName.hasError(\\'required\\')\"\\n                i18n\\n              >\\n                Username is\\n                <strong>required</strong>\\n              </mat-error>\\n            </mat-form-field>\\n            <mat-form-field appearance=\"outline\">\\n              <mat-label i18n>Password</mat-label>\\n              <input\\n                [type]=\"show ? \\'text\\' : \\'password\\'\"\\n                matInput\\n                placeholder=\"Password\"\\n                name=\"user-password\"\\n                e2e=\"user-password\"\\n                formControlName=\"password\"\\n                required\\n                autocomplete=\"new-password\"\\n              />\\n              <button\\n                matTooltip=\"Show Password\"\\n                e2e=\"show-password-sc\"\\n                *ngIf=\"!show\"\\n                mat-button\\n                matSuffix\\n                mat-icon-button\\n                aria-label=\"show\"\\n                (click)=\"togglePWD()\"\\n              >\\n                <mat-icon fontIcon=\"icon-show\"></mat-icon>\\n              </button>\\n              <button\\n                matTooltip=\"Hide Password\"\\n                e2e=\"hide-password-cs\"\\n                *ngIf=\"show\"\\n                mat-button\\n                matSuffix\\n                mat-icon-button\\n                aria-label=\"show\"\\n                (click)=\"togglePWD()\"\\n              >\\n                <mat-icon fontIcon=\"icon-hide\"></mat-icon>\\n              </button>\\n              <mat-error\\n                e2e=\"pwd-validation-msg\"\\n                *ngIf=\"detailsFormGroup.controls.password.hasError(\\'required\\')\"\\n                i18n\\n              >\\n                Password is\\n                <strong>required</strong>\\n              </mat-error>\\n            </mat-form-field>\\n          </section>\\n          <section fxFlex fxLayout=\"column\" fxLayoutAlign=\"center center\">\\n            <mat-form-field style=\"width: 90%;\" appearance=\"outline\">\\n              <mat-label i18n>Description about the source</mat-label>\\n              <textarea\\n                matInput\\n                formControlName=\"description\"\\n                e2e=\"channel-description-input\"\\n              ></textarea>\\n            </mat-form-field>\\n          </section>\\n        </form>\\n        <mat-divider></mat-divider>\\n        <div\\n          fxFlex\\n          fxLayout=\"row\"\\n          fxLayoutAlign=\"space-between center\"\\n          style=\"height: 20%;\"\\n        >\\n          <button\\n            mat-raised-button\\n            color=\"primary\"\\n            *ngIf=\"isTypeEditable\"\\n            matStepperPrevious\\n            e2e=\"channel-prev-btn\"\\n          >\\n            Previous\\n          </button>\\n          <button\\n            mat-stroked-button\\n            color=\"primary\"\\n            *ngIf=\"!isTypeEditable\"\\n            (click)=\"onCancelClick()\"\\n            color=\"warn\"\\n            e2e=\"channel-cancel-btn\"\\n            matStepperPrevious\\n          >\\n            Cancel\\n          </button>\\n          <button\\n            e2e=\"channel-test-connect-btn-model\"\\n            mat-stroked-button\\n            color=\"primary\"\\n            (click)=\"testChannel(detailsFormGroup.value)\"\\n            i18n\\n            [disabled]=\"!detailsFormGroup.valid\"\\n          >\\n            <mat-icon\\n              fontIcon=\"icon-query-mode\"\\n              style=\"vertical-align: bottom;\"\\n            ></mat-icon>\\n            Test Connectivity\\n          </button>\\n          <button\\n            e2e=\"channel-create-btn\"\\n            mat-raised-button\\n            *ngIf=\"opType === \\'create\\'\"\\n            color=\"primary\"\\n            type=\"submit\"\\n            [disabled]=\"!detailsFormGroup.valid\"\\n            (click)=\"createSource(detailsFormGroup.value)\"\\n            i18n\\n          >\\n            Create\\n          </button>\\n          <button\\n            e2e=\"channel-update-btn\"\\n            mat-raised-button\\n            *ngIf=\"opType === \\'update\\'\"\\n            color=\"primary\"\\n            type=\"submit\"\\n            [disabled]=\"!detailsFormGroup.valid\"\\n            (click)=\"createSource(detailsFormGroup.value)\"\\n            i18n\\n          >\\n            Update\\n          </button>\\n        </div>\\n      </mat-step>\\n    </mat-horizontal-stepper>\\n  </mat-card-content>\\n</mat-card>\\n'},dHzg:function(t,e){t.exports=\":host {\\n  width: 100%;\\n  max-width: 100% !important;\\n  height: 100%;\\n  max-height: 100%;\\n  overflow: auto;\\n  background-color: #f5f9fc; }\\n\\n.margin-btm-9 {\\n  margin-bottom: 9px !important; }\\n\\n.dx-freespace-row {\\n  height: 0 !important; }\\n\"},dMi0:function(t,e,n){var a=n(\"lyyl\"),o=n(\"JC6p\"),i=n(\"ut/Y\");t.exports=function(t,e){return a(t,i(e,3),o)}},dVtd:function(t,e){t.exports='<h1 mat-dialog-title i18n>Select fodler</h1>\\n<mat-divider></mat-divider>\\n<div mat-dialog-content style=\"height: 250px;\">\\n  <remote-folder-selector (selectionChange)=\"onFolderSelected($event)\"\\n                          [fileSystemAPI]=\"fileSystemAPI\"\\n                          [rootNode]=\"rootNode\"\\n  >\\n  </remote-folder-selector>\\n</div>\\n<div mat-dialog-actions>\\n  <button mat-raised-button i18n\\n          color=\"primary\"\\n          (click)=\"onNoClick()\"\\n  >\\n    Cancel\\n  </button>\\n  <div fxFlex></div>\\n  <button mat-raised-button cdkFocusInitial i18n\\n          color=\"warn\"\\n          (click)=\"onYesClick()\"\\n          [disabled]=\"!selectedPath\"\\n  >\\n    Select\\n  </button>\\n</div>\\n'},doIa:function(t,e){t.exports=\":host {\\n  width: 100%; }\\n\\n.data-details {\\n  padding: 3px;\\n  height: calc(100% - 47px);\\n  background-color: #f5f9fc; }\\n\\n.toolbar-spacer {\\n  flex: 1 1 auto; }\\n\\n.margin-9 {\\n  margin: 3px 3px 0 0;\\n  padding-bottom: 0; }\\n\\n.borderPrimary {\\n  border-top-color: #0077be;\\n  border-top-width: 1.6px; }\\n\\n.whiteFrame {\\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -1px rgba(0, 0, 0, 0.12);\\n  background-color: white; }\\n\\n.file-icon {\\n  color: #73b421; }\\n\\n.mat-card {\\n  padding: 0 !important; }\\n\\n.margin20 {\\n  margin: 3px;\\n  width: 100%; }\\n\\n.input-section {\\n  display: flex;\\n  align-content: center;\\n  align-items: center;\\n  height: 9vh; }\\n\\n.headerGradient {\\n  padding: 8px 15px;\\n  background-color: white;\\n  border-top-left-radius: 3px;\\n  border-top-right-radius: 3px; }\\n\\n.headerText {\\n  margin: 9px !important;\\n  font-size: 16px !important; }\\n\\n.form-div {\\n  padding: 3px 9% 0;\\n  height: calc(100% - 59px);\\n  overflow: auto; }\\n\\n.list-margin1 {\\n  height: 100%;\\n  overflow: auto; }\\n\\n.list-header {\\n  background-color: #0077be;\\n  font-size: 16px !important;\\n  border-radius: 12px 12px 0 0;\\n  color: white !important; }\\n\\n.list-items {\\n  background-color: white;\\n  border-radius: 0 3px 3px;\\n  border: #0077be 0.5px dotted; }\\n\\n.list-items:hover {\\n    box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12) !important;\\n    cursor: pointer; }\\n\\n.preview-icon {\\n  font-size: 18px;\\n  color: #0077be; }\\n\"},fl9l:function(t,e){t.exports='<mat-card class=\"createroute-dialog\">\\n  <mat-card-header>\\n    <mat-card-title class=\"details-title mat-subheading-2\">\\n      <span *ngIf=\"opType === \\'create\\'\" e2e=\"create-route-label\">\\n        Create route for\\n      </span>\\n      <span *ngIf=\"opType === \\'update\\'\" e2e=\"update-route-label\">\\n        Editing route for\\n      </span>\\n      <strong>{{ channelName }}</strong></mat-card-title\\n    >\\n    <div fxFlex></div>\\n    <button mat-icon-button color=\"warn\" (click)=\"onCancelClick()\">\\n      <mat-icon fontIcon=\"icon-close\"></mat-icon>\\n    </button>\\n  </mat-card-header>\\n  <mat-divider></mat-divider>\\n  <mat-card-content>\\n    <mat-horizontal-stepper linear>\\n      <ng-template matStepperIcon=\"edit\">\\n        <mat-icon fontIcon=\"icon-checkmark\"></mat-icon>\\n      </ng-template>\\n      <ng-template matStepperIcon=\"done\">\\n        <mat-icon fontIcon=\"icon-checkmark\"></mat-icon>\\n      </ng-template>\\n      <mat-step label=\"Route Details\" [stepControl]=\"detailsFormGroup\">\\n        <form\\n          fxFlex\\n          fxLayout=\"row wrap\"\\n          class=\"details-container\"\\n          #sourceDetails\\n          novalidate\\n          [formGroup]=\"detailsFormGroup\"\\n          autocomplete=\"false\"\\n        >\\n          <section\\n            fxFlex=\"49\"\\n            fxLayout=\"column\"\\n            fxLayoutAlign=\"space-around center\"\\n          >\\n            <mat-form-field appearance=\"outline\">\\n              <mat-label i18n>Route Name</mat-label>\\n              <input\\n                matInput\\n                name=\"routeName\"\\n                formControlName=\"routeName\"\\n                e2e=\"route-name-input\"\\n                required\\n              />\\n              <mat-error\\n                e2e=\"route-name-error\"\\n                *ngIf=\"detailsFormGroup.controls.routeName.hasError(\\'required\\')\"\\n                i18n\\n              >\\n                Route Name is <strong>required</strong>\\n              </mat-error>\\n              <mat-error\\n                e2e=\"route-name-exist\"\\n                *ngIf=\"detailsFormGroup.controls.routeName.hasError(\\'isUnique\\')\"\\n                i18n\\n              >\\n                Route Name already <strong>exists</strong>\\n              </mat-error>\\n            </mat-form-field>\\n            <mat-form-field appearance=\"outline\">\\n              <mat-label i18n>File Pattern</mat-label>\\n              <input\\n                matInput\\n                name=\"filePattern\"\\n                formControlName=\"filePattern\"\\n                e2e=\"route-file-pattern-input\"\\n                required\\n              />\\n              <mat-error\\n                e2e=\"route-file-pattern-error\"\\n                *ngIf=\"\\n                  detailsFormGroup.controls.filePattern.hasError(\\'required\\')\\n                \"\\n                i18n\\n              >\\n                File Pattern is <strong>required</strong>\\n              </mat-error>\\n              <mat-error\\n                e2e=\"route-file-pattern-invalid\"\\n                *ngIf=\"\\n                  detailsFormGroup.controls.filePattern.hasError(\\n                    \\'inValidPattern\\'\\n                  )\\n                \"\\n                i18n\\n              >\\n                File Pattern is invalid.\\n                <strong> Cannot have more than one pattern</strong>\\n              </mat-error>\\n            </mat-form-field>\\n\\n            <mat-form-field appearance=\"outline\">\\n              <mat-label i18n>Exclude Extension</mat-label>\\n              <input\\n                matInput\\n                type=\"text\"\\n                name=\"fileExclusions\"\\n                e2e=\"route-file-exclusions-input\"\\n                formControlName=\"fileExclusions\"\\n              />\\n              <mat-error\\n                e2e=\"route-file-exclusions-error\"\\n                *ngIf=\"\\n                  detailsFormGroup.controls.fileExclusions.hasError(\\n                    \\'inValidPattern\\'\\n                  )\\n                \"\\n                i18n\\n              >\\n                <strong>\\n                  Cannot have more than one extension or a \\' . \\' in extension\\n                  value</strong\\n                >\\n              </mat-error>\\n            </mat-form-field>\\n            <mat-checkbox\\n              style=\"margin: 20px 0 65px 0;\"\\n              e2e=\"route-disable-duplicate-ch\"\\n              formControlName=\"disableDuplicate\"\\n              i18n\\n            >\\n              Disable duplicate check\\n            </mat-checkbox>\\n          </section>\\n          <mat-divider fxFlex=\"2\" [vertical]=\"true\"></mat-divider>\\n          <section\\n            fxFlex=\"49\"\\n            fxLayout=\"column\"\\n            fxLayoutAlign=\"space-around center\"\\n          >\\n            <mat-form-field appearance=\"outline\">\\n              <mat-label i18n>Source Location</mat-label>\\n              <input\\n                matInput\\n                name=\"sourceLocation\"\\n                e2e=\"route-source-location-input\"\\n                formControlName=\"sourceLocation\"\\n                required\\n              />\\n              <mat-error\\n                e2e=\"route-source-error\"\\n                *ngIf=\"\\n                  detailsFormGroup.controls.sourceLocation.hasError(\\'required\\')\\n                \"\\n                i18n\\n              >\\n                Source Location is <strong>required</strong>\\n              </mat-error>\\n            </mat-form-field>\\n            <mat-form-field appearance=\"outline\">\\n              <mat-label i18n>Destination Location</mat-label>\\n              <input\\n                matInput\\n                name=\"destinationLocation\"\\n                e2e=\"route-dest-location-input\"\\n                formControlName=\"destinationLocation\"\\n                required\\n              />\\n              <button\\n                mat-button\\n                matSuffix\\n                mat-icon-button\\n                (click)=\"openSelectSourceFolderDialog()\"\\n              >\\n                <mat-icon\\n                  matTooltip=\"Browse\"\\n                  fontIcon=\"icon-folder-solid\"\\n                ></mat-icon>\\n              </button>\\n              <mat-error\\n                e2e=\"route-dest-location-error\"\\n                *ngIf=\"\\n                  detailsFormGroup.controls.destinationLocation.hasError(\\n                    \\'required\\'\\n                  )\\n                \"\\n                i18n\\n              >\\n                Destination Location is <strong>required</strong>\\n              </mat-error>\\n            </mat-form-field>\\n            <mat-form-field appearance=\"outline\">\\n              <mat-label i18n>Batch size</mat-label>\\n              <input\\n                matInput\\n                type=\"number\"\\n                e2e=\"route-batch-size-input\"\\n                name=\"batchSize\"\\n                formControlName=\"batchSize\"\\n                required\\n              />\\n              <mat-error\\n                e2e=\"route-batch-size-error\"\\n                *ngIf=\"detailsFormGroup.controls.batchSize.hasError(\\'required\\')\"\\n                i18n\\n              >\\n                Batch size is <strong>required</strong>\\n              </mat-error>\\n            </mat-form-field>\\n            <mat-form-field appearance=\"outline\">\\n              <mat-label i18n>Description about the route</mat-label>\\n              <textarea\\n                matInput\\n                formControlName=\"description\"\\n                e2e=\"route-description-input\"\\n              ></textarea>\\n            </mat-form-field>\\n          </section>\\n        </form>\\n        <mat-divider></mat-divider>\\n        <div\\n          fxFlex\\n          fxLayout=\"row\"\\n          fxLayoutAlign=\"space-between center\"\\n          style=\"height: 20%;\"\\n        >\\n          <button\\n            mat-stroked-button\\n            color=\"primary\"\\n            color=\"warn\"\\n            (click)=\"onCancelClick()\"\\n            e2e=\"route-cancel-btn\"\\n            i18n\\n          >\\n            Cancel\\n          </button>\\n          <button\\n            mat-stroked-button\\n            color=\"primary\"\\n            (click)=\"testRoute(detailsFormGroup.value)\"\\n            [disabled]=\"!detailsFormGroup.valid\"\\n            e2e=\"route-test-connectivity-btn\"\\n            i18n\\n          >\\n            <mat-icon\\n              fontIcon=\"icon-query-mode\"\\n              style=\"vertical-align: bottom;\"\\n            ></mat-icon>\\n            Test Connectivity\\n          </button>\\n          <button\\n            mat-raised-button\\n            color=\"primary\"\\n            e2e=\"route-next-btn\"\\n            matStepperNext\\n            [disabled]=\"!detailsFormGroup.valid\"\\n            i18n\\n          >\\n            Next\\n          </button>\\n        </div>\\n      </mat-step>\\n      <mat-step label=\"Schedule Route\">\\n        <div style=\"height: 80%;\">\\n          <cron-job-schedular\\n            [crondetails]=\"crondetails\"\\n            (onCronChanged)=\"onCronChanged($event)\"\\n          ></cron-job-schedular>\\n        </div>\\n        <span *ngIf=\"!startDateCorrectFlag\" class=\"errorTextMsg\" i18n\\n          >Start date cannot be in past. Please select a Date that is current or\\n          in future.</span\\n        >\\n        <mat-divider></mat-divider>\\n        <div\\n          fxFlex\\n          fxLayout=\"row\"\\n          fxLayoutAlign=\"space-between center\"\\n          style=\"height: 20%;\"\\n        >\\n          <button\\n            mat-raised-button\\n            color=\"primary\"\\n            e2e=\"route-schd-previous-btn\"\\n            matStepperPrevious\\n            i18n\\n          >\\n            Previous\\n          </button>\\n          <button\\n            mat-stroked-button\\n            color=\"primary\"\\n            (click)=\"testRoute(detailsFormGroup.value)\"\\n            [disabled]=\"!detailsFormGroup.valid\"\\n            e2e=\"route-schd-test-conn-btn\"\\n            i18n\\n          >\\n            <mat-icon\\n              fontIcon=\"icon-query-mode\"\\n              style=\"vertical-align: bottom;\"\\n            ></mat-icon>\\n            Test Connectivity\\n          </button>\\n          <button\\n            mat-raised-button\\n            color=\"primary\"\\n            *ngIf=\"opType === \\'create\\'\"\\n            [disabled]=\"!detailsFormGroup.valid || !isCronExpressionValid\"\\n            (click)=\"createRoute(detailsFormGroup.value)\"\\n            e2e=\"route-schd-create-btn\"\\n            i18n\\n          >\\n            Create\\n          </button>\\n          <button\\n            mat-raised-button\\n            color=\"primary\"\\n            e2e=\"route-schd-update-btn\"\\n            *ngIf=\"opType === \\'update\\'\"\\n            [disabled]=\"!detailsFormGroup.valid\"\\n            (click)=\"createRoute(detailsFormGroup.value)\"\\n            i18n\\n          >\\n            Update\\n          </button>\\n        </div>\\n      </mat-step>\\n    </mat-horizontal-stepper>\\n  </mat-card-content>\\n</mat-card>\\n'},gb7j:function(t,e,n){var a=n(\"g4R6\"),o=n(\"zoYe\"),i=n(\"Sxd8\"),r=n(\"dt0z\");t.exports=function(t,e,n){t=r(t),e=o(e);var s=t.length,l=n=void 0===n?s:a(i(n),0,s);return(n-=e.length)>=0&&t.slice(n,l)==e}},gh63:function(t,e){t.exports=\"<router-outlet></router-outlet>\\n\"},h20e:function(t,e){t.exports='<div class=\"dataSets-view\" fxLayout=\"column\" (window:resize)=\"onResize($event)\">\\n  <mat-toolbar class=\"toolbar-white\">\\n    <mat-toolbar-row>\\n      <div fxFlex=\"47\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"5px\" e2e=\"data-mode-group\" class=\"data-mode\">\\n        <mat-button-toggle-group [(ngModel)]=\"dataView\" [value]=\"dataView\" (change)=\"onDataObjectViewChange()\"\\n          #viewType=\"matButtonToggleGroup\">\\n          <mat-button-toggle e2e=\"data-sets-view\" value=\"sets\">\\n            <mat-icon fontIcon=\"icon-exchange\"></mat-icon>\\n            <span i18n>Data Sets</span>\\n          </mat-button-toggle>\\n          <mat-button-toggle e2e=\"data-pods-view\" value=\"pods\">\\n            <mat-icon fontIcon=\"icon-portal-libraries\"></mat-icon>\\n            <span i18n>Data Pods</span>\\n          </mat-button-toggle>\\n        </mat-button-toggle-group>\\n        <search-box placeholder=\"Search\" [value]=\"states.searchTerm\" (searchTermChange)=\"applySearchFilter($event)\"\\n          [delay]=\"1000\"></search-box>\\n      </div>\\n      <div fxFlex=\"20\" fxLayout=\"row\" e2e=\"view-mode-group\" class=\"view-mode\">\\n        <mat-button-toggle-group [(ngModel)]=\"viewState\" [value]=\"viewState\" (change)=\"onViewChange()\" #viewMode=\"matButtonToggleGroup\">\\n          <mat-button-toggle e2e=\"list-view\" matTooltip=\"List view\" value=\"list\">\\n            <mat-icon fontIcon=\"icon-list-view\" style=\"font-size: 24px;\"></mat-icon>\\n          </mat-button-toggle>\\n          <mat-button-toggle e2e=\"card-view\" matTooltip=\"Card view\" value=\"card\">\\n            <mat-icon fontIcon=\"icon-tile-view-solid\" style=\"font-size: 21px;\"></mat-icon>\\n          </mat-button-toggle>\\n        </mat-button-toggle-group>\\n      </div>\\n      <span fxFlex></span>\\n      <div class=\"action-buttons\" fxLayout=\"row\" fxLayoutGap=\"10px\">\\n        <mat-slide-toggle *ngIf=\"dataView == \\'sets\\'\" checked=\"false\" (change)=\"togglePoll()\" i18n>Auto Refresh</mat-slide-toggle>\\n\\n        <button mat-raised-button e2e=\"add-new-data-sets\" color=\"primary\" (click)=\"addDataSet()\">\\n          <span i18n>+ Dataset</span>\\n        </button>\\n\\n      </div>\\n    </mat-toolbar-row>\\n  </mat-toolbar>\\n  <div *ngIf=\"dataView == \\'sets\\'\">\\n    <div class=\"grid-view\" [style.max-height.px]=\"contentHeight\" *ngIf=\"viewState == \\'list\\'\">\\n      <div [style.height.px]=\"contentHeight - 6\">\\n        <datasets-grid-page [updater]=\"updater\" [searchTerm]=\"states.searchTermValue\"></datasets-grid-page>\\n      </div>\\n    </div>\\n\\n    <div class=\"card-view\" [style.height.px]=\"contentHeight\" [style.max-height.px]=\"contentHeight\" *ngIf=\"viewState == \\'card\\'\">\\n      <datasets-card-page [updater]=\"updater\" [searchTerm]=\"states.searchTermValue\"></datasets-card-page>\\n    </div>\\n  </div>\\n\\n  <div *ngIf=\"dataView == \\'pods\\'\">\\n    <div class=\"grid-view\" [style.max-height.px]=\"contentHeight\" *ngIf=\"viewState == \\'list\\'\">\\n      <div [style.height.px]=\"contentHeight - 6\">\\n        <datapods-grid-page [updater]=\"dpUpdater\" [searchTerm]=\"states.searchTermValue\">\\n        </datapods-grid-page>\\n      </div>\\n    </div>\\n\\n    <div class=\"card-view\" [style.height.px]=\"contentHeight\" [style.max-height.px]=\"contentHeight\" *ngIf=\"viewState == \\'card\\'\">\\n      <datapods-card-page [updater]=\"dpUpdater\" [searchTerm]=\"states.searchTermValue\">\\n      </datapods-card-page>\\n    </div>\\n  </div>\\n\\n</div>'},hB5V:function(t,e,n){\"use strict\";n.r(e);var a=n(\"mrSG\"),o=n(\"CcnG\"),i=n(\"Ip0R\"),r=n(\"vvyD\"),s=n(\"V9q+\"),l=n(\"gIcY\"),d=n(\"D2P5\"),c=n(\"zQhG\"),p=n(\"yYhs\"),u=n(\"bZT0\"),m=n(\"ZYCi\"),h=n(\"HF1C\"),f=function(){function t(){}return t=a.c([Object(o.Component)({selector:\"workbench-page\",template:n(\"gh63\"),styles:[n(\"dHzg\")]}),a.f(\"design:paramtypes\",[])],t)}(),g=n(\"o3x0\"),b=n(\"26FU\"),x=n(\"gI3B\"),v=n(\"mwIZ\"),y=n(\"k8Y/\"),w=n(\"Eil0\"),S=n(\"bNQv\"),C=n(\"TP7S\"),D=n(\"t/Na\"),F=n(\"F/XL\"),T=n(\"9Z1F\"),I=n(\"DidZ\"),L={artifacts:[{artifactName:\"MCT_DN_SESSION_SUMMARY\",columns:[{name:\"TRANSFER_DATE \",type:\"date\"},{name:\"TRANSFER_DATE_ID\",type:\"integer\"},{name:\"TRANSFER_MONTH_ID\",type:\"integer\"},{name:\"OPCO\",type:\"string\"}]}]},k=[{SEL_MB:433670.01326084137,MONTH_YEAR:\"Aug-17\",FAILED_ITEMS:60904,FAILED_MB:145021.8522052765,AVAIL_MB:621064.1080217361,TARGET_MODEL:\"LGMP260\",XFER_ITEMS:621830,XFER_MB:288465.82830142975,SEL_ITEMS:685102,TARGET_OS:\"android\",\"sum(AVAILABLE_ITEMS)\":934445},{AVAIL_MB:251823.43658542633,XFER_MB:67241.89413356781,SEL_ITEMS:153029,MONTH_YEAR:\"Aug-17\",FAILED_ITEMS:10851,FAILED_MB:30701.61478805542,TARGET_MODEL:\"SM-J727T1\",SEL_MB:152983.2884979248,TARGET_OS:\"android\",\"sum(AVAILABLE_ITEMS)\":217587,XFER_ITEMS:133955},{XFER_ITEMS:754,AVAIL_MB:6519.984823226929,FAILED_MB:0,MONTH_YEAR:\"Oct-17\",SEL_MB:1808.7185382843018,TARGET_MODEL:\"5049S\",XFER_MB:1808.7185382843018,SEL_ITEMS:754,\"sum(AVAILABLE_ITEMS)\":14447,TARGET_OS:\"android\",FAILED_ITEMS:0}],E=[{statement:\"SELECT * FROM table_name;\"},{statement:\"SELECT column1, column2 FROM table_name;\"},{statement:\"SELECT CustomerName, City FROM Customers;\"},{statement:\"SELECT Count(*) AS DistinctCountrie FROM (SELECT DISTINCT Country FROM Customers);\"}],N=n(\"Uz5J\"),P=function(){function t(t,e,n){this.http=t,this.jwt=e,this.router=n,this.api=v(N.a,\"api.url\"),this.wbAPI=this.api+\"/internal/workbench/projects\",this.getStagingData=this.getStagingData.bind(this),this.createFolder=this.createFolder.bind(this)}return t.prototype.getDatasets=function(){var t=this.wbAPI+\"/workbench/datasets\";return this.http.get(t).pipe(Object(T.a)(this.handleError(\"data\",[])))},t.prototype.getStagingData=function(t){var e=this.wbAPI+\"/workbench/raw/directory\";return this.http.post(e,{path:t}).pipe(Object(T.a)(this.handleError(\"data\",[])))},t.prototype.getRawPreviewData=function(t){var e=this.wbAPI+\"/workbench/raw/directory/preview\";return this.http.post(e,{path:t}).pipe(Object(T.a)(this.handleError(\"data\",[])))},t.prototype.getParsedPreviewData=function(t){var e=this.wbAPI+\"/workbench/raw/directory/inspect\";return this.http.post(e,t).pipe(Object(T.a)(function(t){return Object(F.a)(t)}))},t.prototype.filterFiles=function(t,e){var n=[];if(!C(t)){var a;a=this.startsWith(t,\"*\")?this.endsWith:this.endsWith(t,\"*\")?this.startsWith:this.exactMatch;for(var o=t.replace(\"*\",\"\"),i=0;i<e.length;i++)a(e[i].name,o)&&n.push(e[i]);return n}},t.prototype.endsWith=function(t,e){return-1!==t.indexOf(e,t.length-e.length)},t.prototype.startsWith=function(t,e){return 0===t.indexOf(e)},t.prototype.exactMatch=function(t,e){return t===e},t.prototype.uploadFile=function(t,e){var n=this.wbAPI+\"/workbench/raw/directory/upload/files\",a=new D.HttpHeaders;a.set(\"Content-Type\",null),a.set(\"Accept\",\"multipart/form-data\");var o=new D.HttpParams,i=new FormData;return S(t,function(t){i.append(\"files\",t,t.name)}),i.append(\"path\",e),this.http.post(n,i,{params:o,headers:a})},t.prototype.validateMaxSize=function(t){var e=0;return S(t,function(t){e+=t.size}),!(e>26214400)},t.prototype.validateFileTypes=function(t){var e=!0;return S(t,function(t){var n=t.name,a=n.substring(n.lastIndexOf(\".\")+1);\"csv\"!==a.toLowerCase()&&\"txt\"!==a.toLowerCase()&&(e=!1)}),e},t.prototype.createFolder=function(t){var e=this.wbAPI+\"/workbench/raw/directory/create\";return this.http.post(e,{path:t}).pipe(Object(T.a)(this.handleError(\"data\",[])))},t.prototype.getDatasetDetails=function(t){var e=this.wbAPI+\"/workbench/\"+t;return this.http.get(e).pipe(Object(T.a)(this.handleError(\"data\",L)))},t.prototype.triggerParser=function(t){var e=this.wbAPI+\"/workbench/datasets\";return this.http.post(e,t).pipe(Object(T.a)(this.handleError(\"data\",{})))},t.prototype.setDataToLS=function(t,e){localStorage.setItem(t,JSON.stringify(e))},t.prototype.getDataFromLS=function(t){return JSON.parse(localStorage.getItem(t))},t.prototype.removeDataFromLS=function(t){localStorage.removeItem(t)},t.prototype.executeSqlQuery=function(t){var e=this.wbAPI+\"/execute\";return this.http.post(e,{query:t}).pipe(Object(T.a)(this.handleError(\"data\",k)))},t.prototype.navigateToDetails=function(t){this.setDataToLS(\"dsMetadata\",t),this.router.navigate([\"workbench\",\"dataset\",\"details\"])},t.prototype.triggerDatasetPreview=function(t){var e=this.wbAPI+\"/workbench/previews\";return this.http.post(e,{name:t}).pipe(Object(T.a)(this.handleError(\"data\",{})))},t.prototype.getDatasetPreviewData=function(t){var e=this.wbAPI+\"/workbench/previews/\"+t;return this.http.get(e).pipe(Object(T.a)(function(t){return Object(F.a)(t)}))},t.prototype.createSemantic=function(t){var e=this.api+\"/internal/semantic/workbench/create\";return t.customerCode=this.jwt.customerCode,t.username=this.jwt.getUserName(),t.projectCode=\"workbench\",this.http.post(e,t).pipe(Object(T.a)(this.handleError(\"data\",{})))},t.prototype.getListOfSemantic=function(){return this.http.get(this.api+\"/internal/semantic/md?projectId=workbench\").pipe(Object(T.a)(this.handleError(\"data\",{})))},t.prototype.getSemanticDetails=function(t){return this.http.get(this.api+\"/internal/semantic/workbench/\"+t).pipe(Object(T.a)(this.handleError(\"data\",{})))},t.prototype.updateSemanticDetails=function(t){var e=t.id,n=this.api+\"/internal/semantic/workbench/\"+e;return t.updatedBy=this.jwt.getUserName(),this.http.put(n,t).pipe(Object(T.a)(this.handleError(\"data\",{})))},t.prototype.handleError=function(t,e){return void 0===t&&(t=\"operation\"),function(t){return Object(F.a)(e)}},t=a.c([Object(o.Injectable)({providedIn:\"root\"}),a.f(\"design:paramtypes\",[D.HttpClient,I.k,m.Router])],t)}(),O=n(\"eSSI\"),A=n(\"phju\"),R=function(){function t(t,e,n,a,o,i){this.router=t,this.dialog=e,this.LocalSearch=n,this.workBench=a,this.datePipe=o,this._toastMessage=i,this.availableSets=[],this.availableDP=[],this.viewState=\"card\",this.states={searchTerm:\"\",searchTermValue:\"\"},this.updater=new b.a([]),this.dpUpdater=new b.a([]),this.dataView=\"sets\",this.poll=!1,this.interval=2e4}return t.prototype.ngOnInit=function(){this.getDatasets()},t.prototype.ngOnDestroy=function(){this.poll&&this.stopPolling()},t.prototype.startPolling=function(){var t=this;this.timer=Object(x.a)(0,this.interval),this.timerSubscription=this.timer.subscribe(function(){t.getDatasets()}),this.poll=!0},t.prototype.stopPolling=function(){this.timerSubscription&&this.timerSubscription.unsubscribe(),this.poll=!1},t.prototype.getDatasets=function(){var t=this;this.workBench.getDatasets().subscribe(function(e){t.availableSets=y(e,\"system.modifiedTime\",\"desc\"),t.updateData(t.availableSets)})},t.prototype.getDatapods=function(){var t=this;this.workBench.getListOfSemantic().subscribe(function(e){t.availableDP=v(e,\"contents[0].ANALYZE\"),t.updateData(t.availableDP)})},t.prototype.updateData=function(t){var e=this;setTimeout(function(){\"sets\"===e.dataView?e.updater.next(t):e.dpUpdater.next(t)}),setTimeout(function(){e.contentHeight=window.innerHeight-170})},t.prototype.onViewChange=function(){\"\"!==this.states.searchTerm?this.applySearchFilter(this.states.searchTerm):\"sets\"===this.dataView?this.updateData(this.availableSets):this.updateData(this.availableDP)},t.prototype.applySearchFilter=function(t){var e=this;this.states.searchTerm=t;var n=[{keyword:\"Data Set Name\",fieldName:\"system\",accessor:function(t){return t.name}},{keyword:\"Added By\",fieldName:\"system\",accessor:function(t){return t.createdBy}},{keyword:\"Last Updated\",fieldName:\"system\",accessor:function(t){return e.datePipe.transform(1e3*t.modifiedTime,\"short\")}},{keyword:\"Description\",fieldName:\"system\",accessor:function(t){return t.description}}],a=[{keyword:\"Datapod Name\",fieldName:\"metricName\"},{keyword:\"Created by\",fieldName:\"createdBy\"},{keyword:\"Last Updated\",fieldName:\"createdAt\",accessor:function(t){return e.datePipe.transform(1e3*t,\"short\")}},{keyword:\"Description\",fieldName:\"description\"}],o=[],i=[];\"sets\"===this.dataView?(o=n,i=this.availableSets):(o=a,i=this.availableDP);var r=this.LocalSearch.parseSearchTerm(this.states.searchTerm);this.states.searchTermValue=r.trimmedTerm,this.LocalSearch.doSearch(r,i,o).then(function(t){e.updateData(t)},function(t){e._toastMessage.error(t.message)})},t.prototype.addDataSet=function(){this.router.navigate([\"workbench\",\"dataset\",\"add\"])},t.prototype.onDataObjectViewChange=function(){this.stopPolling(),this.states.searchTerm,this.searchBox.onClose(),\"pods\"===this.dataView?this.getDatapods():this.getDatasets()},t.prototype.onResize=function(t){this.contentHeight=t.target.innerHeight-165},t.prototype.togglePoll=function(){!0===this.poll?this.stopPolling():this.startPolling()},a.c([Object(o.ViewChild)(A.a),a.f(\"design:type\",A.a)],t.prototype,\"searchBox\",void 0),t=a.c([Object(o.Component)({selector:\"data-objects-page\",template:n(\"h20e\"),providers:[i.DatePipe],styles:[n(\"rM5H\")]}),a.f(\"design:paramtypes\",[m.Router,g.g,w.a,P,i.DatePipe,O.a])],t)}(),j=n(\"BkRI\"),G={file:\"\",lineSeparator:\"\\n\",delimiter:\",\",quoteChar:\"\",quoteEscapeChar:\"\\\\\",headerSize:1,fieldNamesLine:\"\",dateFormats:[],rowsToInspect:100,delimiterType:\"delimited\",header:\"yes\"},M={parser:{fields:[],file:\"\",lineSeparator:\"\\\\n\",delimiter:\",\",quoteChar:\"\",quoteEscape:\"\\\\\",headerSize:1,fieldNameLine:\"\"},outputs:[{dataSet:\"test\"}],parameters:[{name:\"spark.master\",value:\"spark://foobar\"}]},B={name:\"Staging\",size:1/0,isDirectory:!0,path:\"root\"},z={text:\"string\",string:\"string\",double:\"double\",integer:\"integer\",date:\"date\",float:\"float\",keyword:\"string\",long:\"long\",decimal:\"double\",timestamp:\"date\"},_=[{name:\"SFTP\",uid:\"sftp\",imgsrc:\"assets/img/sftp.png\",supported:!0},{name:\"Amazon S3\",uid:\"s3\",imgsrc:\"assets/img/s3.png\",supported:!1},{name:\"MAPR\",uid:\"mapr\",imgsrc:\"assets/svg/mapr.svg\",supported:!1},{name:\"Elastic Search\",uid:\"es\",imgsrc:\"assets/svg/elastic.svg\",supported:!1},{name:\"MariaDB\",uid:\"maridb\",imgsrc:\"assets/img/mariadb.jpg\",supported:!1},{name:\"HDFS\",uid:\"hdfs\",imgsrc:\"assets/img/hadoop.jpg\",supported:!1},{name:\"MySQL\",uid:\"mysql\",imgsrc:\"assets/svg/mysql.svg\",supported:!1},{name:\"SQL Server\",uid:\"sqlserver\",imgsrc:\"assets/img/sqlserver.png\",supported:!1},{name:\"MongoDB\",uid:\"mongodb\",imgsrc:\"assets/img/mongodb.png\",supported:!1},{name:\"JDBC\",uid:\"jdbc\",imgsrc:\"assets/img/jdbc.png\",supported:!1}],q=n(\"D1y2\"),V=n(\"3WF5\"),H=n(\"Y3Pm\"),U=n(\"3OWR\"),W=n(\"OFL0\"),J=n(\"Xp7I\"),Y=n(\"WpUw\"),Q=function(){function t(t,e,n){this.formBuilder=t,this.dialogRef=e,this.data=n,this.placeholder=\"\",this.formatArr=\"\",v(n,\"placeholder\")&&(this.placeholder=n.placeholder)}return t.prototype.ngOnInit=function(){v(this.data,\"formatArr\")&&(this.formatArr=this.data.formatArr),this.form=this.formBuilder.group({dateformat:this.data?this.data.format:\"\"})},t.prototype.submit=function(t){this.dialogRef.close(\"\"+t.value.dateformat)},t=a.c([Object(o.Component)({selector:\"dateformat-dialog\",template:n(\"8rGW\"),styles:[n(\"856K\")]}),a.g(2,Object(o.Inject)(g.a)),a.f(\"design:paramtypes\",[l.FormBuilder,g.n,Object])],t)}(),$=function(){function t(t,e,n){this.dxDataGrid=t,this.dialog=e,this.workBench=n,this.fieldInfo=[],this.inspectError=!1,this.errMsg=\"\",this.parserConfig=new o.EventEmitter}return t.prototype.ngOnInit=function(){var t=this;this.previewgridConfig=this.getPreviewGridConfig(),setTimeout(function(){t.updaterSubscribtion=t.previewObj.subscribe(function(e){t.onUpdate(e)})},100)},t.prototype.ngOnDestroy=function(){this.updaterSubscribtion.unsubscribe()},t.prototype.onUpdate=function(t){var e=this;if(2!==t.length||C(t[0].samplesParsed))0===t.length||C(t[0].error)?0===t.length&&setTimeout(function(){e.dataGrid.instance.beginCustomLoading(\"Loading...\"),e.reloadDataGrid([])}):(this.inspectError=!0,this.errMsg=t[0].error.message);else{this.parserData=j(t[0]);var n=t[0].samplesParsed;this.fieldInfo=j(t[0].fields),setTimeout(function(){e.dataGrid.instance.beginCustomLoading(\"Loading...\"),e.reloadDataGrid(n)})}2!==t.length||C(t[1])||this.rawPreview(t[1])},t.prototype.ngAfterViewInit=function(){this.dataGrid.instance.option(this.previewgridConfig)},t.prototype.getPreviewGridConfig=function(){return this.dxDataGrid.mergeWithDefaultConfig({dataSource:[],columnAutoWidth:!1,wordWrapEnabled:!1,searchPanel:{visible:!1,width:240,placeholder:\"Search...\"},height:\"100%\",width:\"100%\",filterRow:{visible:!0,applyFilter:\"auto\"},headerFilter:{visible:!1},sorting:{mode:\"none\"},export:{fileName:\"Parsed_Sample\"},scrolling:{showScrollbar:\"always\",mode:\"virtual\",useNative:!1},showRowLines:!1,showBorders:!1,rowAlternationEnabled:!0,showColumnLines:!0,selection:{mode:\"none\"},customizeColumns:function(t){for(var e=0,n=t;e<n.length;e++){n[e].headerCellTemplate=\"headerTemplate\"}}})},t.prototype.reloadDataGrid=function(t){this.dataGrid.instance.option(\"dataSource\",t),this.dataGrid.instance.refresh(),this.dataGrid.instance.endCustomLoading()},t.prototype.checkDate=function(t){if(\"date\"===t.srcElement.value)this.openDateFormatDialog(t);else{t.currentTarget.nextElementSibling.style.visibility=\"hidden\";var e=t.srcElement.id;W(this.parserData.fields[e],\"format\")&&q(this.fieldInfo[e],\"format\",v(this.parserData.fields[e],\"format\"))}},t.prototype.openDateFormatDialog=function(t){var e,n=this,a=\"\",o=[];e=\"click\"===t.type?H(t.target.id,\"edit_\",\"\"):t.srcElement.id,W(this.fieldInfo[e],\"format\")&&(this.fieldInfo[e].format.length>1?o=this.fieldInfo[e].format:a=v(this.fieldInfo[e],\"format[0]\")),this.dialog.open(Q,{hasBackdrop:!1,data:{placeholder:\"Enter date format\",format:a,formatArr:o}}).afterClosed().subscribe(function(e){var a=-1;a=\"click\"===t.type?H(t.target.id,\"edit_\",\"\"):t.srcElement.id,\"\"===e&&W(n.parserData.fields[a],\"format\")?0===n.parserData.fields[a].format.length||n.parserData.fields[a].format.length>1?t.srcElement.value=v(n.parserData.fields[a],\"type\"):1===n.parserData.fields[a].format.length&&q(n.fieldInfo[a],\"format[0]\",v(n.parserData.fields[a],\"format[0]\")):\"\"!==e||W(n.parserData.fields[a],\"format\")?\"\"!==e&&q(n.fieldInfo[a],\"format\",[e]):t.srcElement.value=v(n.parserData.fields[a],\"type\")})},t.prototype.toAdd=function(){var t=V(this.fieldInfo,function(t){return t.format&&(t.format=t.format[0]),t}),e=U(this.parserData,{fields:t});this.parserConfig.emit(e)},t.prototype.errorInfoVisibility=function(t){return v(this.fieldInfo[t],\"format\").length>1?\"visible\":\"hidden\"},t.prototype.rawPreview=function(t){var e=this;this.workBench.getRawPreviewData(t).subscribe(function(t){e.rawFile=J(t.data,50)})},a.c([Object(o.Input)(),a.f(\"design:type\",b.a)],t.prototype,\"previewObj\",void 0),a.c([Object(o.Output)(),a.f(\"design:type\",o.EventEmitter)],t.prototype,\"parserConfig\",void 0),a.c([Object(o.ViewChild)(c.DxDataGridComponent),a.f(\"design:type\",c.DxDataGridComponent)],t.prototype,\"dataGrid\",void 0),t=a.c([Object(o.Component)({selector:\"parser-preview\",template:n(\"Nd39\"),styles:[n(\"PduJ\")]}),a.f(\"design:paramtypes\",[Y.a,g.g,P])],t)}(),K=n(\"YSh2\"),X=function(){function t(t,e){this.dialogRef=t,this.params=e,this.title=\"\",this.message=\"No Data\",v(e,\"rawData\")&&(this.message=J(e.rawData,50)),v(e,\"title\")&&(this.title=e.title)}return t.prototype.ngOnInit=function(){},t.prototype.closeDashboard=function(t){void 0===t&&(t=!1),this.dialogRef.close(t)},t.prototype.confirm=function(){this.closeDashboard(!0)},t=a.c([Object(o.Component)({selector:\"rawpreview-dialog\",template:n(\"ZwXf\")}),a.g(1,Object(o.Inject)(g.a)),a.f(\"design:paramtypes\",[g.n,Object])],t)}(),Z=function(){function t(t,e){this.dialog=t,this.workBench=e,this.separatorKeysCodes=[K.g,K.c],this.lineSeperator=\"lineFeed\",this.onDetailsFilled=new o.EventEmitter}return t.prototype.ngOnInit=function(){this.detailsFormGroup=new l.FormGroup({fieldSeperatorControl:new l.FormControl(\"\",l.Validators.required),hederSizeControl:new l.FormControl(\"1\",l.Validators.required),fieldNamesLineControl:new l.FormControl(\"1\"),quoteCharControl:new l.FormControl(\"\"),escapeCharControl:new l.FormControl(\"\")}),this.subcribeToFormChanges()},t.prototype.subcribeToFormChanges=function(){var t=this;this.detailsFormGroup.statusChanges.subscribe(function(e){\"VALID\"===e?t.onFormValid(t.detailsFormGroup.value):t.onDetailsFilled.emit({detailsFilled:!1,details:t.previewConfig})})},t.prototype.addFormat=function(t){var e=t.input,n=t.value;(n||\"\").trim()&&this.previewConfig.dateFormats.push(n.trim()),e&&(e.value=\"\")},t.prototype.removeFormat=function(t){var e=this.previewConfig.dateFormats.indexOf(t);e>=0&&this.previewConfig.dateFormats.splice(e,1)},t.prototype.previewDialog=function(t){var e=this,n=t.path+\"/\"+t.name;this.workBench.getRawPreviewData(n).subscribe(function(n){e.dialog.open(X,{minHeight:500,minWidth:600,data:{title:t.name,rawData:n.data}})})},t.prototype.onFormValid=function(t){C(this.selFiles)||this.onDetailsFilled.emit({detailsFilled:!0,details:this.previewConfig})},t.prototype.toPreview=function(){\"lineFeed\"===this.lineSeperator?this.previewConfig.lineSeparator=\"\\n\":\"carriageReturn\"===this.lineSeperator?this.previewConfig.lineSeparator=\"\\r\":this.previewConfig.lineSeparator=\"\\r\\n\",this.previewConfig.delimiter=this.detailsFormGroup.value.fieldSeperatorControl,this.previewConfig.fieldNamesLine=this.detailsFormGroup.value.fieldNamesLineControl,this.previewConfig.headerSize=this.detailsFormGroup.value.hederSizeControl,this.previewConfig.quoteEscapeChar=this.detailsFormGroup.value.escapeCharControl,this.previewConfig.quoteChar=this.detailsFormGroup.value.quoteCharControl,this.onDetailsFilled.emit({detailsFilled:!0,details:this.previewConfig})},a.c([Object(o.Input)(),a.f(\"design:type\",Array)],t.prototype,\"selFiles\",void 0),a.c([Object(o.Input)(),a.f(\"design:type\",Object)],t.prototype,\"previewConfig\",void 0),a.c([Object(o.Output)(),a.f(\"design:type\",o.EventEmitter)],t.prototype,\"onDetailsFilled\",void 0),t=a.c([Object(o.Component)({selector:\"dataset-details\",template:n(\"kL69\"),styles:[n(\"doIa\")]}),a.f(\"design:paramtypes\",[g.g,P])],t)}(),tt=function(){function t(t,e,n,a){this.router=t,this.dialog=e,this.workBench=n,this.notify=a,this.selectFullfilled=!1,this.detailsFilled=!1,this.previewDone=!1,this.details=[],this.parsedPreview=new b.a([]),this.selectedIndex=0,this.folNamePattern=\"[A-Za-z0-9]+\"}return t.prototype.ngOnInit=function(){this.csvConfig=j(G),this.parserConf=j(M),this.nameFormGroup=new l.FormGroup({nameControl:new l.FormControl(\"\",[l.Validators.required,l.Validators.pattern(this.folNamePattern),l.Validators.minLength(3),l.Validators.maxLength(25)]),descControl:new l.FormControl(\"\",[l.Validators.required,l.Validators.minLength(5),l.Validators.maxLength(99)])})},t.prototype.stepChanged=function(t){this.selectedIndex=t.selectedIndex,2===t.selectedIndex&&3!==t.previouslySelectedIndex?(this.detailsComponent.toPreview(),this.previewDone=!1,this.parsedPreview.next([]),this.getParsedPreview()):3===t.selectedIndex?this.previewComponent.toAdd():2===t.selectedIndex&&3===t.previouslySelectedIndex&&(this.previewDone=!0)},t.prototype.markSelectDone=function(t){this.selectFullfilled=t.selectFullfilled,this.selectedFiles=t.selectedFiles,this.csvConfig.file=t.filePath},t.prototype.markDetailsDone=function(t){this.detailsFilled=t.detailsFilled,this.details=t.details},t.prototype.getParsedPreview=function(){var t=this;2===this.selectedIndex&&this.workBench.getParsedPreviewData(this.details).subscribe(function(e){t.previewData=e,C(e.samplesParsed)?t.previewDone=!1:t.previewDone=!0,t.parsedPreview.next([t.previewData,t.details.file])})},t.prototype.getParserConfig=function(t){this.fieldsConf=t},t.prototype.previewDialog=function(t){var e=this,n=t.path+\"/\"+t.name;this.workBench.getRawPreviewData(n).subscribe(function(n){e.dialog.open(X,{minHeight:500,minWidth:600,data:{title:t.name,rawData:n.data}})})},t.prototype.triggerParser=function(){var t=this,e={name:this.nameFormGroup.value.nameControl,description:this.nameFormGroup.value.descControl,component:\"parser\",configuration:{fields:this.fieldsConf.fields,file:this.fieldsConf.info.file,lineSeparator:this.fieldsConf.lineSeparator,delimiter:this.fieldsConf.delimiter,quoteChar:this.fieldsConf.quoteChar,quoteEscape:this.fieldsConf.quoteEscapeChar,headerSize:this.fieldsConf.headerSize}};this.parserConf.outputs[0].description=this.nameFormGroup.value.descControl,this.workBench.triggerParser(e).subscribe(function(e){t.notify.info(\"Parser_triggered_successfully\",\"Parsing\",{hideDelay:9e3})}),this.router.navigate([\"workbench\",\"dataobjects\"])},t.prototype.backtoLists=function(){this.router.navigate([\"workbench\",\"dataobjects\"])},a.c([Object(o.ViewChild)(\"previewComponent\"),a.f(\"design:type\",$)],t.prototype,\"previewComponent\",void 0),a.c([Object(o.ViewChild)(\"detailsComponent\"),a.f(\"design:type\",Z)],t.prototype,\"detailsComponent\",void 0),t=a.c([Object(o.Component)({selector:\"create-datasets\",template:n(\"9q4Y\"),styles:[n(\"b/9+\")]}),a.f(\"design:paramtypes\",[m.Router,g.g,P,O.a])],t)}(),et=n(\"gb7j\"),nt=n(\"E+oP\"),at=function(){function t(t){this.workBench=t,this.onExecute=new o.EventEmitter,this.onCreate=new o.EventEmitter,this.readOnlyMode=!1,this.editorOptions={displayIndentGuides:!0,enableBasicAutocompletion:!0,enableLiveAutocompletion:!0,showPrintMargin:!1,maxLines:1/0,fontSize:\"100%\",wrap:\"free\",wrapBehavioursEnabled:!0,cursorStyle:\"ace\"},this.langTools=ace.require(\"ace/ext/language_tools\"),this.completions=[]}return t.prototype.ngAfterViewInit=function(){var t=this;setTimeout(function(){t.editor.getEditor().focus(),t.editor.getEditor().resize()},100)},t.prototype.ngOnDestroy=function(){this.langTools.setCompleters([this.langTools.snippetCompleter,this.langTools.textCompleter,this.langTools.keyWordCompleter])},Object.defineProperty(t.prototype,\"artifacts\",{set:function(t){nt(t)||(this._artifacts=t,this.generateCompletions(),this.addCompletionsToEditor())},enumerable:!0,configurable:!0}),t.prototype.generateCompletions=function(){var t=this;this._artifacts.forEach(function(e){t.completions.push({name:e.artifactName,value:e.artifactName,meta:\"table\",score:1001}),e.columns.forEach(function(e){var n=e.name;t.completions.push({name:n,value:n,caption:n,meta:\"column\",score:1e3,insertValue:n})})})},t.prototype.addCompletionsToEditor=function(){var t=this,e={getCompletions:function(n,a,o,i,r){var s=V(t.completions,function(t){return t.completer=e,t});if(0===i.length)return r(null,j(s));var l=s.filter(function(t){return(t.caption||t.name).toLowerCase().indexOf(i.toLowerCase())>=0});return r(null,j(l))},insertMatch:function(t,e){t.completer.insertMatch({value:e.insertValue||e.value||e})}};this.langTools.addCompleter(e)},t.prototype.queryUpdated=function(t){},t.prototype.onCreateEmitter=function(){this.onCreate.emit(this.query)},t.prototype.executeQuery=function(){var t=this;this.workBench.executeSqlQuery(this.query).subscribe(function(e){t.onExecute.emit(e)})},t.prototype.viewAction=function(t){this.readOnlyMode=!0,this.query=t},a.c([Object(o.Output)(),a.f(\"design:type\",Object)],t.prototype,\"onExecute\",void 0),a.c([Object(o.Output)(),a.f(\"design:type\",Object)],t.prototype,\"onCreate\",void 0),a.c([Object(o.ViewChild)(\"editor\"),a.f(\"design:type\",u.a)],t.prototype,\"editor\",void 0),a.c([Object(o.Input)(),a.f(\"design:type\",Object),a.f(\"design:paramtypes\",[Object])],t.prototype,\"artifacts\",null),t=a.c([Object(o.Component)({selector:\"sql-script\",template:n(\"3jxb\"),styles:[n(\"8xfp\")]}),a.f(\"design:paramtypes\",[P])],t)}(),ot=function(){function t(t,e){this.formBuilder=t,this.dialogRef=e,this.folNamePattern=\"[A-Za-z0-9]+\"}return t.prototype.ngOnInit=function(){this.form=this.formBuilder.group({nameControl:[\"\",[l.Validators.required,l.Validators.pattern(this.folNamePattern),l.Validators.minLength(3),l.Validators.maxLength(18)]],descControl:[\"\",[l.Validators.required,l.Validators.minLength(5),l.Validators.maxLength(50)]]})},t.prototype.submit=function(t){var e={name:t.value.nameControl,desc:t.value.descControl};this.dialogRef.close(e)},t.prototype.onClose=function(){this.dialogRef.close(!1)},t=a.c([Object(o.Component)({selector:\"details-dialog\",template:n(\"zu6b\"),styles:[n(\"rZv1\")]}),a.f(\"design:paramtypes\",[l.FormBuilder,g.n])],t)}(),it=function(){function t(t,e,n,a){this.router=t,this.dialog=e,this.workBench=n,this.notify=a,this.artifacts=[],this.gridData=new b.a([]),this.appliedActions=E,this.scriptHeight=100,this.previewHeight=0,this.query=\"\"}return t.prototype.ngOnInit=function(){this.getPageData()},t.prototype.ngOnDestroy=function(){this.workBench.removeDataFromLS(\"dsMetadata\")},t.prototype.getPageData=function(){this.dsMetadata=this.workBench.getDataFromLS(\"dsMetadata\"),this.constructArtifactForEditor()},t.prototype.constructArtifactForEditor=function(){var t={artifactName:this.dsMetadata.system.name,columns:this.dsMetadata.schema.fields};this.artifacts.push(t)},t.prototype.runScript=function(){this.scriptComponent.executeQuery()},t.prototype.sendDataToPreview=function(t){this.gridData.next(t)},t.prototype.getQuery=function(t){this.query=t},t.prototype.openSaveDialog=function(){var t=this;this.dialog.open(ot,{hasBackdrop:!1,width:\"400px\",height:\"300px\"}).afterClosed().subscribe(function(e){!1!==e&&(t.datasetDetails=e,t.scriptComponent.onCreateEmitter(),t.triggerSQL(e))})},t.prototype.toggleViewMode=function(t){this.previewHeight=t?100:60,this.scriptHeight=t?0:40},t.prototype.triggerSQL=function(t){var e=this,n=\"CREATE TABLE \"+t.name+\" AS \"+this.query,a=!0===et(n,\";\")?\"\"+n:n+\";\",o={name:t.name,input:this.dsMetadata.system.name,component:\"sql\",configuration:{script:a}};this.workBench.triggerParser(o).subscribe(function(t){e.notify.info(\"SQL_Executor_triggered_successfully\",\"Creating Dataset\",{hideDelay:9e3})}),this.router.navigate([\"workbench\",\"dataobjects\"])},t.prototype.previewAction=function(t){this.scriptComponent.viewAction(t)},t.prototype.backToDS=function(){this.router.navigate([\"workbench\",\"dataobjects\"])},a.c([Object(o.ViewChild)(\"sqlscript\"),a.f(\"design:type\",at)],t.prototype,\"scriptComponent\",void 0),t=a.c([Object(o.Component)({selector:\"sql-executor\",template:n(\"sWf6\"),styles:[n(\"USSH\")]}),a.f(\"design:paramtypes\",[m.Router,g.g,P,O.a])],t)}(),rt=function(){function t(t,e,n){this.router=t,this.dxDataGrid=e,this.workBench=n,this.interval=5e3,this.previewData=[],this.dsMetadata=this.workBench.getDataFromLS(\"dsMetadata\")}return t.prototype.ngOnInit=function(){\"SUCCESS\"===this.dsMetadata.asOfNow.status?(this.previewStatus=\"queued\",this.triggerPreview()):this.previewStatus=\"failed\"},t.prototype.ngOnDestroy=function(){C(this.timerSubscription)||this.timerSubscription.isStopped||this.stopPolling(),this.workBench.removeDataFromLS(\"dsMetadata\")},t.prototype.backToDS=function(){this.router.navigate([\"workbench\",\"dataobjects\"])},t.prototype.triggerPreview=function(){var t=this;this.workBench.triggerDatasetPreview(this.dsMetadata.system.name).subscribe(function(e){t.previewStatus=\"queued\",C(e.id)||t.startPolling(e.id)})},t.prototype.getPreview=function(t){var e=this;this.workBench.getDatasetPreviewData(t).subscribe(function(t){e.previewStatus=t.status,\"success\"===e.previewStatus?(e.previewData=t.rows,setTimeout(function(){e.dataGrid.instance.refresh()}),e.stopPolling()):\"failed\"===e.previewStatus&&e.stopPolling()})},t.prototype.startPolling=function(t){var e=this;this.timer=Object(x.a)(0,this.interval),this.timerSubscription=this.timer.subscribe(function(){e.getPreview(t)}),this.poll=!0},t.prototype.stopPolling=function(){this.timerSubscription.unsubscribe(),this.poll=!1},t.prototype.tabChanged=function(t){1===t.index&&\"success\"===this.previewStatus&&this.dataGrid.instance.refresh()},a.c([Object(o.ViewChild)(\"dpGrid\"),a.f(\"design:type\",c.DxDataGridComponent)],t.prototype,\"dataGrid\",void 0),t=a.c([Object(o.Component)({selector:\"dataset-detail-view\",template:n(\"Adow\"),styles:[n(\"1n4i\")]}),a.f(\"design:paramtypes\",[m.Router,Y.a,P])],t)}(),st=n(\"k4Da\"),lt=function(){function t(t,e){this.router=t,this.workBench=e,this.joinToggleValue=!1,this.selectionMode=\"single\",this.isSelected=!1,this.selectedDSData=[]}return t.prototype.ngOnInit=function(){var t=this;this.workBench.getDatasets().subscribe(function(e){t.availableDS=e,t.gridDataAvailableDS=j(e)}),setTimeout(function(){t.contentHeight=window.innerHeight-175})},t.prototype.backToDS=function(){this.router.navigate([\"workbench\",\"dataobjects\"])},t.prototype.joinEligibleToggled=function(){this.joinToggleValue?(this.selectionMode=\"multiple\",this.gridDataAvailableDS=st(this.availableDS,\"joinEligible\")):(this.selectionMode=\"single\",this.gridDataAvailableDS=this.availableDS),this.dataGrid.instance.clearSelection(),this.isSelected=!1,this.selectedDSData=[]},t.prototype.onDSSelectionChanged=function(t){t.selectedRowsData.length>=1?(this.isSelected=!0,this.selectedDSData=t.selectedRowsData):(this.isSelected=!1,this.selectedDSData=[])},t.prototype.gotoValidate=function(){this.workBench.setDataToLS(\"selectedDS\",this.selectedDSData),this.router.navigate([\"workbench\",\"semantic\",\"validate\"])},t.prototype.onResize=function(t){this.contentHeight=t.target.innerHeight-165},a.c([Object(o.ViewChild)(\"dsGrid\"),a.f(\"design:type\",c.DxDataGridComponent)],t.prototype,\"dataGrid\",void 0),t=a.c([Object(o.Component)({selector:\"create-semantic\",template:n(\"XaOl\"),styles:[n(\"aiEQ\")]}),a.f(\"design:paramtypes\",[m.Router,P])],t)}(),dt=n(\"mUg4\"),ct=n(\"L5/0\"),pt=n(\"ZiUS\"),ut=n(\"Zsd2\"),mt=n(\"CeSz\"),ht=function(){function t(t,e,n){this.formBuilder=t,this.dialogRef=e,this.data=n,this.dataPodCategories=mt.h}return t.prototype.ngOnInit=function(){var t=mt.h[0].name;this.form=new l.FormGroup({name:new l.FormControl(\"\",[l.Validators.required,l.Validators.maxLength(25)]),category:new l.FormControl(t)})},t.prototype.submit=function(){var t=this.form.value,e=t.name,n=t.category;this.dialogRef.close({name:e,category:n})},t=a.c([Object(o.Component)({selector:\"semantic-details-dialog\",template:n(\"qYo2\"),styles:[n(\"1LLy\")]}),a.g(2,Object(o.Inject)(g.a)),a.f(\"design:paramtypes\",[l.FormBuilder,g.n,Object])],t)}(),ft=function(){function t(t,e,n,a){this.router=t,this.workBench=e,this.dialog=n,this.notify=a,this.isJoinEligible=!1,this.selectedDS=this.injectFieldProperties(this.workBench.getDataFromLS(\"selectedDS\"))}return t.prototype.ngOnDestroy=function(){this.workBench.removeDataFromLS(\"selectedDS\")},t.prototype.showDSList=function(){this.router.navigate([\"workbench\",\"semantic\",\"create\"])},t.prototype.injectFieldProperties=function(t){var e=this;return dt(t,function(t){e.isJoinEligible=\"ES\"!==t.storageType;var n=t.system.name;t.schema.fields=V(t.schema.fields,function(t){var e=t.isKeyword?t.name+\".keyword\":t.name;return{aliasName:t.name,columnName:e,displayName:t.name,filterEligible:!0,joinEligible:!1,kpiEligible:!1,include:!0,name:t.name,table:n,type:z[ct(t.type)]}})}),t},t.prototype.createDatapod=function(){var t=this;this.dialog.open(ht,{hasBackdrop:!0,autoFocus:!0,closeOnNavigation:!0,disableClose:!0,height:\"auto\",width:\"350px\"}).afterClosed().subscribe(function(e){var n=e.name,a=e.category;if(ut(n).length>0){var o={category:a,customerCode:\"\",username:\"\",projectCode:\"\",metricName:\"\",artifacts:[],esRepository:{indexName:\"\",storageType:\"\",type:\"\"},supports:[{category:\"table\",children:[],label:\"tables\"},{category:\"charts\",children:[],label:\"charts\"}],parentDataSetNames:[],parentDataSetIds:[]};o.metricName=n,dt(t.selectedDS,function(t){\"ES\"===t.storageType&&(o.esRepository.indexName=t.system.name,o.esRepository.storageType=\"ES\",o.esRepository.type=t.system.esIndexType),o.artifacts.push({artifactName:t.system.name,columns:st(t.schema.fields,\"include\")}),o.parentDataSetNames.push(t.system.name),o.parentDataSetIds.push(pt(t._id,\"::\")[1])}),t.workBench.createSemantic(o).subscribe(function(e){t.notify.info(\"Datapod created successfully\",\"Datapod\",{hideDelay:9e3}),t.router.navigate([\"workbench\",\"dataobjects\"])})}})},t=a.c([Object(o.Component)({selector:\"validate-semantic\",template:n(\"sXUr\"),styles:[n(\"CG1N\")]}),a.f(\"design:paramtypes\",[m.Router,P,g.g,O.a])],t)}(),gt=n(\"J2m7\"),bt=n(\"UfWW\"),xt=n(\"Puqe\"),vt=function(){function t(t,e,n){this.router=t,this.workBench=e,this.notify=n,this.isSelected=!1,this.selectedDPData=[],this.availableDS=[],this.isJoinEligible=!1,this.selectedDPDetails=[],this.dpID=\"\",this.dpID=this.workBench.getDataFromLS(\"dpID\")}return t.prototype.ngOnInit=function(){var t=this;this.workBench.getDatasets().subscribe(function(e){t.availableDS=e,null!==t.dpID?t.onDPSelectionChanged(t.dpID):t.workBench.getListOfSemantic().subscribe(function(e){t.availableDP=v(e,\"contents[0].ANALYZE\"),t.gridDataAvailableDP=j(t.availableDP)})})},t.prototype.ngOnDestroy=function(){null!==this.dpID&&this.workBench.removeDataFromLS(\"dpID\")},t.prototype.backToDS=function(){this.router.navigate([\"workbench\",\"dataobjects\"])},t.prototype.onDPSelectionChanged=function(t){var e=this;this.isSelected=!0,this.workBench.getSemanticDetails(t).subscribe(function(t){e.selectedDPDetails=xt(t,\"statusMessage\"),e.selectedDPData=v(t,\"artifacts\"),dt(e.selectedDPData,function(t){var n=t.artifactName,a=gt(e.availableDS,function(t){return t.system.name===n});e.isJoinEligible=a.joinEligible,e.injectFieldProperties(a),dt(a.schema.fields,function(e){-1===bt(t.columns,[\"columnName\",e.columnName])&&t.columns.push(e)})})})},t.prototype.injectFieldProperties=function(t){var e=t.system.name;return t.schema.fields=V(t.schema.fields,function(t){var n=t.isKeyword?t.name+\".keyword\":t.name;return{aliasName:t.name,columnName:n,displayName:t.name,filterEligible:!0,joinEligible:!1,kpiEligible:!1,include:!1,name:t.name,table:e,type:z[ct(t.type)]}}),t},t.prototype.updateSemantic=function(){var t=this;this.selectedDPDetails.artifacts=[],dt(this.selectedDPData,function(e){t.selectedDPDetails.artifacts.push({artifactName:e.artifactName,columns:st(e.columns,\"include\")})}),this.workBench.updateSemanticDetails(this.selectedDPDetails).subscribe(function(e){t.notify.info(\"Datapod Updated successfully\",\"Datapod\",{hideDelay:9e3}),t.router.navigate([\"workbench\",\"dataobjects\"])})},t=a.c([Object(o.Component)({selector:\"update-semantic\",template:n(\"KeS2\"),styles:[n(\"wSwp\")]}),a.f(\"design:paramtypes\",[m.Router,P,O.a])],t)}(),yt=n(\"vARd\"),wt=n(\"67Y/\"),St=n(\"2WpN\"),Ct=function(){function t(t,e){this.http=t,this.jwt=e,this.api=v(N.a,\"api.url\"),this.isDuplicateChannel=this.isDuplicateChannel.bind(this),this.isDuplicateRoute=this.isDuplicateRoute.bind(this)}return t.prototype.getSourceList=function(){return this.http.get(this.api+\"/ingestion/batch/channels?size=10000\").pipe(Object(T.a)(this.handleError(\"data\",{})))},t.prototype.getRoutesList=function(t){return this.http.get(this.api+\"/ingestion/batch/channels/\"+t+\"/routes?size=10000\").pipe(Object(T.a)(this.handleError(\"data\",{})))},t.prototype.getRoutesLogs=function(t,e){return this.http.get(this.api+\"/ingestion/batch/logs/\"+t+\"/\"+e).pipe(Object(T.a)(this.handleError(\"data\",{})))},t.prototype.isDuplicateChannel=function(t){var e=this.api+\"/ingestion/batch/channels/duplicate?channelName=\"+t;return this.http.get(e).pipe(Object(wt.a)(function(t){return v(t,\"isDuplicate\")}),Object(T.a)(this.handleError(\"data\",!1)))},t.prototype.activateRoute=function(t,e){return this.toggleRoute(t,e,!1)},t.prototype.deActivateRoute=function(t,e){return this.toggleRoute(t,e,!1)},t.prototype.toggleRoute=function(t,e,n){var a=this.api+\"/ingestion/batch/channels/\"+t+\"/routes/\"+e+\"/\"+(n?\"activate\":\"deactivate\"),o={channelId:t,routeId:e};return this.http.put(a,o).pipe(Object(T.a)(this.handleError(\"data\",{})))},t.prototype.activateChannel=function(t){return this.toggleChannel(t,!0)},t.prototype.deActivateChannel=function(t){return this.toggleChannel(t,!1)},t.prototype.toggleChannel=function(t,e){var n=this.api+\"/ingestion/batch/channels/\"+t+\"/\"+(e?\"activate\":\"deactivate\"),a={channelId:t};return this.http.put(n,a).pipe(Object(T.a)(this.handleError(\"data\",{})))},t.prototype.isDuplicateRoute=function(t){var e=t.channelId,n=t.routeName,a=this.api+\"/ingestion/batch/channels/\"+e+\"/duplicate-route?routeName=\"+n;return this.http.get(a).pipe(Object(wt.a)(function(t){return v(t,\"isDuplicate\")}),Object(T.a)(this.handleError(\"data\",!1)))},t.prototype.deleteChannel=function(t){return this.http.delete(this.api+\"/ingestion/batch/channels/\"+t).pipe(Object(T.a)(this.handleError(\"data\",{})))},t.prototype.updateSource=function(t,e){e.modifiedBy=this.jwt.getUserName();var n=this.api+\"/ingestion/batch/channels/\"+t;return this.http.put(n,e).pipe(Object(T.a)(this.handleError(\"data\",{})))},t.prototype.createSource=function(t){t.customerCode=this.jwt.customerCode,t.createdBy=this.jwt.getUserName(),t.projectCode=\"workbench\",t.productCode=this.jwt.getProductName();var e=this.api+\"/ingestion/batch/channels\";return this.http.post(e,t).pipe(Object(T.a)(this.handleError(\"data\",{})))},t.prototype.createRoute=function(t,e){e.createdBy=this.jwt.getUserName();var n=this.api+\"/ingestion/batch/channels/\"+t+\"/routes\";return this.http.post(n,e).pipe(Object(T.a)(this.handleError(\"data\",{})))},t.prototype.updateRoute=function(t,e,n){n.modifiedBy=this.jwt.getUserName();var a=this.api+\"/ingestion/batch/channels/\"+t+\"/routes/\"+e;return this.http.put(a,n).pipe(Object(T.a)(this.handleError(\"data\",{})))},t.prototype.deleteRoute=function(t,e){return this.http.delete(this.api+\"/ingestion/batch/channels/\"+t+\"/routes/\"+e).pipe(Object(T.a)(this.handleError(\"data\",{})))},t.prototype.encryptPWD=function(t){var e=this.api+\"/ingestion/batch/internal/encrypt\";return this.http.post(e,JSON.stringify(t)).pipe(Object(T.a)(this.handleError(\"data\",{})))},t.prototype.decryptPWD=function(t){var e=this.api+\"/ingestion/batch/internal/decrypt\";return this.http.post(e,JSON.stringify(t)).pipe(Object(T.a)(this.handleError(\"data\",{})))},t.prototype.testChannel=function(t){return this.http.get(this.api+\"/ingestion/batch/sftp/channels/\"+t+\"/status\").pipe(Object(T.a)(this.handleError(\"data\",{})))},t.prototype.testRoute=function(t){return this.http.get(this.api+\"/ingestion/batch/sftp/routes/\"+t+\"/status\").pipe(Object(T.a)(this.handleError(\"data\",{})))},t.prototype.testChannelWithBody=function(t){var e=this.api+\"/ingestion/batch/sftp/channels/test\";return this.http.post(e,t).pipe(Object(T.a)(this.handleError(\"data\",{})))},t.prototype.testRouteWithBody=function(t){var e=this.api+\"/ingestion/batch/sftp/routes/test\";return this.http.post(e,t).pipe(Object(T.a)(this.handleError(\"data\",{})))},t.prototype.handleError=function(t,e){return void 0===t&&(t=\"operation\"),function(t){return Object(F.a)(e)}},t=a.c([Object(o.Injectable)({providedIn:\"root\"}),a.f(\"design:paramtypes\",[D.HttpClient,I.k])],t)}(),Dt=n(\"7qNs\"),Ft=n(\"15JJ\"),Tt=function(t,e,n){return void 0===e&&(e=function(t){return t}),function(a){return Object(x.a)(500).pipe(Object(Ft.a)(function(){var o=ut(a.value);if(!o||n&&n===o)return Object(F.a)(null);var i={isUnique:!0},r=e(o);return t(r).pipe(Object(wt.a)(function(t){return t?i:null}))}))}},It=function(){function t(t,e){this.snackBarRef=t,this.logData=e}return t.prototype.ngOnInit=function(){this.typeMessage(this.logData,this.screen.nativeElement)},t.prototype.close=function(){this.snackBarRef.dismiss()},t.prototype.typeMessage=function(t,e){if(t&&t.length&&e instanceof Element){\"string\"!=typeof t&&(t=t.join(\"\\n\")),t=t.replace(/\\r\\n?/g,\"\\n\").split(\"\");var n=e.lastChild;n.className=\"typing\";var a=function(){var o=t.shift();e.insertBefore(\"\\n\"===o?document.createElement(\"br\"):document.createTextNode(o),n),t.length?setTimeout(a,10):n.className=\"idle\"};setTimeout(a,10)}},a.c([Object(o.ViewChild)(\"screen\"),a.f(\"design:type\",Object)],t.prototype,\"screen\",void 0),t=a.c([Object(o.Component)({selector:\"test-connectivity\",template:n(\"qV4h\"),styles:[n(\"0tXz\")]}),a.g(1,Object(o.Inject)(yt.a)),a.f(\"design:paramtypes\",[yt.h,Object])],t)}(),Lt=function(){function t(t,e,n,a,o){this._formBuilder=t,this.dialogRef=e,this.snackBar=n,this.datasourceService=a,this.channelData=o,this.selectedSource=\"\",this.sources=_,this.opType=\"create\",this.show=!1,this.dialogTitle=\"Create Data Channel\",this.selectedStepIndex=0,this.isTypeEditable=!0,C(this.channelData.length)&&(this.opType=\"update\",this.isTypeEditable=!1,this.dialogTitle=\"Edit Channel\",this.selectedStepIndex=1,this.selectedSource=this.channelData.channelType),this.createForm(),C(this.channelData.length)&&(this.firstStep.patchValue(this.channelData),this.detailsFormGroup.patchValue(this.channelData))}return t.prototype.createForm=function(){this.firstStep=this._formBuilder.group({channelType:[\"\",l.Validators.required]});var t=\"update\"===this.opType?this.channelData.channelName:\"\";this.detailsFormGroup=this._formBuilder.group({channelName:[\"\",l.Validators.required,Tt(this.datasourceService.isDuplicateChannel,function(t){return t},t)],hostName:[\"\",l.Validators.required],portNo:[\"\",l.Validators.compose([l.Validators.required,l.Validators.pattern(\"^[0-9]*$\")])],userName:[\"\",l.Validators.required],password:[\"\",l.Validators.required],description:[\"\"],accessType:[\"R\",l.Validators.required]})},t.prototype.sourceSelected=function(t){t.supported&&(this.selectedSource=t.uid,this.firstStep.controls.channelType.reset(t.uid))},t.prototype.createSource=function(t){var e=this.mapData(t);this.dialogRef.close({sourceDetails:e,opType:this.opType})},t.prototype.mapData=function(t){return{channelName:t.channelName,channelType:this.selectedSource,hostName:t.hostName,portNo:t.portNo,accessType:t.accessType,userName:t.userName,password:t.password,description:t.description}},t.prototype.onCancelClick=function(){this.dialogRef.close()},t.prototype.togglePWD=function(){this.show=!this.show},t.prototype.testChannel=function(t){var e=this,n={channelType:this.selectedSource,hostName:t.hostName,password:t.password,portNo:t.portNo,userName:t.userName};this.datasourceService.testChannelWithBody(n).subscribe(function(t){e.showConnectivityLog(t)})},t.prototype.showConnectivityLog=function(t){var e=this;this.dialogRef.updatePosition({top:\"30px\"}),this.snackBar.openFromComponent(It,{data:t,horizontalPosition:\"center\",panelClass:[\"mat-elevation-z9\",\"testConnectivityClass\"]}).afterDismissed().subscribe(function(){e.dialogRef.updatePosition({top:\"\"})})},t=a.c([Object(o.Component)({selector:\"createsource-dialog\",template:n(\"be2+\"),styles:[n(\"4xxA\")]}),a.g(4,Object(o.Inject)(g.a)),a.f(\"design:paramtypes\",[l.FormBuilder,g.n,yt.d,Ct,Object])],t)}(),kt=n(\"ijCd\"),Et=n(\"Xdxp\"),Nt=function(){function t(t,e){this.dialogRef=t,this.workBench=e,this.selectedPath=\"\",this.rootNode=B,this.fileSystemAPI={getDir:this.workBench.getStagingData,createDir:this.workBench.createFolder}}return t.prototype.onFolderSelected=function(t){var e=t.folder;switch(e.path){case\"root\":this.selectedPath=\"/\";break;case\"/\":this.selectedPath=\"/\"+e.name;break;default:this.selectedPath=e.path+\"/\"+e.name}},t.prototype.onNoClick=function(){this.dialogRef.close()},t.prototype.onYesClick=function(){var t=Et(this.selectedPath,\"//\")?H(this.selectedPath,\"/\",\"\"):this.selectedPath;this.dialogRef.close(t)},t=a.c([Object(o.Component)({selector:\"select-folder-dialog\",template:n(\"dVtd\")}),a.f(\"design:paramtypes\",[g.n,P])],t)}(),Pt=n(\"wd/R\"),Ot=function(){function t(t,e,n,a,o,i){this._formBuilder=t,this.dialogRef=e,this.snackBar=n,this.datasourceService=a,this._dialog=o,this.routeData=i,this.crondetails={},this.opType=\"create\",this.channelName=\"\",this.isCronExpressionValid=!1,this.startDateCorrectFlag=!0,this.channelName=this.routeData.channelName,C(this.routeData.routeMetadata.length)&&(this.opType=\"update\"),this.createForm(),C(this.routeData.routeMetadata.length)&&(this.detailsFormGroup.patchValue(this.routeData.routeMetadata),this.crondetails=this.routeData.routeMetadata.schedulerExpression)}return t.prototype.createForm=function(){var t=this.routeData.channelID,e=\"update\"===this.opType?this.routeData.routeMetadata.routeName:\"\";this.detailsFormGroup=this._formBuilder.group({routeName:[\"\",l.Validators.required,Tt(this.datasourceService.isDuplicateRoute,function(e){return{channelId:t,routeName:e}},e)],sourceLocation:[\"\",l.Validators.required],destinationLocation:[\"\",l.Validators.required],filePattern:[\"\",[l.Validators.required,this.validateFilePattern]],description:[\"\"],disableDuplicate:[!1],batchSize:[\"\",[l.Validators.required]],fileExclusions:[\"\",this.validatefileExclusion]})},t.prototype.onCancelClick=function(){this.dialogRef.close()},t.prototype.validateFilePattern=function(t){return kt(t.value,\",\")?{inValidPattern:!0}:null},t.prototype.validatefileExclusion=function(t){return kt(t.value,\",\")||kt(t.value,\".\")?{inValidPattern:!0}:null},t.prototype.testRoute=function(t){var e=this,n={channelType:\"sftp\",channelId:this.routeData.channelID,sourceLocation:t.sourceLocation,destinationLocation:t.destinationLocation};this.datasourceService.testRouteWithBody(n).subscribe(function(t){e.showConnectivityLog(t)})},t.prototype.showConnectivityLog=function(t){var e=this;this.dialogRef.updatePosition({top:\"30px\"}),this.snackBar.openFromComponent(It,{data:t,horizontalPosition:\"center\",panelClass:[\"mat-elevation-z9\",\"testConnectivityClass\"]}).afterDismissed().subscribe(function(){e.dialogRef.updatePosition({top:\"\"})})},t.prototype.onCronChanged=function(t){this.crondetails=t,this.isCronExpressionValid=!(nt(t.cronexp)&&\"immediate\"!==t.activeTab)},t.prototype.createRoute=function(t){if(this.startDateCorrectFlag=\"immediate\"===this.crondetails.activeTab||Pt(this.crondetails.startDate)>Pt(),!this.startDateCorrectFlag)return!1;var e=this.mapData(t);this.dialogRef.close({routeDetails:e,opType:this.opType})},t.prototype.mapData=function(t){return{routeName:t.routeName,sourceLocation:t.sourceLocation,destinationLocation:t.destinationLocation,filePattern:t.filePattern,schedulerExpression:this.crondetails,description:t.description,disableDuplicate:t.disableDuplicate,batchSize:t.batchSize,fileExclusions:t.fileExclusions}},t.prototype.openSelectSourceFolderDialog=function(){var t=this;this._dialog.open(Nt,{hasBackdrop:!0,autoFocus:!1,closeOnNavigation:!0,height:\"400px\",width:\"300px\"}).afterClosed().subscribe(function(e){t.detailsFormGroup.controls.destinationLocation.setValue(e)})},t=a.c([Object(o.Component)({selector:\"create-route-dialog\",template:n(\"fl9l\"),styles:[n(\"nI8U\")]}),a.g(5,Object(o.Inject)(g.a)),a.f(\"design:paramtypes\",[l.FormBuilder,g.n,yt.d,Ct,g.g,Object])],t)}(),At=function(){function t(t,e){this.dialogRef=t,this.data=e}return t.prototype.ngOnInit=function(){},t.prototype.onNoClick=function(){this.dialogRef.close(!1)},t.prototype.onYesClick=function(){this.dialogRef.close(!0)},t=a.c([Object(o.Component)({selector:\"confirm-action-dialog\",template:n(\"R35o\"),styles:[n(\"vJzd\")]}),a.g(1,Object(o.Inject)(g.a)),a.f(\"design:paramtypes\",[g.n,Object])],t)}(),Rt=function(){function t(t,e,n){this._dialogRef=t,this._datasourceService=e,this.routeData=n}return t.prototype.ngOnInit=function(){var t=this,e=this.routeData,n=e.bisChannelSysId,a=e.bisRouteSysId;this._datasourceService.getRoutesLogs(n,a).subscribe(function(e){t.logs=e.logs,t.lastFireTime=e.lastFireTime,t.nextFireTime=e.nextFireTime})},t.prototype.close=function(){this._dialogRef.close()},t.prototype.getSchedule=function(t){var e=t.cronexp,n=t.activeTab,a=t.timezone;return Object(Dt.a)(e,n,a)},t.prototype.customGridHeight=function(){var t=document.getElementById(\"route-log__dialog-content-container\");return t.scrollHeight-t.children[0].scrollHeight},t=a.c([Object(o.Component)({selector:\"logs-dialog\",template:n(\"BRvR\"),styles:[n(\"5NSV\")]}),a.g(2,Object(o.Inject)(g.a)),a.f(\"design:paramtypes\",[g.n,Ct,Object])],t)}(),jt=n(\"j+1e\"),Gt=n(\"dMi0\"),Mt=function(){function t(t,e,n,a){this.dialog=t,this.datasourceService=e,this.notify=n,this.snackBar=a,this.unFilteredSourceData=[],this.routesData=[],this.sourceData=[],this.sourceTypes=_,this.channelToggleRequestPending=!1,this.show=!1,this.channelEditable=!1}return t.prototype.ngOnInit=function(){this.getSources()},t.prototype.ngOnDestroy=function(){},t.prototype.getSources=function(){var t=this;this.datasourceService.getSourceList().pipe(Object(wt.a)(function(t){return V(t,function(t){return a.a({},t,JSON.parse(t.channelMetadata))})})).subscribe(function(e){t.unFilteredSourceData=e,t.countSourceByType(t.unFilteredSourceData)})},t.prototype.countSourceByType=function(t){var e=jt(t,\"channelType\");this.selectedSourceType=Gt(e),this.filterSourcesByType(t,this.selectedSourceType),S(this.sourceTypes,function(t){var n=v(e,t.uid);t.count=C(n)?0:n,t.color=t.count>0?\"primary\":\"warn\"})},t.prototype.filterSourcesByType=function(t,e){if(this.sourceData=st(t,[\"channelType\",e]),this.sourceData.length>0){var n=this.sourceData[0].bisChannelSysId;if(this.selectedSourceData){var a=this.selectedSourceData.bisChannelSysId;gt(this.sourceData,function(t){return t.bisChannelSysId===a})?this.selectSingleChannel(a):this.selectSingleChannel(n)}else this.selectSingleChannel(n)}},t.prototype.selectSingleChannel=function(t){var e=this;setTimeout(function(){e.channelsGrid.instance.deselectAll(),e.channelsGrid.instance.selectRows([t],!1),e.getRoutesForChannel(t)})},t.prototype.onSourceSelectionChanged=function(t){!C(t.currentDeselectedRowKeys[0])&&t.selectedRowKeys.length>0?(this.channelEditable=!0,this.selectChannel(t.selectedRowsData[0]),this.channelToggleRequestPending||this.getRoutesForChannel(t.selectedRowKeys[0])):t.selectedRowKeys.length>0?(this.channelEditable=!0,this.selectChannel(t.selectedRowsData[0])):(this.channelEditable=!1,this.selectChannel(null),this.routesData=[])},t.prototype.selectChannel=function(t){this.selectedSourceData=t},t.prototype.sourceSelectedType=function(t,e){e>0&&(this.filterSourcesByType(this.unFilteredSourceData,t),this.selectedSourceType=t)},t.prototype.createSource=function(t){var e=this,n=C(t)?[]:JSON.parse(t.channelMetadata);this.dialog.open(Lt,{hasBackdrop:!0,autoFocus:!1,closeOnNavigation:!0,disableClose:!0,height:\"60%\",width:\"70%\",minWidth:\"750px\",minHeight:\"600px\",maxWidth:\"900px\",panelClass:\"sourceDialogClass\",data:n}).afterClosed().subscribe(function(n){if(!C(n)){var a={createdBy:\"\",productCode:\"\",projectCode:\"\",customerCode:\"\",channelType:n.sourceDetails.channelType,channelMetadata:JSON.stringify(n.sourceDetails)};\"create\"===n.opType?e.datasourceService.createSource(a).subscribe(function(){e.getSources()}):(a.createdBy=t.createdBy,a.productCode=t.productCode,a.projectCode=t.projectCode,a.customerCode=t.customerCode,a.status=t.status?1:0,e.datasourceService.updateSource(t.bisChannelSysId,a).subscribe(function(){e.getSources()}))}})},t.prototype.deleteChannel=function(t){var e=this;this.dialog.open(At,{width:\"350px\",data:{typeTitle:\"Channel Name\",typeName:this.selectedSourceData.channelName,routesNr:this.routesData.length}}).afterClosed().subscribe(function(n){n&&e.datasourceService.deleteChannel(t).subscribe(function(){e.notify.success(\"Channel deleted successfully\"),e.getSources()})})},t.prototype.testChannel=function(t){var e=this;this.datasourceService.testChannel(t).subscribe(function(t){e.showConnectivityLog(t)})},t.prototype.testRoute=function(t){var e=this,n=t.bisRouteSysId;this.datasourceService.testRoute(n).subscribe(function(t){e.showConnectivityLog(t)})},t.prototype.showConnectivityLog=function(t){this.snackBar.openFromComponent(It,{data:t,horizontalPosition:\"center\",panelClass:[\"mat-elevation-z9\",\"testConnectivityClass\"]})},t.prototype.onToolbarPreparing=function(t){t.toolbarOptions.items.unshift({location:\"before\",template:\"sourceTypeTemplate\"})},t.prototype.onRoutesToolbarPreparing=function(t){t.toolbarOptions.items.unshift({location:\"before\",template:\"nameTemplate\"})},t.prototype.getRoutesForChannel=function(t){var e=this;this.datasourceService.getRoutesList(t).pipe(Object(wt.a)(function(t){return V(t,function(t){return a.a({},t,JSON.parse(t.routeMetadata))})})).subscribe(function(t){e.routesData=t})},t.prototype.createRoute=function(t){var e=this,n=C(t.routeMetadata)?[]:JSON.parse(t.routeMetadata);this.dialog.open(Ot,{hasBackdrop:!0,autoFocus:!1,closeOnNavigation:!0,disableClose:!0,height:\"60%\",width:\"70%\",minWidth:\"750px\",minHeight:\"600px\",maxWidth:\"900px\",panelClass:\"sourceDialogClass\",data:{routeMetadata:n,channelID:this.selectedSourceData.bisChannelSysId,channelName:this.selectedSourceData.channelName}}).afterClosed().subscribe(function(n){if(!C(n)){var a={createdBy:\"\",routeMetadata:JSON.stringify(n.routeDetails)};\"create\"===n.opType?e.datasourceService.createRoute(t,a).subscribe(function(n){var a=e.afterRouteAddedChanged(n);a?a.then(function(){e.getRoutesForChannel(t)}):e.getRoutesForChannel(t)}):(a.createdBy=t.createdBy,a.status=t.status?1:0,e.datasourceService.updateRoute(t.bisChannelSysId,t.bisRouteSysId,a).subscribe(function(){e.getRoutesForChannel(t.bisChannelSysId)}))}})},t.prototype.afterRouteAddedChanged=function(t){var e=t.bisChannelSysId,n=t.bisRouteSysId,a=this.selectedSourceData.bisChannelSysId;if(0===this.selectedSourceData.status&&e===a)return this.datasourceService.toggleRoute(e,n,!1).toPromise()},t.prototype.deleteRoute=function(t){var e=this;this.dialog.open(At,{width:\"350px\",data:{typeTitle:\"Route Name\",typeName:t.routeName}}).afterClosed().subscribe(function(n){if(n){var a=t.bisChannelSysId,o=t.bisRouteSysId;e.datasourceService.deleteRoute(a,o).subscribe(function(){e.getRoutesForChannel(a)})}})},t.prototype.calculateScheduleCellValue=function(t){var e=t.schedulerExpression,n=e.cronexp,a=e.activeTab,o=e.timezone;return Object(Dt.a)(n,a,o)},t.prototype.togglePWD=function(){this.show=!this.show},t.prototype.openLogsDialog=function(t){this.dialog.open(Rt,{hasBackdrop:!0,autoFocus:!1,closeOnNavigation:!0,disableClose:!0,height:\"80vh\",width:\"80vw\",panelClass:\"sourceDialogClass\",data:a.a({},t,{channelName:this.selectedSourceData.channelName})})},t.prototype.toggleRouteActivation=function(t){var e=this,n=t.bisChannelSysId,a=t.bisRouteSysId,o=t.status;this.datasourceService.toggleRoute(n,a,!o).subscribe(function(){t.status=e.reverseStatus(o)})},t.prototype.toggleChannelActivation=function(t){var e=this,n=t.status;this.channelToggleRequestPending=!0,this.datasourceService.toggleChannel(t.bisChannelSysId,!n).pipe(Object(St.a)(function(){e.channelToggleRequestPending=!1})).subscribe(function(){e.channelToggleRequestPending=!1,t.status=e.reverseStatus(n),e.getRoutesForChannel(t.bisChannelSysId)})},t.prototype.toggleAllRoutesOnFrontEnd=function(t){S(this.routesData,function(e){e.status=t})},t.prototype.reverseStatus=function(t){return 1===t?0:1},a.c([Object(o.ViewChild)(\"channelsGrid\"),a.f(\"design:type\",c.DxDataGridComponent)],t.prototype,\"channelsGrid\",void 0),t=a.c([Object(o.Component)({selector:\"datasource-page\",template:n(\"69C/\"),styles:[n(\"9l9C\")]}),a.f(\"design:paramtypes\",[g.g,Ct,O.a,yt.d])],t)}(),Bt=n(\"kuDi\"),zt=n(\"wUHB\"),_t=[{path:\"\",canActivate:[Bt.b],canActivateChild:[Bt.b],component:f,runGuardsAndResolvers:\"paramsOrQueryParamsChange\",children:[{path:\"dataobjects\",component:R},{path:\"dataset/add\",component:tt},{path:\"create/sql\",component:it},{path:\"dataset/details\",component:rt},{path:\"semantic/create\",component:lt},{path:\"semantic/validate\",component:ft},{path:\"semantic/update\",component:vt},{path:\"datasource/create\",component:Mt,canActivate:[zt.b]},{path:\"\",pathMatch:\"full\",redirectTo:\"datasource/create\"}]}],qt=n(\"Gi3i\"),Vt=function(){function t(t,e,n,a){this.dialog=t,this.dxDataGrid=e,this.workBench=n,this.notify=a,this.selFiles=[],this.fileMask=\"\",this.fileMaskControl=new l.FormControl(\"\",l.Validators.required),this.currentPath=\"\",this.nodeID=\"\",this.onSelectFullfilled=new o.EventEmitter,this.fileSystemAPI={getDir:this.workBench.getStagingData,createDir:this.workBench.createFolder}}return t.prototype.ngOnInit=function(){this.treeNodes=j(B),this.gridConfig=this.getGridConfig()},t.prototype.ngAfterViewInit=function(){var t=this;this.getPageData(),this.dataGrid.instance.option(this.gridConfig),this.fileMaskControl.valueChanges.pipe(Object(qt.a)(1e3)).subscribe(function(e){return t.maskSearch(e)})},t.prototype.ngOnDestroy=function(){this.treeNodes=[]},t.prototype.getPageData=function(){var t=this;this.workBench.getStagingData(\"/\").subscribe(function(e){var n=st(e.data,[\"isDirectory\",!1]);t.reloadDataGrid(n)})},t.prototype.onFolderSelected=function(t){var e=t.files;this.reloadDataGrid(e),this.clearSelected()},t.prototype.onUpdate=function(t){var e=this;setTimeout(function(){e.reloadDataGrid(t)})},t.prototype.getGridConfig=function(){var t=this;return this.dxDataGrid.mergeWithDefaultConfig({columns:[{caption:\"File\",dataField:\"name\",dataType:\"string\",cellTemplate:\"dobjTemplate\",width:\"66%\",allowSorting:!0,sortOrder:\"asc\"},{dataField:\"size\",caption:\"Size\",width:\"15%\",dataType:\"number\",cellTemplate:\"sizeTemplate\",allowSorting:!0},{dataField:\"name\",caption:\"Preview\",alignment:\"right\",width:\"14%\",allowFiltering:!1,cellTemplate:\"actionsTemplate\"}],dataSource:[],searchPanel:{visible:!1,width:240,placeholder:\"Search...\"},height:\"100%\",scrolling:{showScrollbar:\"always\",mode:\"virtual\",useNative:!1},sorting:{mode:\"multiple\"},filterRow:{visible:!0,applyFilter:\"auto\"},headerFilter:{visible:!1},showRowLines:!1,showBorders:!1,rowAlternationEnabled:!0,showColumnLines:!1,selection:{mode:\"single\"},onSelectionChanged:function(e){var n=e.selectedRowsData[0];n&&(t.filePath=n.path+\"/\"+n.name,t.fileMask=n.name,t.fileMaskControl.setValue(t.fileMask)),t.selFiles=[],t.selFiles=e.selectedRowsData}})},t.prototype.reloadDataGrid=function(t){this.dataGrid.instance.option(\"dataSource\",t),this.dataGrid.instance.refresh()},t.prototype.maskSearch=function(t){this.fileMask=this.fileMaskControl.value;var e=this.dataGrid.instance.option(\"dataSource\");this.selFiles=this.workBench.filterFiles(t,e),this.selFiles.length>0?(this.filePath=this.selFiles[0].path+\"/\"+this.fileMask,this.onSelectFullfilled.emit({selectFullfilled:!0,selectedFiles:this.selFiles,filePath:this.filePath})):this.onSelectFullfilled.emit({selectFullfilled:!1,selectedFiles:this.selFiles,filePath:this.filePath})},t.prototype.clearSelected=function(){this.selFiles=[],this.fileMask=\"\"},t.prototype.previewDialog=function(t){var e=this,n=this.currentPath+\"/\"+t;this.workBench.getRawPreviewData(n).subscribe(function(n){e.dialog.open(X,{minHeight:500,minWidth:600,data:{title:t,rawData:n.data}})})},t.prototype.fileInput=function(t){var e=this,n=t.srcElement.files,a=this.workBench.validateMaxSize(n),o=this.workBench.validateFileTypes(n);if(a&&o){var i=this.currentPath;this.workBench.uploadFile(n,i).subscribe(function(t){var n=st(t.data,[\"isDirectory\",!1]);e.reloadDataGrid(n),e.clearSelected()})}else this.notify.warn('Only \".csv\" or \".txt\" extension files are supported',\"Unsupported file type\")},a.c([Object(o.ViewChild)(c.DxDataGridComponent),a.f(\"design:type\",c.DxDataGridComponent)],t.prototype,\"dataGrid\",void 0),a.c([Object(o.Output)(),a.f(\"design:type\",o.EventEmitter)],t.prototype,\"onSelectFullfilled\",void 0),t=a.c([Object(o.Component)({selector:\"select-rawdata\",template:n(\"X4Nr\"),styles:[n(\"EZzP\")]}),a.f(\"design:paramtypes\",[g.g,Y.a,P,O.a])],t)}(),Ht=function(){function t(t){this.dxDataGrid=t,this.fullScreen=!1,this.onToggleScreenMode=new o.EventEmitter}return t.prototype.ngOnInit=function(){var t=this;this.gridConfig=this.getGridConfig(),this.updaterSubscribtion=this.updater.subscribe(function(e){t.onUpdate(e)})},t.prototype.ngAfterViewInit=function(){this.dataGrid.instance.option(this.gridConfig)},t.prototype.ngOnDestroy=function(){this.updaterSubscribtion.unsubscribe()},t.prototype.onUpdate=function(t){var e=this;setTimeout(function(){e.reloadDataGrid(t)})},t.prototype.getGridConfig=function(){return this.dxDataGrid.mergeWithDefaultConfig({dataSource:[],columnAutoWidth:!1,wordWrapEnabled:!1,searchPanel:{visible:!0,width:240,placeholder:\"Search...\"},height:\"100%\",width:\"100%\",filterRow:{visible:!0,applyFilter:\"auto\"},headerFilter:{visible:!0},sorting:{mode:\"none\"},export:{fileName:\"Preview_Sample\",enabled:!1},scrolling:{showScrollbar:\"always\",mode:\"virtual\",useNative:!1},showRowLines:!1,showBorders:!1,rowAlternationEnabled:!1,showColumnLines:!0,selection:{mode:\"none\"},onToolbarPreparing:function(t){t.toolbarOptions.items.unshift({location:\"before\",template:\"toggleViewTemplate\"})}})},t.prototype.reloadDataGrid=function(t){this.dataGrid.instance.option(\"dataSource\",t),this.dataGrid.instance.refresh(),this.dataGrid.instance.endCustomLoading()},t.prototype.togglePreview=function(t){var e=this;this.fullScreen=t,this.onToggleScreenMode.emit(t),setTimeout(function(){e.dataGrid.instance.refresh()},100)},a.c([Object(o.Input)(),a.f(\"design:type\",b.a)],t.prototype,\"updater\",void 0),a.c([Object(o.ViewChild)(c.DxDataGridComponent),a.f(\"design:type\",c.DxDataGridComponent)],t.prototype,\"dataGrid\",void 0),a.c([Object(o.Output)(),a.f(\"design:type\",o.EventEmitter)],t.prototype,\"onToggleScreenMode\",void 0),t=a.c([Object(o.Component)({selector:\"sqlpreview-grid-page\",template:n(\"EMm7\"),styles:[\":host {\\n    width: 100%;\\n    height: 100%;\\n  }\"]}),a.f(\"design:paramtypes\",[Y.a])],t)}(),Ut=function(){function t(t,e){this.dialog=t,this.workbench=e,this.dataPods=[]}return t.prototype.ngOnInit=function(){var t=this;this.updaterSubscribtion=this.updater.subscribe(function(e){t.onUpdate(e)})},t.prototype.ngOnDestroy=function(){this.updaterSubscribtion.unsubscribe()},t.prototype.onUpdate=function(t){this.dataPods=t,setTimeout(function(){},1e3)},t.prototype.viewDetails=function(t){},a.c([Object(o.Input)(),a.f(\"design:type\",String)],t.prototype,\"searchTerm\",void 0),a.c([Object(o.Input)(),a.f(\"design:type\",b.a)],t.prototype,\"updater\",void 0),t=a.c([Object(o.Component)({selector:\"datapods-card-page\",template:n(\"RC7d\"),styles:[n(\"+Auh\")]}),a.f(\"design:paramtypes\",[g.g,P])],t)}(),Wt=function(){function t(){}return t.prototype.ngOnInit=function(){var t=this;this.updaterSubscribtion=this.updater.subscribe(function(e){t.onUpdate(e)})},t.prototype.ngOnDestroy=function(){this.updaterSubscribtion.unsubscribe()},t.prototype.onUpdate=function(t){var e=this;0!==t.length&&setTimeout(function(){e.reloadDataGrid(t)})},t.prototype.reloadDataGrid=function(t){this.gridData=t},t.prototype.viewDetails=function(t){},a.c([Object(o.Input)(),a.f(\"design:type\",String)],t.prototype,\"searchTerm\",void 0),a.c([Object(o.Input)(),a.f(\"design:type\",b.a)],t.prototype,\"updater\",void 0),t=a.c([Object(o.Component)({selector:\"datapods-grid-page\",template:n(\"XpIw\"),styles:[n(\"axgg\")]})],t)}(),Jt=function(){function t(t,e){this.dialog=t,this.workbench=e,this.dataSets=[]}return t.prototype.ngOnInit=function(){var t=this;this.updaterSubscribtion=this.updater.subscribe(function(e){t.onUpdate(e)})},t.prototype.ngOnDestroy=function(){this.updaterSubscribtion.unsubscribe()},t.prototype.onUpdate=function(t){this.dataSets=t},t.prototype.viewDetails=function(t){this.workbench.navigateToDetails(t)},a.c([Object(o.Input)(),a.f(\"design:type\",String)],t.prototype,\"searchTerm\",void 0),a.c([Object(o.Input)(),a.f(\"design:type\",b.a)],t.prototype,\"updater\",void 0),t=a.c([Object(o.Component)({selector:\"datasets-card-page\",template:n(\"GKfJ\"),styles:[n(\"ivcI\")]}),a.f(\"design:paramtypes\",[g.g,P])],t)}(),Yt=function(){function t(t,e){this.dxDataGrid=t,this.workbench=e}return t.prototype.ngOnInit=function(){var t=this;this.gridConfig=this.getGridConfig(),this.updaterSubscribtion=this.updater.subscribe(function(e){t.onUpdate(e)})},t.prototype.ngAfterViewInit=function(){this.dataGrid.instance.option(this.gridConfig)},t.prototype.ngOnDestroy=function(){this.updaterSubscribtion.unsubscribe()},t.prototype.onUpdate=function(t){var e=this;setTimeout(function(){e.reloadDataGrid(t)})},t.prototype.getGridConfig=function(){return this.dxDataGrid.mergeWithDefaultConfig({columns:[{caption:\"Data Set Name\",dataField:\"system.name\",alignment:\"left\",width:\"20%\",cellTemplate:\"nameCellTemplate\",cssClass:\"branded-column-name\"},{dataField:\"system.description\",caption:\"Description\",width:\"25%\",dataType:\"String\",cellTemplate:\"creatorCellTemplate\"},{caption:\"Size\",dataField:\"system.numberOfFiles\",dataType:\"number\",width:\"10%\"},{dataField:\"system.createdBy\",caption:\"Added By\",width:\"13%\",dataType:\"string\",cellTemplate:\"creatorCellTemplate\"},{dataField:\"dataPods.numberOfPods\",caption:\"Data Pods\",width:\"8%\",dataType:\"number\"},{dataField:\"system.modifiedTime\",caption:\"Last Updated\",cellTemplate:\"timecreatedCellTemplate\",width:\"12%\",dataType:\"date\",alignment:\"right\"},{dataField:\"asOfNow.status\",caption:\"Status\",width:\"7%\",alignment:\"center\"},{dataField:\"_id\",caption:\"Actions\",cellTemplate:\"actionsCellTemplate\",width:\"5%\"}],dataSource:[],height:\"100%\",width:\"100%\",headerFilter:{visible:!1},sorting:{mode:\"multiple\"},scrolling:{showScrollbar:\"always\",mode:\"virtual\",useNative:!1},filterRow:{visible:!1,applyFilter:\"auto\"},showRowLines:!1,showBorders:!1,rowAlternationEnabled:!0,showColumnLines:!1,hoverStateEnabled:!0})},t.prototype.reloadDataGrid=function(t){this.dataGrid.instance.option(\"dataSource\",t),this.dataGrid.instance.refresh()},t.prototype.viewDetails=function(t){this.workbench.navigateToDetails(t)},t.prototype.sizeCalculator=function(t){return t+\" B\"},a.c([Object(o.Input)(),a.f(\"design:type\",String)],t.prototype,\"searchTerm\",void 0),a.c([Object(o.Input)(),a.f(\"design:type\",b.a)],t.prototype,\"updater\",void 0),a.c([Object(o.ViewChild)(c.DxDataGridComponent),a.f(\"design:type\",c.DxDataGridComponent)],t.prototype,\"dataGrid\",void 0),t=a.c([Object(o.Component)({selector:\"datasets-grid-page\",template:n(\"LZA7\"),styles:[n(\"yPgJ\")]}),a.f(\"design:paramtypes\",[Y.a,P])],t)}(),Qt=function(){function t(t,e){this.router=t,this.workBench=e}return t.prototype.ngOnInit=function(){},t.prototype.openSQLEditor=function(){\"SUCCESS\"===this.dsMetadata.asOfNow.status&&(this.workBench.setDataToLS(\"dsMetadata\",this.dsMetadata),this.router.navigate([\"workbench\",\"create\",\"sql\"]))},a.c([Object(o.Input)(),a.f(\"design:type\",Object)],t.prototype,\"dsMetadata\",void 0),t=a.c([Object(o.Component)({selector:\"dataset-actions\",template:n(\"10fp\"),styles:[n(\"THpB\")]}),a.f(\"design:paramtypes\",[m.Router,P])],t)}(),$t=function(){function t(t,e){this.router=t,this.workBench=e}return t.prototype.ngOnInit=function(){},t.prototype.gotoEdit=function(){this.workBench.setDataToLS(\"dpID\",this.dpMetadata.id),this.router.navigate([\"workbench\",\"semantic\",\"update\"])},t.prototype.openSQLEditor=function(){\"SUCCESS\"===this.dpMetadata.asOfNow.status&&(this.workBench.setDataToLS(\"dpMetadata\",this.dpMetadata),this.router.navigate([\"workbench\",\"create\",\"sql\"]))},a.c([Object(o.Input)(),a.f(\"design:type\",Object)],t.prototype,\"dpMetadata\",void 0),t=a.c([Object(o.Component)({selector:\"datapod-actions\",template:n(\"1iBz\"),styles:[n(\"NwPg\")]}),a.f(\"design:paramtypes\",[m.Router,P])],t)}(),Kt=function(){function t(t,e){this._router=t,this._jwt=e}return t.prototype.canActivate=function(){var t=this,e=this._jwt.isAdmin()?\"datasource/create\":\"dataobjects\";return setTimeout(function(){return t._router.navigate([\"workbench\",e])}),!0},t=a.c([Object(o.Injectable)(),a.f(\"design:paramtypes\",[m.Router,I.k])],t)}(),Xt=n(\"R6jH\");n.d(e,\"WorkbenchModule\",function(){return ee});var Zt=[f,R,Jt,Yt,tt,Vt,Z,X,$,Q,Qt,it,at,Ht,ot,rt,lt,ft,ht,vt,Ut,Wt,$t,Mt,Rt,Lt,It,Ot,At,Nt],te=[Kt,zt.b],ee=function(){function t(){}return t=a.c([Object(o.NgModule)({imports:[i.CommonModule,l.FormsModule,r.a,l.ReactiveFormsModule,m.RouterModule.forChild(_t),c.DxDataGridModule,d.DxTemplateModule,s.FlexLayoutModule,p.b,u.b,Xt.b,h.AngularSplitModule.forChild()],declarations:Zt,entryComponents:Zt,providers:[te]})],t)}()},ivcI:function(t,e){t.exports=\":host {\\n  width: 100%;\\n  height: 100%;\\n  max-height: 100%; }\\n\\n.md-subhead {\\n  color: #1a89d4;\\n  font-weight: 600;\\n  text-transform: uppercase; }\\n\\n.btn-card2 {\\n  background-color: #636363 !important;\\n  color: #fff !important;\\n  padding: 2px 15px; }\\n\\n.branded-column-name {\\n  color: #0077be;\\n  font-weight: 600; }\\n\\n.ds-card {\\n  min-height: 220px;\\n  max-height: 220px;\\n  height: 220px !important; }\\n\\n.datasets-card {\\n  transition: box-shadow 0.5s;\\n  border-radius: 3px !important;\\n  background-color: #fff;\\n  border: solid 1px #d7eafa;\\n  padding: 3px !important;\\n  margin: 7px;\\n  height: 200px !important; }\\n\\n.datasets-card:hover {\\n    /* prettier-ignore */\\n    box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12) !important; }\\n\\n.datasets-card .mat-title {\\n    margin: 0 !important; }\\n\\n.datasets-card mat-card-header {\\n    padding: 6px; }\\n\\n.datasets-card mat-card-header .dataset-name {\\n      color: #0077be;\\n      font-weight: 300;\\n      font-size: 18px;\\n      -webkit-line-clamp: 1;\\n      overflow: hidden;\\n      text-overflow: ellipsis; }\\n\\n.datasets-card .status-icon {\\n    width: 30px; }\\n\\n.datasets-card .status-icon .mat-icon {\\n      font-size: 21px; }\\n\\n.datasets-card .mat-card-header-text {\\n    margin: 0 3px; }\\n\\n.datasets-card mat-card-content {\\n    padding: 16px;\\n    font-size: 14px; }\\n\\n.datasets-card span {\\n    word-wrap: break-word; }\\n\\n.datasets-card .descr {\\n    font-size: 13px;\\n    overflow: hidden;\\n    text-overflow: ellipsis;\\n    display: -webkit-box;\\n    line-height: 16px;\\n    max-height: 32px;\\n    min-height: 32px;\\n    -webkit-line-clamp: 2;\\n    /* number of lines to show */ }\\n\\n.datasets-card .descr > span {\\n      font-size: 12px; }\\n\\n.FAILED {\\n  border-left: 3px solid #ab0e27; }\\n\\n.SUCCESS {\\n  border-left: 3px solid #73b421; }\\n\\n.INIT {\\n  border-left: 3px solid #f07601; }\\n\"},\"j+1e\":function(t,e,n){var a=n(\"hypo\"),o=n(\"UMY1\"),i=Object.prototype.hasOwnProperty,r=o(function(t,e,n){i.call(t,n)?++t[n]:a(t,n,1)});t.exports=r},kL69:function(t,e){t.exports='<div fxLayout.gt-sm=\"row\" fxLayoutGap=\"20px\" class=\"data-details\">\\n  <div fxFlex=\"35\" fxShow fxHide.xs=\"true\" class=\"list-margin1\">\\n    <mat-list>\\n      <h3 class=\"list-header\" mat-subheader>Selected Files</h3>\\n      <mat-list-item class=\"list-items\" *ngFor=\"let file of selFiles; index as i\" (click)=\"previewDialog(file)\">\\n        <p mat-line>{{i + 1}}. &ensp; {{ file.name }}</p>\\n        <div class=\"icon-div\">\\n          <mat-icon fontIcon=\"icon-show\" mat-list-icon class=\"preview-icon\"></mat-icon>\\n        </div>\\n        <mat-divider></mat-divider>\\n      </mat-list-item>\\n    </mat-list>\\n  </div>\\n  <mat-card fxFlex>\\n    <mat-card-header class=\"headerGradient\">\\n      <mat-card-title class=\"headerText\">Details</mat-card-title>\\n    </mat-card-header>\\n    <mat-card-content class=\"form-div\">\\n      <form #datasetDetails novalidate [formGroup]=\"detailsFormGroup\" autocomplete=\"off\">\\n        <section class=\"input-section\">\\n          <mat-form-field class=\"margin20 select-form-field\" appearance=\"outline\">\\n            <mat-label>Data format type?</mat-label>\\n            <mat-select [(value)]=\"previewConfig.delimiterType\">\\n              <mat-option value=\"delimited\">Delimited</mat-option>\\n              <mat-option value=\"parquet\" disabled>Parquet</mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n          <mat-form-field class=\"margin20 select-form-field\" appearance=\"outline\">\\n            <mat-label>Header row present?</mat-label>\\n            <mat-select [(value)]=\"previewConfig.header\">\\n              <mat-option value=\"yes\">Yes</mat-option>\\n              <mat-option value=\"no\">No</mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n        </section>\\n        <section class=\"input-section\">\\n          <mat-form-field class=\"margin20\">\\n            <input matInput placeholder=\"Field Seperator\" name=\"fieldSeperator\" formControlName=\"fieldSeperatorControl\" required />\\n            <mat-error *ngIf=\"detailsFormGroup.controls.fieldSeperatorControl.hasError(\\'required\\')\">\\n              Field Seperator is\\n              <strong>required</strong>\\n            </mat-error>\\n          </mat-form-field>\\n          <mat-form-field class=\"margin20\">\\n            <input matInput type=\"number\" placeholder=\"Header Size\" name=\"hederSize\" formControlName=\"hederSizeControl\" required />\\n            <mat-error *ngIf=\"detailsFormGroup.controls.hederSizeControl.hasError(\\'required\\')\">\\n              Header Size is\\n              <strong>required</strong>\\n            </mat-error>\\n          </mat-form-field>\\n        </section>\\n        <section class=\"input-section\">\\n          <mat-form-field class=\"margin20\">\\n            <input matInput placeholder=\"Field names Line\" name=\"fieldNamesLine\" formControlName=\"fieldNamesLineControl\" />\\n            <mat-error *ngIf=\"detailsFormGroup.controls.fieldNamesLineControl.hasError(\\'required\\')\">\\n              Field names Line is\\n              <strong>required</strong>\\n            </mat-error>\\n          </mat-form-field>\\n          <mat-form-field class=\"margin20 select-form-field\" appearance=\"outline\">\\n            <mat-label>Line Seperator</mat-label>\\n            <mat-select [(value)]=\"lineSeperator\">\\n              <mat-option value=\"lineFeed\">Line Feed (\\\\n)</mat-option>\\n              <mat-option value=\"carriageReturn\">Carriage Return (\\\\r)</mat-option>\\n              <mat-option value=\"eol\">End of Line (\\\\r\\\\n)</mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n        </section>\\n        <section class=\"input-section\">\\n          <mat-form-field class=\"margin20\">\\n            <input matInput placeholder=\"Quote Character\" name=\"quoteChar\" formControlName=\"quoteCharControl\" />\\n            <mat-error *ngIf=\"detailsFormGroup.controls.quoteCharControl.hasError(\\'required\\')\">\\n              Quote Character is\\n              <strong>required</strong>\\n            </mat-error>\\n          </mat-form-field>\\n          <mat-form-field class=\"margin20\">\\n            <input matInput placeholder=\"Escape Character\" name=\"escapeChar\" formControlName=\"escapeCharControl\" />\\n            <mat-error *ngIf=\"detailsFormGroup.controls.escapeCharControl.hasError(\\'required\\')\">\\n              Quote Character is\\n              <strong>required</strong>\\n            </mat-error>\\n          </mat-form-field>\\n        </section>\\n        <section class=\"input-section\">\\n          <mat-form-field class=\"margin20\">\\n            <mat-chip-list #chipList>\\n              <mat-chip *ngFor=\"let format of previewConfig.dateFormats\" [selectable]=\"selectable\" [removable]=\"true\" (removed)=\"removeFormat(format)\">\\n                {{format}}\\n                <mat-icon fontIcon=\"icon-remove\" matChipRemove></mat-icon>\\n              </mat-chip>\\n              <input placeholder=\"Date Formats\" [matChipInputFor]=\"chipList\" [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\" matChipInputAddOnBlur=\"true\"\\n                (matChipInputTokenEnd)=\"addFormat($event)\" />\\n            </mat-chip-list>\\n          </mat-form-field>\\n        </section>\\n        <mat-divider></mat-divider>\\n        <section class=\"input-section\">\\n          <span fxFlex=\"20\">Sample Size</span>\\n          <mat-slider fxFlex placeholder=\"Rows To Inspect\" name=\"rowsToInspect\" class=\"margin20\" max=\"1000\" min=\"50\" step=\"50\" thumb-label=\"true\"\\n            tick-interval=\"500\" [(ngModel)]=\"previewConfig.rowsToInspect\" [ngModelOptions]=\"{standalone: true}\">\\n          </mat-slider>\\n          <span>{{previewConfig.rowsToInspect}}</span>\\n        </section>\\n        \\x3c!-- <section class=\"input-section\">\\n            <span fxFlex=\"20\">Sample Size</span>\\n            <mat-slider fxFlex placeholder=\"Sample Size\" name=\"sampleSize\" class=\"margin20\" max=\"200\" min=\"10\" step=\"10\" thumb-label=\"true\"\\n              tick-interval=\"auto\" [(ngModel)]=\"previewConfig.sampleSize\" [ngModelOptions]=\"{standalone: true}\">\\n            </mat-slider>\\n            <span>{{previewConfig.sampleSize}}</span>\\n          </section> --\\x3e\\n      </form>\\n    </mat-card-content>\\n  </mat-card>\\n</div>\\n'},lyyl:function(t,e){t.exports=function(t,e,n){var a;return n(t,function(t,n,o){if(e(t,n,o))return a=n,!1}),a}},mUg4:function(t,e,n){var a=n(\"cq/+\"),o=n(\"EwQA\"),i=n(\"mTTR\");t.exports=function(t,e){return null==t?t:a(t,o(e),i)}},nI8U:function(t,e){t.exports=\"::ng-deep .createroute-dialog {\\n  height: calc(100% - 48px); }\\n  ::ng-deep .createroute-dialog .mat-card-content {\\n    height: calc(100% - 36px); }\\n  ::ng-deep .createroute-dialog .mat-stepper-horizontal {\\n    height: 100%; }\\n  ::ng-deep .createroute-dialog .mat-horizontal-content-container {\\n    height: calc(100% - 55px);\\n    padding: 0; }\\n  ::ng-deep .createroute-dialog .mat-horizontal-content-container .mat-horizontal-stepper-content {\\n      height: 98%; }\\n  ::ng-deep .createroute-dialog .mat-horizontal-content-container .mat-horizontal-stepper-content span.errorTextMsg {\\n        color: #d93e00;\\n        margin-left: 3.5%; }\\n  ::ng-deep .createroute-dialog .mat-horizontal-stepper-content[aria-expanded='false'] {\\n    height: 0 !important; }\\n  ::ng-deep .createroute-dialog .details-title {\\n    text-align: left;\\n    padding-left: 10px;\\n    margin: 0;\\n    font-weight: 600 !important; }\\n  ::ng-deep .createroute-dialog .details-title > strong {\\n      color: #1a89d4; }\\n  ::ng-deep .createroute-dialog .details-container {\\n    height: 85%;\\n    overflow: auto; }\\n  ::ng-deep .createroute-dialog .details-container .mat-form-field {\\n      width: 80%; }\\n  ::ng-deep .createroute-dialog .source-list > mat-card {\\n    margin: 9px 0;\\n    border-radius: 4px;\\n    padding: 9px 24px; }\\n  ::ng-deep .createroute-dialog mat-card > img {\\n    height: 60px;\\n    max-width: 70px; }\\n  ::ng-deep .createroute-dialog .selected {\\n    border: 3px #1a89d4 solid; }\\n\"},qV4h:function(t,e){t.exports='<div fxFlex fxLayout=\"column\" class=\"container test-connectivity\">\\n    <div class=\"console-header\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"center center\">\\n        <div e2e=\"test-connectivity\">Connection Logs</div>\\n        <span fxFlex></span>\\n        <mat-icon e2e=\"close-test-connectivity\" fontIcon=\"icon-remove\" color=\"warn\" style=\"height: 15px;\" (click)=\"close()\"></mat-icon>\\n    </div>\\n    <div class=\"console-body\">\\n        <div id=\"screen\" #screen><b id=\"prompt\" class=\"idle\"> &#9595; </b></div>\\n    </div>\\n</div>\\n'},qYo2:function(t,e){t.exports='<mat-dialog-content>\\n  <form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\\n    <div mat-dialog-title i18n>Enter Datapod Details</div>\\n\\n    <mat-form-field appearance=\"outline\" class=\"form-select\">\\n      <mat-label>Datapod Category</mat-label>\\n      <mat-select formControlName=\"category\">\\n        <mat-option *ngFor=\"let category of dataPodCategories\" [value]=\"category.name\">\\n          <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\\n            {{category.name | changeCase:\\'title\\'}}\\n            <mat-icon [svgIcon]=\"category.icon\"></mat-icon>\\n          </div>\\n        </mat-option>\\n      </mat-select>\\n    </mat-form-field>\\n\\n    <mat-form-field class=\"inpElement\" style=\"margin-top: 5px;\">\\n        <input matInput formControlName=\"name\" autocomplete=\"off\" placeholder=\"Enter Datapod Name\" required maxlength=\"25\"/>\\n        <mat-error *ngIf=\"form.controls.name.hasError(\\'required\\')\" i18n>\\n            Datapod Name is\\n            <strong>required</strong>\\n        </mat-error>\\n    </mat-form-field>\\n\\n  </form>\\n</mat-dialog-content>\\n<mat-dialog-actions>\\n  <button mat-button type=\"button\" style=\"color: #E5524C;\" mat-dialog-close i18n>Cancel</button>\\n  <span fxFlex></span>\\n  <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!form.valid\" (click)=\"submit()\" i18n>OK</button>\\n</mat-dialog-actions>\\n\\n'},rM5H:function(t,e){t.exports=\":host {\\n  width: 100%; }\\n\\n.action-buttons .mat-icon-button {\\n  font-size: 22px;\\n  line-height: 32px !important;\\n  height: 34px !important; }\\n\\n.action-buttons .mat-raised-button {\\n  line-height: 32px !important;\\n  vertical-align: middle; }\\n\\n.mat-slide-toggle {\\n  padding-top: 5px; }\\n\\n.icon-search {\\n  font-size: 26px !important; }\\n\\n.toolbar-white {\\n  background-color: #fff;\\n  height: 45px !important;\\n  min-height: 45px !important; }\\n\\n.md-subhead {\\n  color: #0077be;\\n  font-weight: 600;\\n  text-transform: uppercase; }\\n\\n.mat-button-toggle-checked {\\n  background-color: #0077be;\\n  color: white; }\\n\\n.mat-button-toggle {\\n  font-size: 16px;\\n  height: 34px; }\\n\\n::ng-deep .mat-button-toggle-label-content {\\n  padding: 0 7px;\\n  line-height: 32px !important; }\\n\\n::ng-deep .mat-button-toggle-label-content .mat-icon {\\n    width: auto; }\\n\\n::ng-deep .mat-button-toggle-label-content > * {\\n  vertical-align: bottom !important; }\\n\\n.view-mode .mat-button-toggle-group {\\n  box-shadow: none; }\\n\\n.view-mode ::ng-deep .mat-button-toggle-checked {\\n  background-color: white;\\n  color: #0077be; }\\n\\n.grid-view {\\n  padding: 5px;\\n  background-color: #f5f9fc; }\\n\\n.card-view {\\n  overflow: auto;\\n  background-color: #f5f9fc; }\\n\"},rZv1:function(t,e){t.exports=\".margin20 {\\n  margin: 3px;\\n  width: 100%; }\\n\\n.input-section {\\n  display: flex;\\n  align-content: center;\\n  align-items: center; }\\n\\n.content {\\n  height: 180px; }\\n\"},sWf6:function(t,e){t.exports='<div class=\"executor-container\">\\n  <div class=\"title-elem\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\\n    <button mat-button class=\"bck-btn\" e2e=\"back-to-data-sets-page\">\\n      <mat-icon fontIcon=\"icon-arrow-left\" (click)=\"backToDS()\"></mat-icon>\\n    </button>\\n    <div class=\"action-title\">\\n      <mat-icon fontIcon=\"icon-query-mode\"></mat-icon>\\n      <span>SQL EXECUTOR </span>\\n    </div>\\n    <div class=\"ds-name\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"10px\">\\n      <span>Selected Dataset: </span>\\n      <mat-chip-list>\\n        <mat-chip>{{dsMetadata.system.name}}</mat-chip>\\n      </mat-chip-list>\\n    </div>\\n    <div fxLayout=\"row\" fxLayoutGap=\"20px\" fxFlexAlign=\"end center\">\\n      \\x3c!-- <div class=\"btn-icon\">\\n        <button mat-button matTooltip=\"Execute Query\" (click)=\"runScript()\">\\n          <mat-icon fontIcon=\"icon-play-circle\"></mat-icon>\\n          <span>Run</span>\\n        </button>\\n      </div>\\n      <div class=\"btn-icon\">\\n        <button mat-button matTooltip=\"Add to list\" (click)=\"addScript()\">\\n          <mat-icon fontIcon=\"icon-clipboard\"></mat-icon>\\n          <span>Add</span>\\n        </button>\\n      </div>\\n      <div class=\"btn-icon\">\\n        <button mat-button matTooltip=\"New Query\" (click)=\"newScript()\">\\n          <mat-icon fontIcon=\"icon-soup-solid\"></mat-icon>\\n          <span>New</span>\\n        </button>\\n      </div> --\\x3e\\n      <div class=\"create-btn\">\\n        <button mat-raised-button color=\"primary\" (click)=\"openSaveDialog()\">\\n          \\x3c!-- <mat-icon fontIcon=\"icon-save\"></mat-icon> --\\x3e\\n          <span i18n>Create</span>\\n        </button>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\"exec-body\">\\n    <as-split direction=\"vertical\">\\n      <as-split-area class=\"script-pane\" [size]=\"scriptHeight\">\\n        <as-split direction=\"horizontal\">\\n          <as-split-area size=\"75\">\\n            <sql-script #sqlscript [artifacts]=\"artifacts\" (onExecute)=\"sendDataToPreview($event)\" (onCreate)=\"getQuery($event)\">\\n            </sql-script>\\n          </as-split-area>\\n          <as-split-area size=\"25\" class=\"fields-pane\">\\n            <mat-card class=\"details-grid\" fxFlex>\\n              <div fxFill>\\n                <dx-data-grid fxFlex [dataSource]=\"dsMetadata?.schema?.fields\" [rowAlternationEnabled]=\"true\" [height]=\"\\'99%\\'\"\\n                  [width]=\"\\'100%\\'\" [showBorders]=\"false\" style=\"position:absolute;top:0;bottom:0;left:0;bottom:0;\">\\n                  <dxi-column caption=\"Field Name\" dataField=\"name\"></dxi-column>\\n                  <dxi-column caption=\"Data Type\" dataField=\"type\"></dxi-column>\\n                  <dxo-scrolling mode=\"infinite\"></dxo-scrolling>\\n                  <dxo-filter-row [visible]=\"true\" applyFilter=\"auto\"></dxo-filter-row>\\n                  <dxo-header-filter [visible]=\"true\"></dxo-header-filter>\\n                </dx-data-grid>\\n              </div>\\n            </mat-card>\\n            \\x3c!-- <mat-list>\\n              <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\\n                <h3 mat-subheader fxFlex fxLayout=\"row\" fxLayoutAlign=\"start start\">\\n                  <mat-icon fontIcon=\"icon-clipboard\"></mat-icon>\\n                  <span>ACTIONS_LIST</span>\\n                </h3>\\n              </div>\\n              <mat-list-item class=\"list-items\" *ngFor=\"let action of appliedActions; index as i; last as isLast\" (click)=\"previewAction(action.statement)\">\\n                <p mat-line>{{i + 1}}. &ensp; {{ action.statement }}</p>\\n                <div class=\"icon-div\" *ngIf=\"isLast\">\\n                  <mat-icon mat-list-icon style=\"color: #E5524C;\" fontIcon=\"icon-delete\"></mat-icon>\\n                </div>\\n                <mat-divider></mat-divider>\\n              </mat-list-item>\\n            </mat-list> --\\x3e\\n          </as-split-area>\\n        </as-split>\\n      </as-split-area>\\n      <as-split-area class=\"preview-pane\" [size]=\"previewHeight\">\\n        \\x3c!-- <sqlpreview-grid-page [updater]=\"gridData\" (onToggleScreenMode)=\"toggleViewMode($event)\"></sqlpreview-grid-page> --\\x3e\\n      </as-split-area>\\n    </as-split>\\n  </div>\\n</div>\\n'},sXUr:function(t,e){t.exports='<div class=\"container\">\\n  <div\\n    class=\"header\"\\n    fxLayout=\"row\"\\n    fxLayoutAlign=\"center center\"\\n    fxLayoutGap=\"10px\"\\n  >\\n    <button mat-button class=\"bck-btn\">\\n      <mat-icon fontIcon=\"icon-arrow-left\" (click)=\"showDSList()\"></mat-icon>\\n    </button>\\n    <div fxFlex>Create Datapod</div>\\n    <span fxFlex>Selected Dataset/s</span>\\n    <button mat-raised-button color=\"primary\" (click)=\"createDatapod()\">\\n      <span i18n>Create</span>\\n    </button>\\n  </div>\\n  <div\\n    class=\"body\"\\n    fxLayout=\"row\"\\n    fxLayoutAlign=\"center stretch\"\\n    fxLayoutGap=\"10px\"\\n  >\\n    <mat-card fxFlex>\\n      <mat-card-content>\\n        <mat-tab-group fxFlex>\\n          <mat-tab\\n            *ngFor=\"let ds of selectedDS; let index = index\"\\n            [label]=\"ds?.system?.name\"\\n          >\\n            <dx-data-grid\\n              #dsGrid\\n              [dataSource]=\"ds.schema?.fields\"\\n              [showBorders]=\"true\"\\n              [height]=\"\\'100%\\'\"\\n              [width]=\"\\'100%\\'\"\\n              [rowAlternationEnabled]=\"true\"\\n              [showColumnLines]=\"false\"\\n              style=\"position:absolute;top:0;bottom:0;left:0;bottom:0;\"\\n            >\\n              <dxo-editing mode=\"cell\" [allowUpdating]=\"true\"> </dxo-editing>\\n              <dxi-column\\n                [width]=\"80\"\\n                caption=\"Include\"\\n                dataField=\"include\"\\n                dataType=\"boolean\"\\n              ></dxi-column>\\n              <dxi-column caption=\"Display Name\" dataField=\"displayName\">\\n                <dxi-validation-rule type=\"required\"></dxi-validation-rule>\\n                <dxi-validation-rule type=\"stringLength\" [max]=\"30\">\\n                </dxi-validation-rule>\\n              </dxi-column>\\n              <dxi-column\\n                caption=\"Column Name\"\\n                [allowEditing]=\"false\"\\n                dataField=\"columnName\"\\n              ></dxi-column>\\n              <dxi-column\\n                [width]=\"150\"\\n                caption=\"Data Type\"\\n                [allowEditing]=\"false\"\\n                dataField=\"type\"\\n              ></dxi-column>\\n              <dxi-column\\n                [width]=\"100\"\\n                caption=\"Filter Eligible\"\\n                dataField=\"filterEligible\"\\n                dataType=\"boolean\"\\n              ></dxi-column>\\n              <dxi-column\\n                *ngIf=\"!isJoinEligible\"\\n                [width]=\"80\"\\n                caption=\"KPI Eligible\"\\n                dataField=\"kpiEligible\"\\n                dataType=\"boolean\"\\n              ></dxi-column>\\n              \\x3c!-- Commenting out creation of multiple Artifacts as there is issue with report. --\\x3e\\n\\n              \\x3c!-- <dxi-column\\n                [width]=\"80\"\\n                *ngIf=\"isJoinEligible\"\\n                caption=\"Join Eligible\"\\n                dataField=\"joinEligible\"\\n                dataType=\"boolean\"\\n              ></dxi-column> --\\x3e\\n              <dxo-scrolling\\n                mode=\"virtual\"\\n                showScrollbar=\"always\"\\n                [useNative]=\"false\"\\n              ></dxo-scrolling>\\n              <dxo-filter-row\\n                [visible]=\"true\"\\n                [applyFilter]=\"auto\"\\n              ></dxo-filter-row>\\n              <dxo-header-filter [visible]=\"false\"></dxo-header-filter>\\n            </dx-data-grid>\\n          </mat-tab>\\n        </mat-tab-group>\\n      </mat-card-content>\\n    </mat-card>\\n  </div>\\n</div>\\n'},vJzd:function(t,e){t.exports=\".details-content {\\n  font-size: 16px;\\n  font-weight: 600;\\n  line-height: 3;\\n  padding: 0 9px;\\n  color: #1a89d4; }\\n\\n.prop-name {\\n  color: #727272;\\n  width: 136px; }\\n\"},wSwp:function(t,e){t.exports=\":host {\\n  width: 100%; }\\n\\n.container {\\n  width: 100%;\\n  height: 100%;\\n  background-color: #f5f9fc;\\n  overflow: auto; }\\n\\n.container .header {\\n    color: rgba(0, 0, 0, 0.54);\\n    background: rgba(0, 0, 0, 0.03);\\n    padding: 8px 0;\\n    height: 50px;\\n    font-size: 18px;\\n    font-weight: 700;\\n    border: 2px solid white; }\\n\\n.container .header .mat-icon {\\n      font-size: 26px; }\\n\\n.container .header > span {\\n      font-size: 14px;\\n      font-weight: normal; }\\n\\n.container .body {\\n    background-color: #fff;\\n    height: calc(100% - 50px);\\n    max-height: calc(100% - 50px) !important; }\\n\\n.container .body mat-card {\\n      padding: 0;\\n      height: 100%; }\\n\\n.container .body mat-card .mat-card-content {\\n        height: 100%;\\n        max-height: 100%;\\n        overflow: auto; }\\n\\n.container .body mat-card .mat-card-content .mat-tab-group {\\n          height: 100% !important;\\n          max-height: 100% !important;\\n          overflow: auto; }\\n\\n.container .body mat-card .mat-card-content ::ng-deep .mat-tab-label-active {\\n          color: #0077be; }\\n\\n.container .body mat-card .mat-card-content ::ng-deep .mat-tab-body-wrapper {\\n          height: 100%; }\\n\\n.container .body mat-card .mat-card-content ::ng-deep .mat-tab-body-wrapper .mat-tab-body {\\n            overflow: hidden !important; }\\n\\n.container .body mat-card .mat-card-content ::ng-deep .mat-tab-body-wrapper .mat-tab-body .mat-tab-body-content {\\n              overflow: hidden !important; }\\n\\n.container .body mat-card .mat-card-content .results {\\n          width: 100%;\\n          height: 100%;\\n          color: #bdbdbd;\\n          text-align: center; }\\n\\n.container .body mat-card .mat-card-content .results span {\\n            font-size: 28px;\\n            word-break: break-word; }\\n\\n.container .body mat-card .mat-card-content .dx-datagrid-content .dx-datagrid-table .dx-row .dx-command-select {\\n          padding: 0;\\n          width: 40px;\\n          min-width: 40px; }\\n\"},yPgJ:function(t,e){t.exports=\":host {\\n  width: 100%;\\n  height: 100%;\\n  overflow: hidden; }\\n\\n.src-img {\\n  height: 20px;\\n  width: 46px;\\n  margin-right: 5%;\\n  background-size: contain;\\n  background-repeat: no-repeat; }\\n\\n.btn-card2 {\\n  background-color: #636363 !important;\\n  color: #FFF !important;\\n  padding: 2px 15px; }\\n\\n.branded-column-name {\\n  color: #0077be;\\n  font-weight: 600; }\\n\\n.parquet {\\n  background-image: url('/saw/web/assets/img/maprE.png');\\n  background-size: contain;\\n  background-repeat: no-repeat; }\\n\\n.es {\\n  background-image: url('/saw/web/assets/svg/elastic.svg'); }\\n\\n.grid-container {\\n  overflow: hidden;\\n  display: block; }\\n\\n.FAILED {\\n  border-left: 3px solid #ab0e27; }\\n\\n.SUCCESS {\\n  border-left: 3px solid #73b421; }\\n\\n.INIT {\\n  border-left: 3px solid #f07601; }\\n\"},zu6b:function(t,e){t.exports='<form [formGroup]=\"form\" (ngSubmit)=\"submit(form)\">\\n  <mat-dialog-content class=\"content\">\\n    <section class=\"input-section\">\\n      <mat-form-field class=\"margin20\">\\n        <input matInput placeholder=\"Dataset Name\" name=\"datasetName\" formControlName=\"nameControl\" maxlength=\"18\"\\n          required />\\n        <mat-error *ngIf=\"form.controls.nameControl.hasError(\\'required\\')\">\\n          Dataset Name is\\n          <strong>required</strong>\\n        </mat-error>\\n        <mat-error *ngIf=\"form.controls.nameControl.hasError(\\'pattern\\')\" i18n>\\n          <strong> Only alphabets, numbers are allowed\\n          </strong>\\n        </mat-error>\\n        <mat-hint> Only alphabets, numbers are allowed </mat-hint>\\n      </mat-form-field>\\n    </section>\\n    <section class=\"input-section\">\\n      <mat-form-field class=\"margin20\">\\n        <input matInput placeholder=\"Description\" name=\"description\" formControlName=\"descControl\" maxlength=\"100\"\\n          required />\\n        <mat-error *ngIf=\"form.controls.descControl.hasError(\\'required\\')\">\\n          Dataset description is\\n          <strong>required</strong>\\n        </mat-error>\\n      </mat-form-field>\\n    </section>\\n  </mat-dialog-content>\\n  <mat-dialog-actions>\\n    <button mat-stroked-button type=\"button\" color=\"warn\" (click)=\"onClose()\">Cancel</button>\\n    <span fxFlex></span>\\n    <button mat-raised-button type=\"submit\" color=\"primary\" [disabled]=\"!form.valid\">OK</button>\\n  </mat-dialog-actions>\\n</form>'}}]);","extractedComments":[]}