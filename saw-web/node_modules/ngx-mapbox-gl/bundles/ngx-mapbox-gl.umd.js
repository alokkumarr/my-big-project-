(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@turf/bbox'), require('@turf/helpers'), require('mapbox-gl'), require('rxjs'), require('rxjs/operators'), require('supercluster'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-mapbox-gl', ['exports', '@angular/core', '@turf/bbox', '@turf/helpers', 'mapbox-gl', 'rxjs', 'rxjs/operators', 'supercluster', '@angular/common'], factory) :
    (factory((global['ngx-mapbox-gl'] = {}),global.ng.core,global.bbox,global.helpers,global.MapboxGl,global.rxjs,global.rxjs.operators,global.supercluster,global.ng.common));
}(this, (function (exports,core,bbox,helpers,MapboxGl,rxjs,operators,supercluster,common) { 'use strict';

    bbox = bbox && bbox.hasOwnProperty('default') ? bbox['default'] : bbox;
    supercluster = supercluster && supercluster.hasOwnProperty('default') ? supercluster['default'] : supercluster;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MAPBOX_API_KEY = new core.InjectionToken('MapboxApiKey');
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ MglResizeEventEmitter = /** @class */ (function () {
        function MglResizeEventEmitter() {
        }
        return MglResizeEventEmitter;
    }());
    var MapService = /** @class */ (function () {
        function MapService(zone, MAPBOX_API_KEY, MglResizeEventEmitter) {
            this.zone = zone;
            this.MAPBOX_API_KEY = MAPBOX_API_KEY;
            this.MglResizeEventEmitter = MglResizeEventEmitter;
            this.mapCreated = new rxjs.AsyncSubject();
            this.mapLoaded = new rxjs.AsyncSubject();
            this.layerIdsToRemove = [];
            this.sourceIdsToRemove = [];
            this.markersToRemove = [];
            this.popupsToRemove = [];
            this.imageIdsToRemove = [];
            this.subscription = new rxjs.Subscription();
            this.mapCreated$ = this.mapCreated.asObservable();
            this.mapLoaded$ = this.mapLoaded.asObservable();
        }
        /**
         * @param {?} options
         * @return {?}
         */
        MapService.prototype.setup = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                // Need onStable to wait for a potential @angular/route transition to end
                this.zone.onStable.pipe(operators.first()).subscribe(function () {
                    // Workaround rollup issue
                    _this.assign(MapboxGl, 'accessToken', options.accessToken || _this.MAPBOX_API_KEY);
                    if (options.customMapboxApiUrl) {
                        _this.assign(MapboxGl, 'config.API_URL', options.customMapboxApiUrl);
                    }
                    _this.createMap(options.mapOptions);
                    _this.hookEvents(options.mapEvents);
                    _this.mapEvents = options.mapEvents;
                    _this.mapCreated.next(undefined);
                    _this.mapCreated.complete();
                });
            };
        /**
         * @return {?}
         */
        MapService.prototype.destroyMap = /**
         * @return {?}
         */
            function () {
                this.subscription.unsubscribe();
                this.mapInstance.remove();
            };
        /**
         * @param {?} minZoom
         * @return {?}
         */
        MapService.prototype.updateMinZoom = /**
         * @param {?} minZoom
         * @return {?}
         */
            function (minZoom) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    _this.mapInstance.setMinZoom(minZoom);
                });
            };
        /**
         * @param {?} maxZoom
         * @return {?}
         */
        MapService.prototype.updateMaxZoom = /**
         * @param {?} maxZoom
         * @return {?}
         */
            function (maxZoom) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    _this.mapInstance.setMaxZoom(maxZoom);
                });
            };
        /**
         * @param {?} status
         * @return {?}
         */
        MapService.prototype.updateScrollZoom = /**
         * @param {?} status
         * @return {?}
         */
            function (status) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    status ? _this.mapInstance.scrollZoom.enable() : _this.mapInstance.scrollZoom.disable();
                });
            };
        /**
         * @param {?} status
         * @return {?}
         */
        MapService.prototype.updateDragRotate = /**
         * @param {?} status
         * @return {?}
         */
            function (status) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    status ? _this.mapInstance.dragRotate.enable() : _this.mapInstance.dragRotate.disable();
                });
            };
        /**
         * @param {?} status
         * @return {?}
         */
        MapService.prototype.updateTouchZoomRotate = /**
         * @param {?} status
         * @return {?}
         */
            function (status) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    status ? _this.mapInstance.touchZoomRotate.enable() : _this.mapInstance.touchZoomRotate.disable();
                });
            };
        /**
         * @param {?} status
         * @return {?}
         */
        MapService.prototype.updateDoubleClickZoom = /**
         * @param {?} status
         * @return {?}
         */
            function (status) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    status ? _this.mapInstance.doubleClickZoom.enable() : _this.mapInstance.doubleClickZoom.disable();
                });
            };
        /**
         * @param {?} status
         * @return {?}
         */
        MapService.prototype.updateKeyboard = /**
         * @param {?} status
         * @return {?}
         */
            function (status) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    status ? _this.mapInstance.keyboard.enable() : _this.mapInstance.keyboard.disable();
                });
            };
        /**
         * @param {?} status
         * @return {?}
         */
        MapService.prototype.updateDragPan = /**
         * @param {?} status
         * @return {?}
         */
            function (status) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    status ? _this.mapInstance.dragPan.enable() : _this.mapInstance.dragPan.disable();
                });
            };
        /**
         * @param {?} status
         * @return {?}
         */
        MapService.prototype.updateBoxZoom = /**
         * @param {?} status
         * @return {?}
         */
            function (status) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    status ? _this.mapInstance.boxZoom.enable() : _this.mapInstance.boxZoom.disable();
                });
            };
        /**
         * @param {?} style
         * @return {?}
         */
        MapService.prototype.updateStyle = /**
         * @param {?} style
         * @return {?}
         */
            function (style) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    _this.mapInstance.setStyle(style);
                });
            };
        /**
         * @param {?} maxBounds
         * @return {?}
         */
        MapService.prototype.updateMaxBounds = /**
         * @param {?} maxBounds
         * @return {?}
         */
            function (maxBounds) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    _this.mapInstance.setMaxBounds(maxBounds);
                });
            };
        /**
         * @param {?} cursor
         * @return {?}
         */
        MapService.prototype.changeCanvasCursor = /**
         * @param {?} cursor
         * @return {?}
         */
            function (cursor) {
                /** @type {?} */
                var canvas = this.mapInstance.getCanvasContainer();
                canvas.style.cursor = cursor;
            };
        /**
         * @param {?=} pointOrBox
         * @param {?=} parameters
         * @return {?}
         */
        MapService.prototype.queryRenderedFeatures = /**
         * @param {?=} pointOrBox
         * @param {?=} parameters
         * @return {?}
         */
            function (pointOrBox, parameters) {
                return this.mapInstance.queryRenderedFeatures(pointOrBox, parameters);
            };
        /**
         * @param {?} center
         * @param {?=} options
         * @return {?}
         */
        MapService.prototype.panTo = /**
         * @param {?} center
         * @param {?=} options
         * @return {?}
         */
            function (center, options) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    _this.mapInstance.panTo(center, options);
                });
            };
        /**
         * @param {?} movingMethod
         * @param {?=} movingOptions
         * @param {?=} zoom
         * @param {?=} center
         * @param {?=} bearing
         * @param {?=} pitch
         * @return {?}
         */
        MapService.prototype.move = /**
         * @param {?} movingMethod
         * @param {?=} movingOptions
         * @param {?=} zoom
         * @param {?=} center
         * @param {?=} bearing
         * @param {?=} pitch
         * @return {?}
         */
            function (movingMethod, movingOptions, zoom, center, bearing, pitch) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    (( /** @type {?} */(_this.mapInstance[movingMethod])))(__assign({}, movingOptions, { zoom: zoom ? zoom : _this.mapInstance.getZoom(), center: center ? center : _this.mapInstance.getCenter(), bearing: bearing ? bearing : _this.mapInstance.getBearing(), pitch: pitch ? pitch : _this.mapInstance.getPitch() }));
                });
            };
        /**
         * @param {?} layer
         * @param {?} bindEvents
         * @param {?=} before
         * @return {?}
         */
        MapService.prototype.addLayer = /**
         * @param {?} layer
         * @param {?} bindEvents
         * @param {?=} before
         * @return {?}
         */
            function (layer, bindEvents, before) {
                var _this = this;
                this.zone.runOutsideAngular(function () {
                    Object.keys(layer.layerOptions)
                        .forEach(function (key) {
                        /** @type {?} */
                        var tkey = ( /** @type {?} */(key));
                        if (layer.layerOptions[tkey] === undefined) {
                            delete layer.layerOptions[tkey];
                        }
                    });
                    _this.mapInstance.addLayer(layer.layerOptions, before);
                    if (bindEvents) {
                        if (layer.layerEvents.click.observers.length) {
                            _this.mapInstance.on('click', layer.layerOptions.id, function (evt) {
                                _this.zone.run(function () {
                                    layer.layerEvents.click.emit(evt);
                                });
                            });
                        }
                        if (layer.layerEvents.mouseEnter.observers.length) {
                            _this.mapInstance.on('mouseenter', layer.layerOptions.id, function (evt) {
                                _this.zone.run(function () {
                                    layer.layerEvents.mouseEnter.emit(evt);
                                });
                            });
                        }
                        if (layer.layerEvents.mouseLeave.observers.length) {
                            _this.mapInstance.on('mouseleave', layer.layerOptions.id, function (evt) {
                                _this.zone.run(function () {
                                    layer.layerEvents.mouseLeave.emit(evt);
                                });
                            });
                        }
                        if (layer.layerEvents.mouseMove.observers.length) {
                            _this.mapInstance.on('mousemove', layer.layerOptions.id, function (evt) {
                                _this.zone.run(function () {
                                    layer.layerEvents.mouseMove.emit(evt);
                                });
                            });
                        }
                    }
                });
            };
        /**
         * @param {?} layerId
         * @return {?}
         */
        MapService.prototype.removeLayer = /**
         * @param {?} layerId
         * @return {?}
         */
            function (layerId) {
                this.layerIdsToRemove.push(layerId);
            };
        /**
         * @param {?} marker
         * @return {?}
         */
        MapService.prototype.addMarker = /**
         * @param {?} marker
         * @return {?}
         */
            function (marker) {
                var _this = this;
                /** @type {?} */
                var options = {
                    offset: marker.markersOptions.offset,
                    anchor: marker.markersOptions.anchor,
                    draggable: !!marker.markersOptions.draggable
                };
                if (marker.markersOptions.element.childNodes.length > 0) {
                    options.element = marker.markersOptions.element;
                }
                /** @type {?} */
                var markerInstance = new MapboxGl.Marker(options);
                if (marker.markersEvents.dragStart.observers.length) {
                    markerInstance.on('dragstart', function (event) {
                        return _this.zone.run(function () { return marker.markersEvents.dragStart.emit(event.target); });
                    });
                }
                if (marker.markersEvents.drag.observers.length) {
                    markerInstance.on('drag', function (event) {
                        return _this.zone.run(function () { return marker.markersEvents.drag.emit(event.target); });
                    });
                }
                if (marker.markersEvents.dragEnd.observers.length) {
                    markerInstance.on('dragend', function (event) {
                        return _this.zone.run(function () { return marker.markersEvents.dragEnd.emit(event.target); });
                    });
                }
                /** @type {?} */
                var lngLat = marker.markersOptions.feature ?
                    ( /** @type {?} */(( /** @type {?} */(marker.markersOptions.feature.geometry)).coordinates)) :
                    ( /** @type {?} */(marker.markersOptions.lngLat));
                markerInstance.setLngLat(lngLat);
                return this.zone.runOutsideAngular(function () {
                    markerInstance.addTo(_this.mapInstance);
                    return markerInstance;
                });
            };
        /**
         * @param {?} marker
         * @return {?}
         */
        MapService.prototype.removeMarker = /**
         * @param {?} marker
         * @return {?}
         */
            function (marker) {
                this.markersToRemove.push(marker);
            };
        /**
         * @param {?} popup
         * @param {?} element
         * @return {?}
         */
        MapService.prototype.createPopup = /**
         * @param {?} popup
         * @param {?} element
         * @return {?}
         */
            function (popup, element) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    Object.keys(popup.popupOptions)
                        .forEach(function (key) {
                        return (( /** @type {?} */(popup.popupOptions)))[key] === undefined && delete (( /** @type {?} */(popup.popupOptions)))[key];
                    });
                    /** @type {?} */
                    var popupInstance = new MapboxGl.Popup(popup.popupOptions);
                    popupInstance.setDOMContent(element);
                    if (popup.popupEvents.close.observers.length) {
                        popupInstance.on('close', function () {
                            _this.zone.run(function () {
                                popup.popupEvents.close.emit();
                            });
                        });
                    }
                    if (popup.popupEvents.open.observers.length) {
                        popupInstance.on('open', function () {
                            _this.zone.run(function () {
                                popup.popupEvents.open.emit();
                            });
                        });
                    }
                    return popupInstance;
                });
            };
        /**
         * @param {?} popup
         * @param {?} lngLat
         * @param {?=} skipOpenEvent
         * @return {?}
         */
        MapService.prototype.addPopupToMap = /**
         * @param {?} popup
         * @param {?} lngLat
         * @param {?=} skipOpenEvent
         * @return {?}
         */
            function (popup, lngLat, skipOpenEvent) {
                var _this = this;
                if (skipOpenEvent === void 0) {
                    skipOpenEvent = false;
                }
                return this.zone.runOutsideAngular(function () {
                    if (skipOpenEvent && (( /** @type {?} */(popup)))._listeners) {
                        delete (( /** @type {?} */(popup)))._listeners['open'];
                    }
                    popup.setLngLat(lngLat);
                    popup.addTo(_this.mapInstance);
                });
            };
        /**
         * @param {?} marker
         * @param {?} popup
         * @return {?}
         */
        MapService.prototype.addPopupToMarker = /**
         * @param {?} marker
         * @param {?} popup
         * @return {?}
         */
            function (marker, popup) {
                return this.zone.runOutsideAngular(function () {
                    marker.setPopup(popup);
                });
            };
        /**
         * @param {?} popup
         * @param {?=} skipCloseEvent
         * @return {?}
         */
        MapService.prototype.removePopupFromMap = /**
         * @param {?} popup
         * @param {?=} skipCloseEvent
         * @return {?}
         */
            function (popup, skipCloseEvent) {
                if (skipCloseEvent === void 0) {
                    skipCloseEvent = false;
                }
                if (skipCloseEvent && (( /** @type {?} */(popup)))._listeners) {
                    delete (( /** @type {?} */(popup)))._listeners['close'];
                }
                this.popupsToRemove.push(popup);
            };
        /**
         * @param {?} marker
         * @return {?}
         */
        MapService.prototype.removePopupFromMarker = /**
         * @param {?} marker
         * @return {?}
         */
            function (marker) {
                return this.zone.runOutsideAngular(function () {
                    marker.setPopup(undefined);
                });
            };
        /**
         * @param {?} control
         * @param {?=} position
         * @return {?}
         */
        MapService.prototype.addControl = /**
         * @param {?} control
         * @param {?=} position
         * @return {?}
         */
            function (control, position) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    _this.mapInstance.addControl(( /** @type {?} */(control)), position);
                });
            };
        /**
         * @param {?} control
         * @return {?}
         */
        MapService.prototype.removeControl = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    _this.mapInstance.removeControl(( /** @type {?} */(control)));
                });
            };
        /**
         * @param {?} imageId
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
        MapService.prototype.loadAndAddImage = /**
         * @param {?} imageId
         * @param {?} url
         * @param {?=} options
         * @return {?}
         */
            function (imageId, url, options) {
                return __awaiter(this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        return [2 /*return*/, this.zone.runOutsideAngular(function () {
                                return new Promise(function (resolve, reject) {
                                    _this.mapInstance.loadImage(url, function (error, image) {
                                        if (error) {
                                            reject(error);
                                            return;
                                        }
                                        _this.addImage(imageId, image, options);
                                        resolve();
                                    });
                                });
                            })];
                    });
                });
            };
        /**
         * @param {?} imageId
         * @param {?} data
         * @param {?=} options
         * @return {?}
         */
        MapService.prototype.addImage = /**
         * @param {?} imageId
         * @param {?} data
         * @param {?=} options
         * @return {?}
         */
            function (imageId, data, options) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    _this.mapInstance.addImage(imageId, ( /** @type {?} */(data)), options);
                });
            };
        /**
         * @param {?} imageId
         * @return {?}
         */
        MapService.prototype.removeImage = /**
         * @param {?} imageId
         * @return {?}
         */
            function (imageId) {
                this.imageIdsToRemove.push(imageId);
            };
        /**
         * @param {?} sourceId
         * @param {?} source
         * @return {?}
         */
        MapService.prototype.addSource = /**
         * @param {?} sourceId
         * @param {?} source
         * @return {?}
         */
            function (sourceId, source) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    Object.keys(source)
                        .forEach(function (key) {
                        return (( /** @type {?} */(source)))[key] === undefined && delete (( /** @type {?} */(source)))[key];
                    });
                    _this.mapInstance.addSource(sourceId, ( /** @type {?} */(source))); // Typings issue
                });
            };
        /**
         * @template T
         * @param {?} sourceId
         * @return {?}
         */
        MapService.prototype.getSource = /**
         * @template T
         * @param {?} sourceId
         * @return {?}
         */
            function (sourceId) {
                return ( /** @type {?} */(( /** @type {?} */(this.mapInstance.getSource(sourceId)))));
            };
        /**
         * @param {?} sourceId
         * @return {?}
         */
        MapService.prototype.removeSource = /**
         * @param {?} sourceId
         * @return {?}
         */
            function (sourceId) {
                this.sourceIdsToRemove.push(sourceId);
            };
        /**
         * @param {?} layerId
         * @param {?} paint
         * @return {?}
         */
        MapService.prototype.setAllLayerPaintProperty = /**
         * @param {?} layerId
         * @param {?} paint
         * @return {?}
         */
            function (layerId, paint) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    Object.keys(paint).forEach(function (key) {
                        // TODO Check for perf, setPaintProperty only on changed paint props maybe
                        _this.mapInstance.setPaintProperty(layerId, key, (( /** @type {?} */(paint)))[key]);
                    });
                });
            };
        /**
         * @param {?} layerId
         * @param {?} layout
         * @return {?}
         */
        MapService.prototype.setAllLayerLayoutProperty = /**
         * @param {?} layerId
         * @param {?} layout
         * @return {?}
         */
            function (layerId, layout) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    Object.keys(layout).forEach(function (key) {
                        // TODO Check for perf, setPaintProperty only on changed paint props maybe
                        _this.mapInstance.setLayoutProperty(layerId, key, (( /** @type {?} */(layout)))[key]);
                    });
                });
            };
        /**
         * @param {?} layerId
         * @param {?} filter
         * @return {?}
         */
        MapService.prototype.setLayerFilter = /**
         * @param {?} layerId
         * @param {?} filter
         * @return {?}
         */
            function (layerId, filter) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    _this.mapInstance.setFilter(layerId, filter);
                });
            };
        /**
         * @param {?} layerId
         * @param {?} beforeId
         * @return {?}
         */
        MapService.prototype.setLayerBefore = /**
         * @param {?} layerId
         * @param {?} beforeId
         * @return {?}
         */
            function (layerId, beforeId) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    _this.mapInstance.moveLayer(layerId, beforeId);
                });
            };
        /**
         * @param {?} layerId
         * @param {?=} minZoom
         * @param {?=} maxZoom
         * @return {?}
         */
        MapService.prototype.setLayerZoomRange = /**
         * @param {?} layerId
         * @param {?=} minZoom
         * @param {?=} maxZoom
         * @return {?}
         */
            function (layerId, minZoom, maxZoom) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    _this.mapInstance.setLayerZoomRange(layerId, minZoom ? minZoom : 0, maxZoom ? maxZoom : 20);
                });
            };
        /**
         * @param {?} bounds
         * @param {?=} options
         * @return {?}
         */
        MapService.prototype.fitBounds = /**
         * @param {?} bounds
         * @param {?=} options
         * @return {?}
         */
            function (bounds, options) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    _this.mapInstance.fitBounds(bounds, options);
                });
            };
        /**
         * @param {?} points
         * @param {?} bearing
         * @param {?=} options
         * @return {?}
         */
        MapService.prototype.fitScreenCoordinates = /**
         * @param {?} points
         * @param {?} bearing
         * @param {?=} options
         * @return {?}
         */
            function (points, bearing, options) {
                var _this = this;
                return this.zone.runOutsideAngular(function () {
                    _this.mapInstance.fitScreenCoordinates(points[0], points[1], bearing, options);
                });
            };
        /**
         * @return {?}
         */
        MapService.prototype.getCurrentViewportBbox = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var canvas = this.mapInstance.getCanvas();
                /** @type {?} */
                var w = parseInt(( /** @type {?} */(canvas.style.width)), 10);
                /** @type {?} */
                var h = parseInt(( /** @type {?} */(canvas.style.height)), 10);
                /** @type {?} */
                var upLeft = this.mapInstance.unproject([0, 0]).toArray();
                /** @type {?} */
                var upRight = this.mapInstance.unproject([w, 0]).toArray();
                /** @type {?} */
                var downRight = this.mapInstance.unproject([w, h]).toArray();
                /** @type {?} */
                var downLeft = this.mapInstance.unproject([0, h]).toArray();
                return ( /** @type {?} */(bbox(helpers.polygon([[upLeft, upRight, downRight, downLeft, upLeft]]))));
            };
        /**
         * @return {?}
         */
        MapService.prototype.applyChanges = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.zone.runOutsideAngular(function () {
                    _this.removeLayers();
                    _this.removeSources();
                    _this.removeMarkers();
                    _this.removePopups();
                    _this.removeImages();
                });
            };
        /**
         * @param {?} options
         * @return {?}
         */
        MapService.prototype.createMap = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                var _this = this;
                core.NgZone.assertNotInAngularZone();
                Object.keys(options)
                    .forEach(function (key) {
                    /** @type {?} */
                    var tkey = ( /** @type {?} */(key));
                    if (options[tkey] === undefined) {
                        delete options[tkey];
                    }
                });
                this.mapInstance = new MapboxGl.Map(options);
                /** @type {?} */
                var subChanges = this.zone.onMicrotaskEmpty
                    .subscribe(function () { return _this.applyChanges(); });
                if (this.MglResizeEventEmitter) {
                    /** @type {?} */
                    var subResize = this.MglResizeEventEmitter.resizeEvent.subscribe(function () {
                        _this.mapInstance.resize();
                    });
                    this.subscription.add(subResize);
                }
                this.subscription.add(subChanges);
            };
        /**
         * @return {?}
         */
        MapService.prototype.removeLayers = /**
         * @return {?}
         */
            function () {
                var e_1, _a;
                try {
                    for (var _b = __values(this.layerIdsToRemove), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var layerId = _c.value;
                        this.mapInstance.removeLayer(layerId);
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                this.layerIdsToRemove = [];
            };
        /**
         * @return {?}
         */
        MapService.prototype.removeSources = /**
         * @return {?}
         */
            function () {
                var e_2, _a;
                try {
                    for (var _b = __values(this.sourceIdsToRemove), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var sourceId = _c.value;
                        this.mapInstance.removeSource(sourceId);
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                this.sourceIdsToRemove = [];
            };
        /**
         * @return {?}
         */
        MapService.prototype.removeMarkers = /**
         * @return {?}
         */
            function () {
                var e_3, _a;
                try {
                    for (var _b = __values(this.markersToRemove), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var marker = _c.value;
                        marker.remove();
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
                this.markersToRemove = [];
            };
        /**
         * @return {?}
         */
        MapService.prototype.removePopups = /**
         * @return {?}
         */
            function () {
                var e_4, _a;
                try {
                    for (var _b = __values(this.popupsToRemove), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var popup = _c.value;
                        popup.remove();
                    }
                }
                catch (e_4_1) {
                    e_4 = { error: e_4_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_4)
                            throw e_4.error;
                    }
                }
                this.popupsToRemove = [];
            };
        /**
         * @return {?}
         */
        MapService.prototype.removeImages = /**
         * @return {?}
         */
            function () {
                var e_5, _a;
                try {
                    for (var _b = __values(this.imageIdsToRemove), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var imageId = _c.value;
                        this.mapInstance.removeImage(imageId);
                    }
                }
                catch (e_5_1) {
                    e_5 = { error: e_5_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_5)
                            throw e_5.error;
                    }
                }
                this.imageIdsToRemove = [];
            };
        /**
         * @param {?} events
         * @return {?}
         */
        MapService.prototype.hookEvents = /**
         * @param {?} events
         * @return {?}
         */
            function (events) {
                var _this = this;
                this.mapInstance.on('load', function () {
                    _this.mapLoaded.next(undefined);
                    _this.mapLoaded.complete();
                    _this.zone.run(function () { return events.load.emit(_this.mapInstance); });
                });
                if (events.resize.observers.length) {
                    this.mapInstance.on('resize', function () { return _this.zone.run(function () { return events.resize.emit(); }); });
                }
                if (events.remove.observers.length) {
                    this.mapInstance.on('remove', function () { return _this.zone.run(function () { return events.remove.emit(); }); });
                }
                if (events.mouseDown.observers.length) {
                    this.mapInstance.on('mousedown', function (evt) { return _this.zone.run(function () { return events.mouseDown.emit(evt); }); });
                }
                if (events.mouseUp.observers.length) {
                    this.mapInstance.on('mouseup', function (evt) { return _this.zone.run(function () { return events.mouseUp.emit(evt); }); });
                }
                if (events.mouseMove.observers.length) {
                    this.mapInstance.on('mousemove', function (evt) { return _this.zone.run(function () { return events.mouseMove.emit(evt); }); });
                }
                if (events.click.observers.length) {
                    this.mapInstance.on('click', function (evt) { return _this.zone.run(function () { return events.click.emit(evt); }); });
                }
                if (events.dblClick.observers.length) {
                    this.mapInstance.on('dblclick', function (evt) { return _this.zone.run(function () { return events.dblClick.emit(evt); }); });
                }
                if (events.mouseEnter.observers.length) {
                    this.mapInstance.on('mouseenter', function (evt) { return _this.zone.run(function () { return events.mouseEnter.emit(evt); }); });
                }
                if (events.mouseLeave.observers.length) {
                    this.mapInstance.on('mouseleave', function (evt) { return _this.zone.run(function () { return events.mouseLeave.emit(evt); }); });
                }
                if (events.mouseOver.observers.length) {
                    this.mapInstance.on('mouseover', function (evt) { return _this.zone.run(function () { return events.mouseOver.emit(evt); }); });
                }
                if (events.mouseOut.observers.length) {
                    this.mapInstance.on('mouseout', function (evt) { return _this.zone.run(function () { return events.mouseOut.emit(evt); }); });
                }
                if (events.contextMenu.observers.length) {
                    this.mapInstance.on('contextmenu', function (evt) { return _this.zone.run(function () { return events.contextMenu.emit(evt); }); });
                }
                if (events.touchStart.observers.length) {
                    this.mapInstance.on('touchstart', function (evt) { return _this.zone.run(function () { return events.touchStart.emit(evt); }); });
                }
                if (events.touchEnd.observers.length) {
                    this.mapInstance.on('touchend', function (evt) { return _this.zone.run(function () { return events.touchEnd.emit(evt); }); });
                }
                if (events.touchMove.observers.length) {
                    this.mapInstance.on('touchmove', function (evt) { return _this.zone.run(function () { return events.touchMove.emit(evt); }); });
                }
                if (events.touchCancel.observers.length) {
                    this.mapInstance.on('touchcancel', function (evt) { return _this.zone.run(function () { return events.touchCancel.emit(evt); }); });
                }
                if (events.wheel.observers.length) {
                    // MapboxGl.MapWheelEvent
                    this.mapInstance.on('wheel', function (evt) { return _this.zone.run(function () { return events.wheel.emit(evt); }); });
                }
                if (events.moveStart.observers.length) {
                    this.mapInstance.on('movestart', function (evt) { return _this.zone.run(function () { return events.moveStart.emit(evt); }); });
                }
                if (events.move.observers.length) {
                    this.mapInstance.on('move', function (evt) { return _this.zone.run(function () { return events.move.emit(evt); }); });
                }
                if (events.moveEnd.observers.length) {
                    this.mapInstance.on('moveend', function (evt) { return _this.zone.run(function () { return events.moveEnd.emit(evt); }); });
                }
                if (events.dragStart.observers.length) {
                    this.mapInstance.on('dragstart', function (evt) { return _this.zone.run(function () { return events.dragStart.emit(evt); }); });
                }
                if (events.drag.observers.length) {
                    this.mapInstance.on('drag', function (evt) { return _this.zone.run(function () { return events.drag.emit(evt); }); });
                }
                if (events.dragEnd.observers.length) {
                    this.mapInstance.on('dragend', function (evt) { return _this.zone.run(function () { return events.dragEnd.emit(evt); }); });
                }
                if (events.zoomStart.observers.length) {
                    this.mapInstance.on('zoomstart', function (evt) {
                        return _this.zone.run(function () {
                            return events.zoomStart.emit(evt);
                        });
                    });
                }
                if (events.zoomEvt.observers.length) {
                    this.mapInstance.on('zoom', function (evt) { return _this.zone.run(function () { return events.zoomEvt.emit(evt); }); });
                }
                if (events.zoomEnd.observers.length) {
                    this.mapInstance.on('zoomend', function (evt) {
                        return _this.zone.run(function () {
                            return events.zoomEnd.emit(evt);
                        });
                    });
                }
                if (events.rotateStart.observers.length) {
                    this.mapInstance.on('rotatestart', function (evt) {
                        return _this.zone.run(function () {
                            return events.rotateStart.emit(evt);
                        });
                    });
                }
                if (events.rotate.observers.length) {
                    this.mapInstance.on('rotate', function (evt) { return _this.zone.run(function () { return events.rotate.emit(evt); }); });
                }
                if (events.rotateEnd.observers.length) {
                    this.mapInstance.on('rotateend', function (evt) {
                        return _this.zone.run(function () {
                            return events.rotateEnd.emit(evt);
                        });
                    });
                }
                if (events.pitchStart.observers.length) {
                    this.mapInstance.on('pitchstart', function (evt) { return _this.zone.run(function () { return events.pitchStart.emit(evt); }); });
                }
                if (events.pitchEvt.observers.length) {
                    this.mapInstance.on('pitch', function (evt) { return _this.zone.run(function () { return events.pitchEvt.emit(evt); }); });
                }
                if (events.pitchEnd.observers.length) {
                    this.mapInstance.on('pitchend', function (evt) { return _this.zone.run(function () { return events.pitchEnd.emit(evt); }); });
                }
                if (events.boxZoomStart.observers.length) {
                    this.mapInstance.on('boxzoomstart', function (evt) { return _this.zone.run(function () { return events.boxZoomStart.emit(evt); }); });
                }
                if (events.boxZoomEnd.observers.length) {
                    this.mapInstance.on('boxzoomend', function (evt) { return _this.zone.run(function () { return events.boxZoomEnd.emit(evt); }); });
                }
                if (events.boxZoomCancel.observers.length) {
                    this.mapInstance.on('boxzoomcancel', function (evt) { return _this.zone.run(function () { return events.boxZoomCancel.emit(evt); }); });
                }
                if (events.webGlContextLost.observers.length) {
                    this.mapInstance.on('webglcontextlost', function () { return _this.zone.run(function () { return events.webGlContextLost.emit(); }); });
                }
                if (events.webGlContextRestored.observers.length) {
                    this.mapInstance.on('webglcontextrestored', function () { return _this.zone.run(function () { return events.webGlContextRestored.emit(); }); });
                }
                if (events.render.observers.length) {
                    this.mapInstance.on('render', function () { return _this.zone.run(function () { return events.render.emit(); }); });
                }
                if (events.error.observers.length) {
                    this.mapInstance.on('error', function () { return _this.zone.run(function () { return events.error.emit(); }); });
                }
                if (events.data.observers.length) {
                    this.mapInstance.on('data', function (evt) { return _this.zone.run(function () { return events.data.emit(evt); }); });
                }
                if (events.styleData.observers.length) {
                    this.mapInstance.on('styledata', function (evt) { return _this.zone.run(function () { return events.styleData.emit(evt); }); });
                }
                if (events.sourceData.observers.length) {
                    this.mapInstance.on('sourcedata', function (evt) { return _this.zone.run(function () { return events.sourceData.emit(evt); }); });
                }
                if (events.dataLoading.observers.length) {
                    this.mapInstance.on('dataloading', function (evt) { return _this.zone.run(function () { return events.dataLoading.emit(evt); }); });
                }
                if (events.styleDataLoading.observers.length) {
                    this.mapInstance.on('styledataloading', function (evt) { return _this.zone.run(function () { return events.styleDataLoading.emit(evt); }); });
                }
                if (events.sourceDataLoading.observers.length) {
                    this.mapInstance.on('sourcedataloading', function (evt) { return _this.zone.run(function () { return events.sourceDataLoading.emit(evt); }); });
                }
            };
        // TODO move this elsewhere
        // TODO move this elsewhere
        /**
         * @param {?} obj
         * @param {?} prop
         * @param {?} value
         * @return {?}
         */
        MapService.prototype.assign =
            // TODO move this elsewhere
            /**
             * @param {?} obj
             * @param {?} prop
             * @param {?} value
             * @return {?}
             */
            function (obj, prop, value) {
                if (typeof prop === 'string') {
                    // tslint:disable-next-line:no-parameter-reassignment
                    prop = prop.split('.');
                }
                if (prop.length > 1) {
                    /** @type {?} */
                    var e = prop.shift();
                    this.assign(obj[e] =
                        Object.prototype.toString.call(obj[e]) === '[object Object]'
                            ? obj[e]
                            : {}, prop, value);
                }
                else {
                    obj[prop[0]] = value;
                }
            };
        MapService.decorators = [
            { type: core.Injectable }
        ];
        MapService.ctorParameters = function () {
            return [
                { type: core.NgZone },
                { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [MAPBOX_API_KEY,] }] },
                { type: MglResizeEventEmitter, decorators: [{ type: core.Optional }] }
            ];
        };
        return MapService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CustomControl = /** @class */ (function () {
        function CustomControl(container) {
            this.container = container;
        }
        /**
         * @return {?}
         */
        CustomControl.prototype.onAdd = /**
         * @return {?}
         */
            function () {
                return this.container;
            };
        /**
         * @return {?}
         */
        CustomControl.prototype.onRemove = /**
         * @return {?}
         */
            function () {
                return ( /** @type {?} */(this.container.parentNode)).removeChild(this.container);
            };
        /**
         * @return {?}
         */
        CustomControl.prototype.getDefaultPosition = /**
         * @return {?}
         */
            function () {
                return 'top-right';
            };
        return CustomControl;
    }());
    var ControlComponent = /** @class */ (function () {
        function ControlComponent(MapService$$1) {
            this.MapService = MapService$$1;
        }
        /**
         * @return {?}
         */
        ControlComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.content.nativeElement.childNodes.length) {
                    this.control = new CustomControl(this.content.nativeElement);
                    this.MapService.mapCreated$.subscribe(function () {
                        _this.MapService.addControl(( /** @type {?} */(_this.control)), _this.position);
                    });
                }
            };
        /**
         * @return {?}
         */
        ControlComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.control) {
                    this.MapService.removeControl(this.control);
                }
            };
        ControlComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mgl-control',
                        template: '<div class="mapboxgl-ctrl" #content><ng-content></ng-content></div>',
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        ControlComponent.ctorParameters = function () {
            return [
                { type: MapService }
            ];
        };
        ControlComponent.propDecorators = {
            position: [{ type: core.Input }],
            content: [{ type: core.ViewChild, args: ['content',] }]
        };
        return ControlComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var AttributionControlDirective = /** @class */ (function () {
        function AttributionControlDirective(MapService$$1, ControlComponent$$1) {
            this.MapService = MapService$$1;
            this.ControlComponent = ControlComponent$$1;
        }
        /**
         * @return {?}
         */
        AttributionControlDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.MapService.mapCreated$.subscribe(function () {
                    if (_this.ControlComponent.control) {
                        throw new Error('Another control is already set for this control');
                    }
                    /** @type {?} */
                    var options = {};
                    if (_this.compact !== undefined) {
                        options.compact = _this.compact;
                    }
                    _this.ControlComponent.control = new MapboxGl.AttributionControl(options);
                    _this.MapService.addControl(_this.ControlComponent.control, _this.ControlComponent.position);
                });
            };
        AttributionControlDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mglAttribution]'
                    },] }
        ];
        AttributionControlDirective.ctorParameters = function () {
            return [
                { type: MapService },
                { type: ControlComponent, decorators: [{ type: core.Host }] }
            ];
        };
        AttributionControlDirective.propDecorators = {
            compact: [{ type: core.Input }]
        };
        return AttributionControlDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FullscreenControlDirective = /** @class */ (function () {
        function FullscreenControlDirective(MapService$$1, ControlComponent$$1) {
            this.MapService = MapService$$1;
            this.ControlComponent = ControlComponent$$1;
        }
        /**
         * @return {?}
         */
        FullscreenControlDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.MapService.mapCreated$.subscribe(function () {
                    if (_this.ControlComponent.control) {
                        throw new Error('Another control is already set for this control');
                    }
                    _this.ControlComponent.control = new MapboxGl.FullscreenControl();
                    _this.MapService.addControl(_this.ControlComponent.control, _this.ControlComponent.position);
                });
            };
        FullscreenControlDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mglFullscreen]'
                    },] }
        ];
        FullscreenControlDirective.ctorParameters = function () {
            return [
                { type: MapService },
                { type: ControlComponent, decorators: [{ type: core.Host }] }
            ];
        };
        return FullscreenControlDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MapboxGeocoder = require('@mapbox/mapbox-gl-geocoder');
    /** @type {?} */
    var MAPBOX_GEOCODER_API_KEY = new core.InjectionToken('MapboxApiKey');
    var GeocoderControlDirective = /** @class */ (function () {
        function GeocoderControlDirective(MapService$$1, zone, ControlComponent$$1, MAPBOX_GEOCODER_API_KEY) {
            this.MapService = MapService$$1;
            this.zone = zone;
            this.ControlComponent = ControlComponent$$1;
            this.MAPBOX_GEOCODER_API_KEY = MAPBOX_GEOCODER_API_KEY;
            this.clear = new core.EventEmitter();
            this.loading = new core.EventEmitter();
            this.results = new core.EventEmitter();
            this.result = new core.EventEmitter();
            this.error = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        GeocoderControlDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.MapService.mapCreated$.subscribe(function () {
                    if (_this.ControlComponent.control) {
                        throw new Error('Another control is already set for this control');
                    }
                    /** @type {?} */
                    var options = {
                        proximity: _this.proximity,
                        country: _this.country,
                        placeholder: _this.placeholder,
                        zoom: _this.zoom,
                        bbox: _this.bbox,
                        types: _this.types,
                        flyTo: _this.flyTo,
                        minLength: _this.minLength,
                        limit: _this.limit,
                        language: _this.language,
                        filter: _this.filter,
                        localGeocoder: _this.localGeocoder,
                        accessToken: _this.accessToken || _this.MAPBOX_GEOCODER_API_KEY
                    };
                    Object.keys(options).forEach(function (key) {
                        /** @type {?} */
                        var tkey = ( /** @type {?} */(key));
                        if (options[tkey] === undefined) {
                            delete options[tkey];
                        }
                    });
                    _this.geocoder = new MapboxGeocoder(options);
                    _this.hookEvents(_this);
                    _this.addControl();
                });
                if (this.searchInput) {
                    this.MapService.mapLoaded$.subscribe(function () {
                        _this.geocoder.query(_this.searchInput);
                    });
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        GeocoderControlDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (!this.geocoder) {
                    return;
                }
                if (changes.proximity && !changes.proximity.isFirstChange()) {
                    this.geocoder.setProximity(changes.proximity.currentValue);
                }
                if (changes.searchInput) {
                    this.geocoder.query(this.searchInput);
                }
            };
        /**
         * @return {?}
         */
        GeocoderControlDirective.prototype.addControl = /**
         * @return {?}
         */
            function () {
                this.ControlComponent.control = this.geocoder;
                this.MapService.addControl(this.ControlComponent.control, this.ControlComponent.position);
            };
        /**
         * @param {?} events
         * @return {?}
         */
        GeocoderControlDirective.prototype.hookEvents = /**
         * @param {?} events
         * @return {?}
         */
            function (events) {
                var _this = this;
                if (events.results.observers.length) {
                    this.geocoder.on('results', function (evt) { return _this.zone.run(function () { return events.results.emit(evt); }); });
                }
                if (events.result.observers.length) {
                    this.geocoder.on('result', function (evt) {
                        // Workaroud issue https://github.com/mapbox/mapbox-gl-geocoder/issues/99
                        if (_this.lastResultId !== evt.result.id) {
                            _this.lastResultId = evt.result.id;
                            _this.zone.run(function () { return events.result.emit(evt); });
                        }
                    });
                }
                if (events.error.observers.length) {
                    this.geocoder.on('error', function (evt) { return _this.zone.run(function () { return events.error.emit(evt); }); });
                }
                if (events.loading.observers.length) {
                    this.geocoder.on('loading', function (evt) { return _this.zone.run(function () { return events.loading.emit(evt); }); });
                }
                if (events.clear.observers.length) {
                    this.geocoder.on('clear', function () { return _this.zone.run(function () { return events.clear.emit(); }); });
                }
            };
        GeocoderControlDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mglGeocoder]'
                    },] }
        ];
        GeocoderControlDirective.ctorParameters = function () {
            return [
                { type: MapService },
                { type: core.NgZone },
                { type: ControlComponent, decorators: [{ type: core.Host }] },
                { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [MAPBOX_GEOCODER_API_KEY,] }] }
            ];
        };
        GeocoderControlDirective.propDecorators = {
            country: [{ type: core.Input }],
            placeholder: [{ type: core.Input }],
            zoom: [{ type: core.Input }],
            bbox: [{ type: core.Input }],
            types: [{ type: core.Input }],
            flyTo: [{ type: core.Input }],
            minLength: [{ type: core.Input }],
            limit: [{ type: core.Input }],
            language: [{ type: core.Input }],
            accessToken: [{ type: core.Input }],
            filter: [{ type: core.Input }],
            localGeocoder: [{ type: core.Input }],
            proximity: [{ type: core.Input }],
            searchInput: [{ type: core.Input }],
            clear: [{ type: core.Output }],
            loading: [{ type: core.Output }],
            results: [{ type: core.Output }],
            result: [{ type: core.Output }],
            error: [{ type: core.Output }]
        };
        return GeocoderControlDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var GeolocateControlDirective = /** @class */ (function () {
        function GeolocateControlDirective(MapService$$1, ControlComponent$$1) {
            this.MapService = MapService$$1;
            this.ControlComponent = ControlComponent$$1;
        }
        /**
         * @return {?}
         */
        GeolocateControlDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.MapService.mapCreated$.subscribe(function () {
                    if (_this.ControlComponent.control) {
                        throw new Error('Another control is already set for this control');
                    }
                    /** @type {?} */
                    var options = {
                        positionOptions: _this.positionOptions,
                        fitBoundsOptions: _this.fitBoundsOptions,
                        trackUserLocation: _this.trackUserLocation,
                        showUserLocation: _this.showUserLocation
                    };
                    Object.keys(options)
                        .forEach(function (key) {
                        /** @type {?} */
                        var tkey = ( /** @type {?} */(key));
                        if (options[tkey] === undefined) {
                            delete options[tkey];
                        }
                    });
                    _this.ControlComponent.control = new MapboxGl.GeolocateControl(options);
                    _this.MapService.addControl(_this.ControlComponent.control, _this.ControlComponent.position);
                });
            };
        GeolocateControlDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mglGeolocate]'
                    },] }
        ];
        GeolocateControlDirective.ctorParameters = function () {
            return [
                { type: MapService },
                { type: ControlComponent, decorators: [{ type: core.Host }] }
            ];
        };
        GeolocateControlDirective.propDecorators = {
            positionOptions: [{ type: core.Input }],
            fitBoundsOptions: [{ type: core.Input }],
            trackUserLocation: [{ type: core.Input }],
            showUserLocation: [{ type: core.Input }]
        };
        return GeolocateControlDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NavigationControlDirective = /** @class */ (function () {
        function NavigationControlDirective(MapService$$1, ControlComponent$$1) {
            this.MapService = MapService$$1;
            this.ControlComponent = ControlComponent$$1;
        }
        /**
         * @return {?}
         */
        NavigationControlDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.MapService.mapCreated$.subscribe(function () {
                    if (_this.ControlComponent.control) {
                        throw new Error('Another control is already set for this control');
                    }
                    /** @type {?} */
                    var options = {};
                    if (_this.showCompass !== undefined) {
                        options.showCompass = _this.showCompass;
                    }
                    if (_this.showZoom !== undefined) {
                        options.showZoom = _this.showZoom;
                    }
                    _this.ControlComponent.control = new MapboxGl.NavigationControl(options);
                    _this.MapService.addControl(_this.ControlComponent.control, _this.ControlComponent.position);
                });
            };
        NavigationControlDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mglNavigation]'
                    },] }
        ];
        NavigationControlDirective.ctorParameters = function () {
            return [
                { type: MapService },
                { type: ControlComponent, decorators: [{ type: core.Host }] }
            ];
        };
        NavigationControlDirective.propDecorators = {
            showCompass: [{ type: core.Input }],
            showZoom: [{ type: core.Input }]
        };
        return NavigationControlDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ScaleControlDirective = /** @class */ (function () {
        function ScaleControlDirective(MapService$$1, ControlComponent$$1) {
            this.MapService = MapService$$1;
            this.ControlComponent = ControlComponent$$1;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        ScaleControlDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.unit && !changes.unit.isFirstChange()) {
                    (( /** @type {?} */(this.ControlComponent.control))).setUnit(changes.unit.currentValue);
                }
            };
        /**
         * @return {?}
         */
        ScaleControlDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.MapService.mapCreated$.subscribe(function () {
                    if (_this.ControlComponent.control) {
                        throw new Error('Another control is already set for this control');
                    }
                    /** @type {?} */
                    var options = {};
                    if (_this.maxWidth !== undefined) {
                        options.maxWidth = _this.maxWidth;
                    }
                    if (_this.unit !== undefined) {
                        options.unit = _this.unit;
                    }
                    _this.ControlComponent.control = new MapboxGl.ScaleControl(options);
                    _this.MapService.addControl(_this.ControlComponent.control, _this.ControlComponent.position);
                });
            };
        ScaleControlDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mglScale]'
                    },] }
        ];
        ScaleControlDirective.ctorParameters = function () {
            return [
                { type: MapService },
                { type: ControlComponent, decorators: [{ type: core.Host }] }
            ];
        };
        ScaleControlDirective.propDecorators = {
            maxWidth: [{ type: core.Input }],
            unit: [{ type: core.Input }]
        };
        return ScaleControlDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var MarkerComponent = /** @class */ (function () {
        function MarkerComponent(MapService$$1) {
            this.MapService = MapService$$1;
            this.dragStart = new core.EventEmitter();
            this.drag = new core.EventEmitter();
            this.dragEnd = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        MarkerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.feature && this.lngLat) {
                    throw new Error('feature and lngLat input are mutually exclusive');
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        MarkerComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.lngLat && !changes.lngLat.isFirstChange()) {
                    ( /** @type {?} */(this.markerInstance)).setLngLat(( /** @type {?} */(this.lngLat)));
                }
                if (changes.feature && !changes.feature.isFirstChange()) {
                    ( /** @type {?} */(this.markerInstance)).setLngLat(( /** @type {?} */(( /** @type {?} */(( /** @type {?} */(this.feature)).geometry)).coordinates)));
                }
                if (changes.draggable && !changes.draggable.isFirstChange()) {
                    ( /** @type {?} */(this.markerInstance)).setDraggable(!!this.draggable);
                }
            };
        /**
         * @return {?}
         */
        MarkerComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.MapService.mapCreated$.subscribe(function () {
                    _this.markerInstance = _this.MapService.addMarker({
                        markersOptions: {
                            offset: _this.offset,
                            anchor: _this.anchor,
                            draggable: !!_this.draggable,
                            element: _this.content.nativeElement,
                            feature: _this.feature,
                            lngLat: _this.lngLat
                        },
                        markersEvents: {
                            dragStart: _this.dragStart,
                            drag: _this.drag,
                            dragEnd: _this.dragEnd
                        }
                    });
                });
            };
        /**
         * @return {?}
         */
        MarkerComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.MapService.removeMarker(( /** @type {?} */(this.markerInstance)));
                this.markerInstance = undefined;
            };
        /**
         * @return {?}
         */
        MarkerComponent.prototype.togglePopup = /**
         * @return {?}
         */
            function () {
                ( /** @type {?} */(this.markerInstance)).togglePopup();
            };
        /**
         * @param {?} coordinates
         * @return {?}
         */
        MarkerComponent.prototype.updateCoordinates = /**
         * @param {?} coordinates
         * @return {?}
         */
            function (coordinates) {
                ( /** @type {?} */(this.markerInstance)).setLngLat(coordinates);
            };
        MarkerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mgl-marker',
                        template: '<div #content><ng-content></ng-content></div>',
                        encapsulation: core.ViewEncapsulation.None,
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: ["\n    .mapboxgl-marker {\n      line-height: 0;\n    }\n  "]
                    }] }
        ];
        MarkerComponent.ctorParameters = function () {
            return [
                { type: MapService }
            ];
        };
        MarkerComponent.propDecorators = {
            offset: [{ type: core.Input }],
            anchor: [{ type: core.Input }],
            feature: [{ type: core.Input }],
            lngLat: [{ type: core.Input }],
            draggable: [{ type: core.Input }],
            dragStart: [{ type: core.Output }],
            drag: [{ type: core.Output }],
            dragEnd: [{ type: core.Output }],
            content: [{ type: core.ViewChild, args: ['content',] }]
        };
        return MarkerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var GeoJSONSourceComponent = /** @class */ (function () {
        function GeoJSONSourceComponent(MapService$$1) {
            this.MapService = MapService$$1;
            this.updateFeatureData = new rxjs.Subject();
            this.sub = new rxjs.Subscription();
            this.sourceAdded = false;
            this.featureIdCounter = 0;
        }
        /**
         * @return {?}
         */
        GeoJSONSourceComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.data) {
                    this.data = {
                        type: 'FeatureCollection',
                        features: []
                    };
                }
                this.MapService.mapLoaded$.subscribe(function () {
                    _this.init();
                    /** @type {?} */
                    var sub = rxjs.fromEvent(( /** @type {?} */(_this.MapService.mapInstance)), 'styledata').pipe(operators.filter(function () { return !_this.MapService.mapInstance.getSource(_this.id); })).subscribe(function () {
                        _this.init();
                    });
                    _this.sub.add(sub);
                });
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        GeoJSONSourceComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (!this.sourceAdded) {
                    return;
                }
                if (changes.maxzoom && !changes.maxzoom.isFirstChange() ||
                    changes.minzoom && !changes.minzoom.isFirstChange() ||
                    changes.buffer && !changes.buffer.isFirstChange() ||
                    changes.tolerance && !changes.tolerance.isFirstChange() ||
                    changes.cluster && !changes.cluster.isFirstChange() ||
                    changes.clusterRadius && !changes.clusterRadius.isFirstChange() ||
                    changes.clusterMaxZoom && !changes.clusterMaxZoom.isFirstChange()) {
                    this.ngOnDestroy();
                    this.ngOnInit();
                }
                if (changes.data && !changes.data.isFirstChange()) {
                    /** @type {?} */
                    var source = this.MapService.getSource(this.id);
                    source.setData(( /** @type {?} */(this.data)));
                }
            };
        /**
         * @return {?}
         */
        GeoJSONSourceComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.sub.unsubscribe();
                if (this.sourceAdded) {
                    this.MapService.removeSource(this.id);
                }
            };
        /**
         * @param {?} feature
         * @return {?}
         */
        GeoJSONSourceComponent.prototype.addFeature = /**
         * @param {?} feature
         * @return {?}
         */
            function (feature) {
                /** @type {?} */
                var collection = ( /** @type {?} */(this.data));
                collection.features.push(feature);
                this.updateFeatureData.next();
            };
        /**
         * @param {?} feature
         * @return {?}
         */
        GeoJSONSourceComponent.prototype.removeFeature = /**
         * @param {?} feature
         * @return {?}
         */
            function (feature) {
                /** @type {?} */
                var collection = ( /** @type {?} */(this.data));
                /** @type {?} */
                var index = collection.features.indexOf(feature);
                if (index > -1) {
                    collection.features.splice(index, 1);
                }
                this.updateFeatureData.next();
            };
        /**
         * @return {?}
         */
        GeoJSONSourceComponent.prototype.getNewFeatureId = /**
         * @return {?}
         */
            function () {
                return ++this.featureIdCounter;
            };
        /**
         * @return {?}
         */
        GeoJSONSourceComponent.prototype.init = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.MapService.addSource(this.id, {
                    type: 'geojson',
                    data: this.data,
                    maxzoom: this.maxzoom,
                    minzoom: this.minzoom,
                    buffer: this.buffer,
                    tolerance: this.tolerance,
                    cluster: this.cluster,
                    clusterRadius: this.clusterRadius,
                    clusterMaxZoom: this.clusterMaxZoom,
                });
                /** @type {?} */
                var sub = this.updateFeatureData.pipe(operators.debounceTime(0)).subscribe(function () {
                    /** @type {?} */
                    var source = _this.MapService.getSource(_this.id);
                    source.setData(( /** @type {?} */(_this.data)));
                });
                this.sub.add(sub);
                this.sourceAdded = true;
            };
        GeoJSONSourceComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mgl-geojson-source',
                        template: '',
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        GeoJSONSourceComponent.ctorParameters = function () {
            return [
                { type: MapService }
            ];
        };
        GeoJSONSourceComponent.propDecorators = {
            id: [{ type: core.Input }],
            data: [{ type: core.Input }],
            minzoom: [{ type: core.Input }],
            maxzoom: [{ type: core.Input }],
            buffer: [{ type: core.Input }],
            tolerance: [{ type: core.Input }],
            cluster: [{ type: core.Input }],
            clusterRadius: [{ type: core.Input }],
            clusterMaxZoom: [{ type: core.Input }]
        };
        return GeoJSONSourceComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FeatureComponent = /** @class */ (function () {
        function FeatureComponent(GeoJSONSourceComponent$$1) {
            this.GeoJSONSourceComponent = GeoJSONSourceComponent$$1;
            this.type = 'Feature';
        }
        /**
         * @return {?}
         */
        FeatureComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (!this.id) {
                    this.id = this.GeoJSONSourceComponent.getNewFeatureId();
                }
                this.feature = {
                    type: this.type,
                    geometry: this.geometry,
                    properties: this.properties ? this.properties : {}
                };
                this.feature.id = this.id;
                this.GeoJSONSourceComponent.addFeature(this.feature);
            };
        /**
         * @return {?}
         */
        FeatureComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.GeoJSONSourceComponent.removeFeature(this.feature);
            };
        /**
         * @param {?} coordinates
         * @return {?}
         */
        FeatureComponent.prototype.updateCoordinates = /**
         * @param {?} coordinates
         * @return {?}
         */
            function (coordinates) {
                (( /** @type {?} */(this.feature.geometry))).coordinates = coordinates;
                this.GeoJSONSourceComponent.updateFeatureData.next();
            };
        FeatureComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mgl-feature',
                        template: '',
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        FeatureComponent.ctorParameters = function () {
            return [
                { type: GeoJSONSourceComponent, decorators: [{ type: core.Inject, args: [core.forwardRef(function () { return GeoJSONSourceComponent; }),] }] }
            ];
        };
        FeatureComponent.propDecorators = {
            id: [{ type: core.Input }],
            geometry: [{ type: core.Input }],
            properties: [{ type: core.Input }]
        };
        return FeatureComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DraggableDirective = /** @class */ (function () {
        function DraggableDirective(MapService$$1, NgZone, FeatureComponent$$1, MarkerComponent$$1) {
            this.MapService = MapService$$1;
            this.NgZone = NgZone;
            this.FeatureComponent = FeatureComponent$$1;
            this.MarkerComponent = MarkerComponent$$1;
            this.dragStart = new core.EventEmitter();
            this.dragEnd = new core.EventEmitter();
            this.drag = new core.EventEmitter();
            this.destroyed$ = new rxjs.ReplaySubject(1);
        }
        /**
         * @return {?}
         */
        DraggableDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var enter$;
                /** @type {?} */
                var leave$;
                /** @type {?} */
                var updateCoords;
                if (this.MarkerComponent) {
                    console.warn('[ngx-mapbox-gl] mglDraggable on Marker is deprecated, use draggable input instead');
                    /** @type {?} */
                    var markerElement = (( /** @type {?} */(this.MarkerComponent.content.nativeElement)));
                    if (markerElement.children.length === 1) {
                        markerElement = markerElement.children[0];
                    }
                    enter$ = rxjs.fromEvent(markerElement, 'mouseenter');
                    leave$ = rxjs.fromEvent(markerElement, 'mouseleave');
                    updateCoords = this.MarkerComponent.updateCoordinates.bind(this.MarkerComponent);
                }
                else if (this.FeatureComponent && this.layer) {
                    enter$ = this.layer.mouseEnter;
                    leave$ = this.layer.mouseLeave;
                    updateCoords = this.FeatureComponent.updateCoordinates.bind(this.FeatureComponent);
                    if (this.FeatureComponent.geometry.type !== 'Point') {
                        throw new Error('mglDraggable only support point feature');
                    }
                }
                else {
                    throw new Error('mglDraggable can only be used on Feature (with a layer as input) or Marker');
                }
                this.handleDraggable(enter$, leave$, updateCoords);
            };
        /**
         * @return {?}
         */
        DraggableDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.destroyed$.next(undefined);
                this.destroyed$.complete();
            };
        /**
         * @param {?} enter$
         * @param {?} leave$
         * @param {?} updateCoords
         * @return {?}
         */
        DraggableDirective.prototype.handleDraggable = /**
         * @param {?} enter$
         * @param {?} leave$
         * @param {?} updateCoords
         * @return {?}
         */
            function (enter$, leave$, updateCoords) {
                var _this = this;
                /** @type {?} */
                var moving = false;
                /** @type {?} */
                var inside = false;
                this.MapService.mapCreated$.subscribe(function () {
                    /** @type {?} */
                    var mouseUp$ = rxjs.fromEvent(( /** @type {?} */(_this.MapService.mapInstance)), 'mouseup');
                    /** @type {?} */
                    var dragStart$ = enter$.pipe(operators.takeUntil(_this.destroyed$), operators.filter(function () { return !moving; }), operators.filter(function (evt) { return _this.filterFeature(evt); }), operators.tap(function () {
                        inside = true;
                        _this.MapService.changeCanvasCursor('move');
                        _this.MapService.updateDragPan(false);
                    }), operators.switchMap(function () {
                        return rxjs.fromEvent(( /** @type {?} */(_this.MapService.mapInstance)), 'mousedown')
                            .pipe(operators.takeUntil(leave$));
                    }));
                    /** @type {?} */
                    var dragging$ = dragStart$.pipe(operators.switchMap(function () {
                        return rxjs.fromEvent(( /** @type {?} */(_this.MapService.mapInstance)), 'mousemove')
                            .pipe(operators.takeUntil(mouseUp$));
                    }));
                    /** @type {?} */
                    var dragEnd$ = dragStart$.pipe(operators.switchMap(function () { return mouseUp$.pipe(operators.take(1)); }));
                    dragStart$.subscribe(function (evt) {
                        moving = true;
                        if (_this.dragStart.observers.length) {
                            _this.NgZone.run(function () { return _this.dragStart.emit(evt); });
                        }
                    });
                    dragging$.subscribe(function (evt) {
                        updateCoords([evt.lngLat.lng, evt.lngLat.lat]);
                        if (_this.drag.observers.length) {
                            _this.NgZone.run(function () { return _this.drag.emit(evt); });
                        }
                    });
                    dragEnd$.subscribe(function (evt) {
                        moving = false;
                        if (_this.dragEnd.observers.length) {
                            _this.NgZone.run(function () { return _this.dragEnd.emit(evt); });
                        }
                        if (!inside) { // It's possible to dragEnd outside the target (small input lag)
                            _this.MapService.changeCanvasCursor('');
                            _this.MapService.updateDragPan(true);
                        }
                    });
                    leave$.pipe(operators.takeUntil(_this.destroyed$), operators.tap(function () { return inside = false; }), operators.filter(function () { return !moving; })).subscribe(function () {
                        _this.MapService.changeCanvasCursor('');
                        _this.MapService.updateDragPan(true);
                    });
                });
            };
        /**
         * @param {?} evt
         * @return {?}
         */
        DraggableDirective.prototype.filterFeature = /**
         * @param {?} evt
         * @return {?}
         */
            function (evt) {
                if (this.FeatureComponent && this.layer) {
                    /** @type {?} */
                    var feature = this.MapService.queryRenderedFeatures(evt.point, {
                        layers: [this.layer.id],
                        filter: [
                            'all',
                            ['==', '$type', 'Point'],
                            ['==', '$id', this.FeatureComponent.id]
                        ]
                    })[0];
                    if (!feature) {
                        return false;
                    }
                }
                return true;
            };
        DraggableDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mglDraggable]'
                    },] }
        ];
        DraggableDirective.ctorParameters = function () {
            return [
                { type: MapService },
                { type: core.NgZone },
                { type: FeatureComponent, decorators: [{ type: core.Optional }, { type: core.Host }] },
                { type: MarkerComponent, decorators: [{ type: core.Optional }, { type: core.Host }] }
            ];
        };
        DraggableDirective.propDecorators = {
            layer: [{ type: core.Input, args: ['mglDraggable',] }],
            dragStart: [{ type: core.Output }],
            dragEnd: [{ type: core.Output }],
            drag: [{ type: core.Output }]
        };
        return DraggableDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ImageComponent = /** @class */ (function () {
        function ImageComponent(MapService$$1, zone) {
            this.MapService = MapService$$1;
            this.zone = zone;
            this.error = new core.EventEmitter();
            this.loaded = new core.EventEmitter();
            this.isAdded = false;
            this.isAdding = false;
        }
        /**
         * @return {?}
         */
        ImageComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.sub = this.MapService.mapLoaded$.pipe(operators.switchMap(function () { return rxjs.fromEvent(( /** @type {?} */(_this.MapService.mapInstance)), 'styledata').pipe(operators.startWith(undefined), operators.filter(function () { return !_this.isAdding && !_this.MapService.mapInstance.hasImage(_this.id); })); })).subscribe(function () { return _this.init(); });
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        ImageComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.data && !changes.data.isFirstChange() ||
                    changes.options && !changes.options.isFirstChange() ||
                    changes.url && !changes.url.isFirstChange()) {
                    this.ngOnDestroy();
                    this.ngOnInit();
                }
            };
        /**
         * @return {?}
         */
        ImageComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.isAdded) {
                    this.MapService.removeImage(this.id);
                }
                if (this.sub) {
                    this.sub.unsubscribe();
                }
            };
        /**
         * @return {?}
         */
        ImageComponent.prototype.init = /**
         * @return {?}
         */
            function () {
                return __awaiter(this, void 0, void 0, function () {
                    var error_1;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.isAdding = true;
                                if (!this.data)
                                    return [3 /*break*/, 1];
                                this.MapService.addImage(this.id, this.data, this.options);
                                this.isAdded = true;
                                this.isAdding = false;
                                return [3 /*break*/, 5];
                            case 1:
                                if (!this.url)
                                    return [3 /*break*/, 5];
                                _a.label = 2;
                            case 2:
                                _a.trys.push([2, 4, , 5]);
                                return [4 /*yield*/, this.MapService.loadAndAddImage(this.id, this.url, this.options)];
                            case 3:
                                _a.sent();
                                this.isAdded = true;
                                this.isAdding = false;
                                this.zone.run(function () {
                                    _this.loaded.emit();
                                });
                                return [3 /*break*/, 5];
                            case 4:
                                error_1 = _a.sent();
                                this.zone.run(function () {
                                    _this.error.emit(error_1);
                                });
                                return [3 /*break*/, 5];
                            case 5: return [2 /*return*/];
                        }
                    });
                });
            };
        ImageComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mgl-image',
                        template: ''
                    }] }
        ];
        ImageComponent.ctorParameters = function () {
            return [
                { type: MapService },
                { type: core.NgZone }
            ];
        };
        ImageComponent.propDecorators = {
            id: [{ type: core.Input }],
            data: [{ type: core.Input }],
            options: [{ type: core.Input }],
            url: [{ type: core.Input }],
            error: [{ type: core.Output }],
            loaded: [{ type: core.Output }]
        };
        return ImageComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var LayerComponent = /** @class */ (function () {
        function LayerComponent(MapService$$1) {
            this.MapService = MapService$$1;
            this.click = new core.EventEmitter();
            this.mouseEnter = new core.EventEmitter();
            this.mouseLeave = new core.EventEmitter();
            this.mouseMove = new core.EventEmitter();
            this.layerAdded = false;
        }
        /**
         * @return {?}
         */
        LayerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.sub = this.MapService.mapLoaded$.pipe(operators.switchMap(function () { return rxjs.fromEvent(( /** @type {?} */(_this.MapService.mapInstance)), 'styledata').pipe(operators.mapTo(false), operators.filter(function () { return !_this.MapService.mapInstance.getLayer(_this.id); }), operators.startWith(true)); })).subscribe(function (bindEvents) { return _this.init(bindEvents); });
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        LayerComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (!this.layerAdded) {
                    return;
                }
                if (changes.paint && !changes.paint.isFirstChange()) {
                    this.MapService.setAllLayerPaintProperty(this.id, ( /** @type {?} */(changes.paint.currentValue)));
                }
                if (changes.layout && !changes.layout.isFirstChange()) {
                    this.MapService.setAllLayerLayoutProperty(this.id, ( /** @type {?} */(changes.layout.currentValue)));
                }
                if (changes.filter && !changes.filter.isFirstChange()) {
                    this.MapService.setLayerFilter(this.id, ( /** @type {?} */(changes.filter.currentValue)));
                }
                if (changes.before && !changes.before.isFirstChange()) {
                    this.MapService.setLayerBefore(this.id, ( /** @type {?} */(changes.before.currentValue)));
                }
                if (changes.minzoom && !changes.minzoom.isFirstChange() ||
                    changes.maxzoom && !changes.maxzoom.isFirstChange()) {
                    this.MapService.setLayerZoomRange(this.id, this.minzoom, this.maxzoom);
                }
            };
        /**
         * @return {?}
         */
        LayerComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.layerAdded) {
                    this.MapService.removeLayer(this.id);
                }
                if (this.sub) {
                    this.sub.unsubscribe();
                }
            };
        /**
         * @param {?} bindEvents
         * @return {?}
         */
        LayerComponent.prototype.init = /**
         * @param {?} bindEvents
         * @return {?}
         */
            function (bindEvents) {
                /** @type {?} */
                var layer = {
                    layerOptions: {
                        id: this.id,
                        type: this.type,
                        source: this.source,
                        metadata: this.metadata,
                        'source-layer': this.sourceLayer,
                        minzoom: this.minzoom,
                        maxzoom: this.maxzoom,
                        filter: this.filter,
                        layout: this.layout,
                        paint: this.paint
                    },
                    layerEvents: {
                        click: this.click,
                        mouseEnter: this.mouseEnter,
                        mouseLeave: this.mouseLeave,
                        mouseMove: this.mouseMove
                    }
                };
                this.MapService.addLayer(layer, bindEvents, this.before);
                this.layerAdded = true;
            };
        LayerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mgl-layer',
                        template: ''
                    }] }
        ];
        LayerComponent.ctorParameters = function () {
            return [
                { type: MapService }
            ];
        };
        LayerComponent.propDecorators = {
            id: [{ type: core.Input }],
            source: [{ type: core.Input }],
            type: [{ type: core.Input }],
            metadata: [{ type: core.Input }],
            sourceLayer: [{ type: core.Input }],
            filter: [{ type: core.Input }],
            layout: [{ type: core.Input }],
            paint: [{ type: core.Input }],
            before: [{ type: core.Input }],
            minzoom: [{ type: core.Input }],
            maxzoom: [{ type: core.Input }],
            click: [{ type: core.Output }],
            mouseEnter: [{ type: core.Output }],
            mouseLeave: [{ type: core.Output }],
            mouseMove: [{ type: core.Output }]
        };
        return LayerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var MapComponent = /** @class */ (function () {
        function MapComponent(MapService$$1) {
            this.MapService = MapService$$1;
            /* Added by ngx-mapbox-gl */
            this.movingMethod = 'flyTo';
            this.resize = new core.EventEmitter();
            this.remove = new core.EventEmitter();
            this.mouseDown = new core.EventEmitter();
            this.mouseUp = new core.EventEmitter();
            this.mouseMove = new core.EventEmitter();
            this.click = new core.EventEmitter();
            this.dblClick = new core.EventEmitter();
            this.mouseEnter = new core.EventEmitter();
            this.mouseLeave = new core.EventEmitter();
            this.mouseOver = new core.EventEmitter();
            this.mouseOut = new core.EventEmitter();
            this.contextMenu = new core.EventEmitter();
            this.touchStart = new core.EventEmitter();
            this.touchEnd = new core.EventEmitter();
            this.touchMove = new core.EventEmitter();
            this.touchCancel = new core.EventEmitter();
            this.wheel = new core.EventEmitter(); // TODO MapWheelEvent
            this.moveStart = new core.EventEmitter(); // TODO Check type
            this.move = new core.EventEmitter();
            this.moveEnd = new core.EventEmitter();
            this.dragStart = new core.EventEmitter();
            this.drag = new core.EventEmitter();
            this.dragEnd = new core.EventEmitter();
            this.zoomStart = new core.EventEmitter();
            this.zoomEvt = new core.EventEmitter();
            this.zoomEnd = new core.EventEmitter();
            this.rotateStart = new core.EventEmitter();
            this.rotate = new core.EventEmitter();
            this.rotateEnd = new core.EventEmitter();
            this.pitchStart = new core.EventEmitter();
            this.pitchEvt = new core.EventEmitter();
            this.pitchEnd = new core.EventEmitter();
            this.boxZoomStart = new core.EventEmitter();
            this.boxZoomEnd = new core.EventEmitter();
            this.boxZoomCancel = new core.EventEmitter();
            this.webGlContextLost = new core.EventEmitter();
            this.webGlContextRestored = new core.EventEmitter();
            this.load = new core.EventEmitter();
            this.render = new core.EventEmitter();
            this.error = new core.EventEmitter(); // TODO Check type
            this.data = new core.EventEmitter();
            this.styleData = new core.EventEmitter();
            this.sourceData = new core.EventEmitter();
            this.dataLoading = new core.EventEmitter();
            this.styleDataLoading = new core.EventEmitter();
            this.sourceDataLoading = new core.EventEmitter();
        }
        Object.defineProperty(MapComponent.prototype, "mapInstance", {
            get: /**
             * @return {?}
             */ function () {
                return this.MapService.mapInstance;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MapComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.MapService.setup({
                    accessToken: this.accessToken,
                    customMapboxApiUrl: this.customMapboxApiUrl,
                    mapOptions: {
                        container: this.mapContainer.nativeElement,
                        minZoom: this.minZoom,
                        maxZoom: this.maxZoom,
                        style: this.style,
                        hash: this.hash,
                        interactive: this.interactive,
                        bearingSnap: this.bearingSnap,
                        pitchWithRotate: this.pitchWithRotate,
                        classes: this.classes,
                        attributionControl: this.attributionControl,
                        logoPosition: this.logoPosition,
                        failIfMajorPerformanceCaveat: this.failIfMajorPerformanceCaveat,
                        preserveDrawingBuffer: this.preserveDrawingBuffer,
                        refreshExpiredTiles: this.refreshExpiredTiles,
                        maxBounds: this.maxBounds,
                        scrollZoom: this.scrollZoom,
                        boxZoom: this.boxZoom,
                        dragRotate: this.dragRotate,
                        dragPan: this.dragPan,
                        keyboard: this.keyboard,
                        doubleClickZoom: this.doubleClickZoom,
                        touchZoomRotate: this.touchZoomRotate,
                        trackResize: this.trackResize,
                        center: this.center,
                        zoom: this.zoom,
                        bearing: this.bearing,
                        pitch: this.pitch,
                        renderWorldCopies: this.renderWorldCopies,
                        maxTileCacheSize: this.maxTileCacheSize,
                        localIdeographFontFamily: this.localIdeographFontFamily,
                        transformRequest: this.transformRequest
                    },
                    mapEvents: this
                });
                if (this.cursorStyle) {
                    this.MapService.changeCanvasCursor(this.cursorStyle);
                }
            };
        /**
         * @return {?}
         */
        MapComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.MapService.destroyMap();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        MapComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.MapService.mapCreated$.toPromise()];
                            case 1:
                                _a.sent();
                                if (changes.cursorStyle && !changes.cursorStyle.isFirstChange()) {
                                    this.MapService.changeCanvasCursor(changes.cursorStyle.currentValue);
                                }
                                if (changes.minZoom && !changes.minZoom.isFirstChange()) {
                                    this.MapService.updateMinZoom(changes.minZoom.currentValue);
                                }
                                if (changes.maxZoom && !changes.maxZoom.isFirstChange()) {
                                    this.MapService.updateMaxZoom(changes.maxZoom.currentValue);
                                }
                                if (changes.scrollZoom && !changes.scrollZoom.isFirstChange()) {
                                    this.MapService.updateScrollZoom(changes.scrollZoom.currentValue);
                                }
                                if (changes.dragRotate && !changes.dragRotate.isFirstChange()) {
                                    this.MapService.updateDragRotate(changes.dragRotate.currentValue);
                                }
                                if (changes.touchZoomRotate && !changes.touchZoomRotate.isFirstChange()) {
                                    this.MapService.updateTouchZoomRotate(changes.touchZoomRotate.currentValue);
                                }
                                if (changes.doubleClickZoom && !changes.doubleClickZoom.isFirstChange()) {
                                    this.MapService.updateDoubleClickZoom(changes.doubleClickZoom.currentValue);
                                }
                                if (changes.keyboard && !changes.keyboard.isFirstChange()) {
                                    this.MapService.updateKeyboard(changes.keyboard.currentValue);
                                }
                                if (changes.dragPan && !changes.dragPan.isFirstChange()) {
                                    this.MapService.updateDragPan(changes.dragPan.currentValue);
                                }
                                if (changes.boxZoom && !changes.boxZoom.isFirstChange()) {
                                    this.MapService.updateBoxZoom(changes.boxZoom.currentValue);
                                }
                                if (changes.style && !changes.style.isFirstChange()) {
                                    this.MapService.updateStyle(changes.style.currentValue);
                                }
                                if (changes.maxBounds && !changes.maxBounds.isFirstChange()) {
                                    this.MapService.updateMaxBounds(changes.maxBounds.currentValue);
                                }
                                if (changes.fitBounds && changes.fitBounds.currentValue) {
                                    if ((this.center || this.zoom || this.pitch) && changes.fitBounds.isFirstChange()) {
                                        console.warn('[ngx-mapbox-gl] center / zoom / pitch inputs are being overridden by fitBounds input');
                                    }
                                    this.MapService.fitBounds(changes.fitBounds.currentValue, this.fitBoundsOptions);
                                }
                                if (changes.fitScreenCoordinates && changes.fitScreenCoordinates.currentValue) {
                                    if ((this.center || this.zoom || this.pitch || this.fitBounds) && changes.fitScreenCoordinates.isFirstChange()) {
                                        console.warn('[ngx-mapbox-gl] center / zoom / pitch / fitBounds inputs are being overridden by fitScreenCoordinates input');
                                    }
                                    this.MapService.fitScreenCoordinates(changes.fitScreenCoordinates.currentValue, this.bearing ? this.bearing[0] : 0, this.movingOptions);
                                }
                                if (this.centerWithPanTo &&
                                    changes.center && !changes.center.isFirstChange() &&
                                    !changes.zoom && !changes.bearing && !changes.pitch) {
                                    this.MapService.panTo(( /** @type {?} */(this.center)), this.panToOptions);
                                }
                                else if (changes.center && !changes.center.isFirstChange() ||
                                    changes.zoom && !changes.zoom.isFirstChange() ||
                                    (changes.bearing && !changes.bearing.isFirstChange() && !changes.fitScreenCoordinates) ||
                                    changes.pitch && !changes.pitch.isFirstChange()) {
                                    this.MapService.move(this.movingMethod, this.movingOptions, changes.zoom && this.zoom ? this.zoom[0] : undefined, changes.center ? this.center : undefined, changes.bearing && this.bearing ? this.bearing[0] : undefined, changes.pitch && this.pitch ? this.pitch[0] : undefined);
                                }
                                return [2 /*return*/];
                        }
                    });
                });
            };
        MapComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mgl-map',
                        template: '<div #container></div>',
                        providers: [
                            MapService
                        ],
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: ["\n  :host {\n    display: block;\n  }\n  div {\n    height: 100%;\n    width: 100%;\n  }\n  "]
                    }] }
        ];
        MapComponent.ctorParameters = function () {
            return [
                { type: MapService }
            ];
        };
        MapComponent.propDecorators = {
            accessToken: [{ type: core.Input }],
            customMapboxApiUrl: [{ type: core.Input }],
            hash: [{ type: core.Input }],
            refreshExpiredTiles: [{ type: core.Input }],
            failIfMajorPerformanceCaveat: [{ type: core.Input }],
            classes: [{ type: core.Input }],
            bearingSnap: [{ type: core.Input }],
            interactive: [{ type: core.Input }],
            pitchWithRotate: [{ type: core.Input }],
            attributionControl: [{ type: core.Input }],
            logoPosition: [{ type: core.Input }],
            maxTileCacheSize: [{ type: core.Input }],
            localIdeographFontFamily: [{ type: core.Input }],
            preserveDrawingBuffer: [{ type: core.Input }],
            renderWorldCopies: [{ type: core.Input }],
            trackResize: [{ type: core.Input }],
            transformRequest: [{ type: core.Input }],
            minZoom: [{ type: core.Input }],
            maxZoom: [{ type: core.Input }],
            scrollZoom: [{ type: core.Input }],
            dragRotate: [{ type: core.Input }],
            touchZoomRotate: [{ type: core.Input }],
            doubleClickZoom: [{ type: core.Input }],
            keyboard: [{ type: core.Input }],
            dragPan: [{ type: core.Input }],
            boxZoom: [{ type: core.Input }],
            style: [{ type: core.Input }],
            center: [{ type: core.Input }],
            maxBounds: [{ type: core.Input }],
            zoom: [{ type: core.Input }],
            bearing: [{ type: core.Input }],
            pitch: [{ type: core.Input }],
            movingMethod: [{ type: core.Input }],
            movingOptions: [{ type: core.Input }],
            fitBounds: [{ type: core.Input }],
            fitBoundsOptions: [{ type: core.Input }],
            fitScreenCoordinates: [{ type: core.Input }],
            centerWithPanTo: [{ type: core.Input }],
            panToOptions: [{ type: core.Input }],
            cursorStyle: [{ type: core.Input }],
            resize: [{ type: core.Output }],
            remove: [{ type: core.Output }],
            mouseDown: [{ type: core.Output }],
            mouseUp: [{ type: core.Output }],
            mouseMove: [{ type: core.Output }],
            click: [{ type: core.Output }],
            dblClick: [{ type: core.Output }],
            mouseEnter: [{ type: core.Output }],
            mouseLeave: [{ type: core.Output }],
            mouseOver: [{ type: core.Output }],
            mouseOut: [{ type: core.Output }],
            contextMenu: [{ type: core.Output }],
            touchStart: [{ type: core.Output }],
            touchEnd: [{ type: core.Output }],
            touchMove: [{ type: core.Output }],
            touchCancel: [{ type: core.Output }],
            wheel: [{ type: core.Output }],
            moveStart: [{ type: core.Output }],
            move: [{ type: core.Output }],
            moveEnd: [{ type: core.Output }],
            dragStart: [{ type: core.Output }],
            drag: [{ type: core.Output }],
            dragEnd: [{ type: core.Output }],
            zoomStart: [{ type: core.Output }],
            zoomEvt: [{ type: core.Output }],
            zoomEnd: [{ type: core.Output }],
            rotateStart: [{ type: core.Output }],
            rotate: [{ type: core.Output }],
            rotateEnd: [{ type: core.Output }],
            pitchStart: [{ type: core.Output }],
            pitchEvt: [{ type: core.Output }],
            pitchEnd: [{ type: core.Output }],
            boxZoomStart: [{ type: core.Output }],
            boxZoomEnd: [{ type: core.Output }],
            boxZoomCancel: [{ type: core.Output }],
            webGlContextLost: [{ type: core.Output }],
            webGlContextRestored: [{ type: core.Output }],
            load: [{ type: core.Output }],
            render: [{ type: core.Output }],
            error: [{ type: core.Output }],
            data: [{ type: core.Output }],
            styleData: [{ type: core.Output }],
            sourceData: [{ type: core.Output }],
            dataLoading: [{ type: core.Output }],
            styleDataLoading: [{ type: core.Output }],
            sourceDataLoading: [{ type: core.Output }],
            mapContainer: [{ type: core.ViewChild, args: ['container',] }]
        };
        return MapComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var PointDirective = /** @class */ (function () {
        function PointDirective() {
        }
        PointDirective.decorators = [
            { type: core.Directive, args: [{ selector: 'ng-template[mglPoint]' },] }
        ];
        return PointDirective;
    }());
    var ClusterPointDirective = /** @class */ (function () {
        function ClusterPointDirective() {
        }
        ClusterPointDirective.decorators = [
            { type: core.Directive, args: [{ selector: 'ng-template[mglClusterPoint]' },] }
        ];
        return ClusterPointDirective;
    }());
    var MarkerClusterComponent = /** @class */ (function () {
        function MarkerClusterComponent(MapService$$1, ChangeDetectorRef, zone) {
            var _this = this;
            this.MapService = MapService$$1;
            this.ChangeDetectorRef = ChangeDetectorRef;
            this.zone = zone;
            this.load = new core.EventEmitter();
            this.sub = new rxjs.Subscription();
            this.getLeavesFn = function (feature) {
                return function (limit, offset) { return (( /** @type {?} */(_this.supercluster.getLeaves)))(( /** @type {?} */(feature.properties.cluster_id)), limit, offset); };
            };
            this.getChildrenFn = function (feature) {
                return function () { return (( /** @type {?} */(_this.supercluster.getChildren)))(( /** @type {?} */(feature.properties.cluster_id))); };
            };
            this.getClusterExpansionZoomFn = function (feature) {
                return function () { return (( /** @type {?} */(_this.supercluster.getClusterExpansionZoom)))(( /** @type {?} */(feature.properties.cluster_id))); };
            };
        }
        /**
         * @return {?}
         */
        MarkerClusterComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var options = {
                    radius: this.radius,
                    maxZoom: this.maxZoom,
                    minZoom: this.minZoom,
                    extent: this.extent,
                    nodeSize: this.nodeSize,
                    log: this.log,
                    reduce: this.reduce,
                    initial: this.initial,
                    map: this.map
                };
                Object.keys(options)
                    .forEach(function (key) {
                    /** @type {?} */
                    var tkey = ( /** @type {?} */(key));
                    if (options[tkey] === undefined) {
                        delete options[tkey];
                    }
                });
                this.supercluster = supercluster(options);
                this.supercluster.load(this.data.features);
                this.load.emit(this.supercluster);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        MarkerClusterComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.data && !changes.data.isFirstChange()) {
                    this.supercluster.load(this.data.features);
                }
            };
        /**
         * @return {?}
         */
        MarkerClusterComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.MapService.mapCreated$.subscribe(function () {
                    /** @type {?} */
                    var mapMove$ = rxjs.merge(rxjs.fromEvent(( /** @type {?} */(_this.MapService.mapInstance)), 'zoomChange'), rxjs.fromEvent(( /** @type {?} */(_this.MapService.mapInstance)), 'move'));
                    /** @type {?} */
                    var sub = mapMove$.pipe(operators.startWith(undefined)).subscribe(function () {
                        _this.zone.run(function () {
                            _this.updateCluster();
                        });
                    });
                    _this.sub.add(sub);
                });
            };
        /**
         * @return {?}
         */
        MarkerClusterComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.sub.unsubscribe();
            };
        /**
         * @return {?}
         */
        MarkerClusterComponent.prototype.updateCluster = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var bbox$$1 = this.MapService.getCurrentViewportBbox();
                /** @type {?} */
                var currentZoom = Math.round(this.MapService.mapInstance.getZoom());
                this.clusterPoints = this.supercluster.getClusters(bbox$$1, currentZoom);
                this.ChangeDetectorRef.markForCheck();
            };
        MarkerClusterComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mgl-marker-cluster',
                        template: "\n    <ng-container *ngFor=\"let feature of clusterPoints\">\n      <ng-container *ngIf=\"feature.properties.cluster; else point\">\n        <mgl-marker\n          [feature]=\"feature\"\n        >\n          <ng-container *ngTemplateOutlet=\"clusterPointTpl; context: {\n            $implicit: feature,\n            getLeavesFn: getLeavesFn(feature),\n            getChildrenFn: getChildrenFn(feature),\n            getClusterExpansionZoomFn: getClusterExpansionZoomFn(feature)\n          }\"></ng-container>\n        </mgl-marker>\n      </ng-container>\n      <ng-template #point>\n        <mgl-marker\n          [feature]=\"feature\"\n        >\n          <ng-container *ngTemplateOutlet=\"pointTpl; context: { $implicit: feature }\"></ng-container>\n        </mgl-marker>\n      </ng-template>\n    </ng-container>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        preserveWhitespaces: false
                    }] }
        ];
        MarkerClusterComponent.ctorParameters = function () {
            return [
                { type: MapService },
                { type: core.ChangeDetectorRef },
                { type: core.NgZone }
            ];
        };
        MarkerClusterComponent.propDecorators = {
            radius: [{ type: core.Input }],
            maxZoom: [{ type: core.Input }],
            minZoom: [{ type: core.Input }],
            extent: [{ type: core.Input }],
            nodeSize: [{ type: core.Input }],
            log: [{ type: core.Input }],
            reduce: [{ type: core.Input }],
            initial: [{ type: core.Input }],
            map: [{ type: core.Input }],
            data: [{ type: core.Input }],
            load: [{ type: core.Output }],
            pointTpl: [{ type: core.ContentChild, args: [PointDirective, { read: core.TemplateRef },] }],
            clusterPointTpl: [{ type: core.ContentChild, args: [ClusterPointDirective, { read: core.TemplateRef },] }]
        };
        return MarkerClusterComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var PopupComponent = /** @class */ (function () {
        function PopupComponent(MapService$$1) {
            this.MapService = MapService$$1;
            this.close = new core.EventEmitter();
            this.open = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        PopupComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.lngLat && this.marker || this.feature && this.lngLat || this.feature && this.marker) {
                    throw new Error('marker, lngLat, feature input are mutually exclusive');
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        PopupComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.lngLat && !changes.lngLat.isFirstChange() ||
                    changes.feature && !changes.feature.isFirstChange()) {
                    /** @type {?} */
                    var newlngLat = changes.lngLat ? ( /** @type {?} */(this.lngLat)) : ( /** @type {?} */(( /** @type {?} */(( /** @type {?} */(( /** @type {?} */(this.feature)).geometry)).coordinates))));
                    this.MapService.removePopupFromMap(( /** @type {?} */(this.popupInstance)), true);
                    /** @type {?} */
                    var popupInstanceTmp = this.createPopup();
                    this.MapService.addPopupToMap(popupInstanceTmp, newlngLat, ( /** @type {?} */(this.popupInstance)).isOpen());
                    this.popupInstance = popupInstanceTmp;
                }
                if (changes.marker && !changes.marker.isFirstChange()) {
                    /** @type {?} */
                    var previousMarker = changes.marker.previousValue;
                    if (previousMarker.markerInstance) {
                        this.MapService.removePopupFromMarker(previousMarker.markerInstance);
                    }
                    if (this.marker && this.marker.markerInstance && this.popupInstance) {
                        this.MapService.addPopupToMarker(this.marker.markerInstance, this.popupInstance);
                    }
                }
            };
        /**
         * @return {?}
         */
        PopupComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.popupInstance = this.createPopup();
                this.addPopup(this.popupInstance);
            };
        /**
         * @return {?}
         */
        PopupComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.popupInstance) {
                    if (this.lngLat) {
                        this.MapService.removePopupFromMap(this.popupInstance);
                    }
                    else if (this.marker && this.marker.markerInstance) {
                        this.MapService.removePopupFromMarker(this.marker.markerInstance);
                    }
                }
                this.popupInstance = undefined;
            };
        /**
         * @return {?}
         */
        PopupComponent.prototype.createPopup = /**
         * @return {?}
         */
            function () {
                return this.MapService.createPopup({
                    popupOptions: {
                        closeButton: this.closeButton,
                        closeOnClick: this.closeOnClick,
                        anchor: this.anchor,
                        offset: this.offset
                    },
                    popupEvents: {
                        open: this.open,
                        close: this.close
                    }
                }, this.content.nativeElement);
            };
        /**
         * @param {?} popup
         * @return {?}
         */
        PopupComponent.prototype.addPopup = /**
         * @param {?} popup
         * @return {?}
         */
            function (popup) {
                var _this = this;
                this.MapService.mapCreated$.subscribe(function () {
                    if (_this.lngLat || _this.feature) {
                        _this.MapService.addPopupToMap(popup, _this.lngLat ? _this.lngLat : ( /** @type {?} */(( /** @type {?} */(( /** @type {?} */(( /** @type {?} */(_this.feature)).geometry)).coordinates)))));
                    }
                    else if (_this.marker && _this.marker.markerInstance) {
                        _this.MapService.addPopupToMarker(_this.marker.markerInstance, popup);
                    }
                    else {
                        throw new Error('mgl-popup need either lngLat/marker/feature to be set');
                    }
                });
            };
        PopupComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mgl-popup',
                        template: '<div #content><ng-content></ng-content></div>',
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        PopupComponent.ctorParameters = function () {
            return [
                { type: MapService }
            ];
        };
        PopupComponent.propDecorators = {
            closeButton: [{ type: core.Input }],
            closeOnClick: [{ type: core.Input }],
            anchor: [{ type: core.Input }],
            offset: [{ type: core.Input }],
            feature: [{ type: core.Input }],
            lngLat: [{ type: core.Input }],
            marker: [{ type: core.Input }],
            close: [{ type: core.Output }],
            open: [{ type: core.Output }],
            content: [{ type: core.ViewChild, args: ['content',] }]
        };
        return PopupComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CanvasSourceComponent = /** @class */ (function () {
        function CanvasSourceComponent(MapService$$1) {
            this.MapService = MapService$$1;
            this.sourceAdded = false;
            this.sub = new rxjs.Subscription();
        }
        /**
         * @return {?}
         */
        CanvasSourceComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.MapService.mapLoaded$.subscribe(function () {
                    _this.init();
                    /** @type {?} */
                    var sub = rxjs.fromEvent(( /** @type {?} */(_this.MapService.mapInstance)), 'styledata').pipe(operators.filter(function () { return !_this.MapService.mapInstance.getSource(_this.id); })).subscribe(function () {
                        _this.init();
                    });
                    _this.sub.add(sub);
                });
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        CanvasSourceComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (!this.sourceAdded) {
                    return;
                }
                if (changes.coordinates && !changes.coordinates.isFirstChange() ||
                    changes.canvas && !changes.canvas.isFirstChange() ||
                    changes.animate && !changes.animate.isFirstChange()) {
                    this.ngOnDestroy();
                    this.ngOnInit();
                }
            };
        /**
         * @return {?}
         */
        CanvasSourceComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.sub.unsubscribe();
                if (this.sourceAdded) {
                    this.MapService.removeSource(this.id);
                }
            };
        /**
         * @return {?}
         */
        CanvasSourceComponent.prototype.init = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var source = {
                    type: 'canvas',
                    coordinates: this.coordinates,
                    canvas: this.canvas,
                    animate: this.animate,
                };
                this.MapService.addSource(this.id, source);
                this.sourceAdded = true;
            };
        CanvasSourceComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mgl-canvas-source',
                        template: '',
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        CanvasSourceComponent.ctorParameters = function () {
            return [
                { type: MapService }
            ];
        };
        CanvasSourceComponent.propDecorators = {
            id: [{ type: core.Input }],
            coordinates: [{ type: core.Input }],
            canvas: [{ type: core.Input }],
            animate: [{ type: core.Input }]
        };
        return CanvasSourceComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ImageSourceComponent = /** @class */ (function () {
        function ImageSourceComponent(MapService$$1) {
            this.MapService = MapService$$1;
            this.sourceAdded = false;
            this.sub = new rxjs.Subscription();
        }
        /**
         * @return {?}
         */
        ImageSourceComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.MapService.mapLoaded$.subscribe(function () {
                    _this.init();
                    /** @type {?} */
                    var sub = rxjs.fromEvent(( /** @type {?} */(_this.MapService.mapInstance)), 'styledata').pipe(operators.filter(function () { return !_this.MapService.mapInstance.getSource(_this.id); })).subscribe(function () {
                        _this.init();
                    });
                    _this.sub.add(sub);
                });
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        ImageSourceComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (!this.sourceAdded) {
                    return;
                }
                if (changes.url && !changes.url.isFirstChange() ||
                    changes.coordinates && !changes.coordinates.isFirstChange()) {
                    this.ngOnDestroy();
                    this.ngOnInit();
                }
            };
        /**
         * @return {?}
         */
        ImageSourceComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.sub.unsubscribe();
                if (this.sourceAdded) {
                    this.MapService.removeSource(this.id);
                }
            };
        /**
         * @return {?}
         */
        ImageSourceComponent.prototype.init = /**
         * @return {?}
         */
            function () {
                this.MapService.addSource(this.id, {
                    type: 'image',
                    url: this.url,
                    coordinates: this.coordinates
                });
                this.sourceAdded = true;
            };
        ImageSourceComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mgl-image-source',
                        template: '',
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        ImageSourceComponent.ctorParameters = function () {
            return [
                { type: MapService }
            ];
        };
        ImageSourceComponent.propDecorators = {
            id: [{ type: core.Input }],
            url: [{ type: core.Input }],
            coordinates: [{ type: core.Input }]
        };
        return ImageSourceComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var RasterSourceComponent = /** @class */ (function () {
        function RasterSourceComponent(MapService$$1) {
            this.MapService = MapService$$1;
            this.type = 'raster'; // Just to make ts happy
            this.sourceAdded = false;
            this.sub = new rxjs.Subscription();
        }
        /**
         * @return {?}
         */
        RasterSourceComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.MapService.mapLoaded$.subscribe(function () {
                    _this.init();
                    /** @type {?} */
                    var sub = rxjs.fromEvent(( /** @type {?} */(_this.MapService.mapInstance)), 'styledata').pipe(operators.filter(function () { return !_this.MapService.mapInstance.getSource(_this.id); })).subscribe(function () {
                        _this.init();
                    });
                    _this.sub.add(sub);
                });
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        RasterSourceComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (!this.sourceAdded) {
                    return;
                }
                if (changes.url && !changes.url.isFirstChange() ||
                    changes.tiles && !changes.tiles.isFirstChange() ||
                    changes.bounds && !changes.bounds.isFirstChange() ||
                    changes.minzoom && !changes.minzoom.isFirstChange() ||
                    changes.maxzoom && !changes.maxzoom.isFirstChange() ||
                    changes.tileSize && !changes.tileSize.isFirstChange()) {
                    this.ngOnDestroy();
                    this.ngOnInit();
                }
            };
        /**
         * @return {?}
         */
        RasterSourceComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.sub.unsubscribe();
                if (this.sourceAdded) {
                    this.MapService.removeSource(this.id);
                }
            };
        /**
         * @return {?}
         */
        RasterSourceComponent.prototype.init = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var source = {
                    type: this.type,
                    url: this.url,
                    tiles: this.tiles,
                    bounds: this.bounds,
                    minzoom: this.minzoom,
                    maxzoom: this.maxzoom,
                    tileSize: this.tileSize
                };
                this.MapService.addSource(this.id, source);
                this.sourceAdded = true;
            };
        RasterSourceComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mgl-raster-source',
                        template: '',
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        RasterSourceComponent.ctorParameters = function () {
            return [
                { type: MapService }
            ];
        };
        RasterSourceComponent.propDecorators = {
            id: [{ type: core.Input }],
            url: [{ type: core.Input }],
            tiles: [{ type: core.Input }],
            bounds: [{ type: core.Input }],
            minzoom: [{ type: core.Input }],
            maxzoom: [{ type: core.Input }],
            tileSize: [{ type: core.Input }]
        };
        return RasterSourceComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var VectorSourceComponent = /** @class */ (function () {
        function VectorSourceComponent(MapService$$1) {
            this.MapService = MapService$$1;
            this.type = 'vector'; // Just to make ts happy
            this.sourceAdded = false;
            this.sub = new rxjs.Subscription();
        }
        /**
         * @return {?}
         */
        VectorSourceComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.MapService.mapLoaded$.subscribe(function () {
                    _this.init();
                    /** @type {?} */
                    var sub = rxjs.fromEvent(( /** @type {?} */(_this.MapService.mapInstance)), 'styledata').pipe(operators.filter(function () { return !_this.MapService.mapInstance.getSource(_this.id); })).subscribe(function () {
                        _this.init();
                    });
                    _this.sub.add(sub);
                });
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        VectorSourceComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (!this.sourceAdded) {
                    return;
                }
                if (changes.url && !changes.url.isFirstChange() ||
                    changes.tiles && !changes.tiles.isFirstChange() ||
                    changes.minzoom && !changes.minzoom.isFirstChange() ||
                    changes.maxzoom && !changes.maxzoom.isFirstChange()) {
                    this.ngOnDestroy();
                    this.ngOnInit();
                }
            };
        /**
         * @return {?}
         */
        VectorSourceComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.sub.unsubscribe();
                if (this.sourceAdded) {
                    this.MapService.removeSource(this.id);
                }
            };
        /**
         * @return {?}
         */
        VectorSourceComponent.prototype.init = /**
         * @return {?}
         */
            function () {
                this.MapService.addSource(this.id, {
                    type: this.type,
                    url: this.url,
                    tiles: this.tiles,
                    minzoom: this.minzoom,
                    maxzoom: this.maxzoom,
                });
                this.sourceAdded = true;
            };
        VectorSourceComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mgl-vector-source',
                        template: '',
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        VectorSourceComponent.ctorParameters = function () {
            return [
                { type: MapService }
            ];
        };
        VectorSourceComponent.propDecorators = {
            id: [{ type: core.Input }],
            url: [{ type: core.Input }],
            tiles: [{ type: core.Input }],
            minzoom: [{ type: core.Input }],
            maxzoom: [{ type: core.Input }]
        };
        return VectorSourceComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var VideoSourceComponent = /** @class */ (function () {
        function VideoSourceComponent(MapService$$1) {
            this.MapService = MapService$$1;
            this.sourceAdded = false;
            this.sub = new rxjs.Subscription();
        }
        /**
         * @return {?}
         */
        VideoSourceComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.MapService.mapLoaded$.subscribe(function () {
                    _this.init();
                    /** @type {?} */
                    var sub = rxjs.fromEvent(( /** @type {?} */(_this.MapService.mapInstance)), 'styledata').pipe(operators.filter(function () { return !_this.MapService.mapInstance.getSource(_this.id); })).subscribe(function () {
                        _this.init();
                    });
                    _this.sub.add(sub);
                });
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        VideoSourceComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (!this.sourceAdded) {
                    return;
                }
                if (changes.urls && !changes.urls.isFirstChange() ||
                    changes.coordinates && !changes.coordinates.isFirstChange()) {
                    this.ngOnDestroy();
                    this.ngOnInit();
                }
            };
        /**
         * @return {?}
         */
        VideoSourceComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.sub.unsubscribe();
                if (this.sourceAdded) {
                    this.MapService.removeSource(this.id);
                }
            };
        /**
         * @return {?}
         */
        VideoSourceComponent.prototype.init = /**
         * @return {?}
         */
            function () {
                this.MapService.addSource(this.id, {
                    type: 'video',
                    urls: this.urls,
                    coordinates: this.coordinates
                });
                this.sourceAdded = true;
            };
        VideoSourceComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'mgl-video-source',
                        template: '',
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        VideoSourceComponent.ctorParameters = function () {
            return [
                { type: MapService }
            ];
        };
        VideoSourceComponent.propDecorators = {
            id: [{ type: core.Input }],
            urls: [{ type: core.Input }],
            coordinates: [{ type: core.Input }]
        };
        return VideoSourceComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxMapboxGLModule = /** @class */ (function () {
        function NgxMapboxGLModule() {
        }
        /**
         * @param {?} config
         * @return {?}
         */
        NgxMapboxGLModule.withConfig = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                return {
                    ngModule: NgxMapboxGLModule,
                    providers: [
                        {
                            provide: MAPBOX_API_KEY,
                            useValue: config.accessToken
                        },
                        {
                            provide: MAPBOX_GEOCODER_API_KEY,
                            useValue: config.geocoderAccessToken || config.accessToken
                        }
                    ],
                };
            };
        NgxMapboxGLModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            MapComponent,
                            LayerComponent,
                            DraggableDirective,
                            ImageComponent,
                            VectorSourceComponent,
                            GeoJSONSourceComponent,
                            RasterSourceComponent,
                            ImageSourceComponent,
                            VideoSourceComponent,
                            CanvasSourceComponent,
                            FeatureComponent,
                            MarkerComponent,
                            PopupComponent,
                            ControlComponent,
                            FullscreenControlDirective,
                            NavigationControlDirective,
                            GeocoderControlDirective,
                            GeolocateControlDirective,
                            AttributionControlDirective,
                            ScaleControlDirective,
                            PointDirective,
                            ClusterPointDirective,
                            MarkerClusterComponent
                        ],
                        exports: [
                            MapComponent,
                            LayerComponent,
                            DraggableDirective,
                            ImageComponent,
                            VectorSourceComponent,
                            GeoJSONSourceComponent,
                            RasterSourceComponent,
                            ImageSourceComponent,
                            VideoSourceComponent,
                            CanvasSourceComponent,
                            FeatureComponent,
                            MarkerComponent,
                            PopupComponent,
                            ControlComponent,
                            FullscreenControlDirective,
                            NavigationControlDirective,
                            GeocoderControlDirective,
                            GeolocateControlDirective,
                            AttributionControlDirective,
                            ScaleControlDirective,
                            PointDirective,
                            ClusterPointDirective,
                            MarkerClusterComponent
                        ]
                    },] }
        ];
        return NgxMapboxGLModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.NgxMapboxGLModule = NgxMapboxGLModule;
    exports.CustomControl = CustomControl;
    exports.ControlComponent = ControlComponent;
    exports.MAPBOX_API_KEY = MAPBOX_API_KEY;
    exports.MglResizeEventEmitter = MglResizeEventEmitter;
    exports.MapService = MapService;
    exports.MapComponent = MapComponent;
    exports.ɵr = AttributionControlDirective;
    exports.ɵm = FullscreenControlDirective;
    exports.ɵp = GeocoderControlDirective;
    exports.ɵo = MAPBOX_GEOCODER_API_KEY;
    exports.ɵq = GeolocateControlDirective;
    exports.ɵn = NavigationControlDirective;
    exports.ɵs = ScaleControlDirective;
    exports.ɵb = DraggableDirective;
    exports.ɵf = ImageComponent;
    exports.ɵa = LayerComponent;
    exports.ɵu = ClusterPointDirective;
    exports.ɵv = MarkerClusterComponent;
    exports.ɵt = PointDirective;
    exports.ɵe = MarkerComponent;
    exports.ɵl = PopupComponent;
    exports.ɵk = CanvasSourceComponent;
    exports.ɵc = FeatureComponent;
    exports.ɵd = GeoJSONSourceComponent;
    exports.ɵi = ImageSourceComponent;
    exports.ɵh = RasterSourceComponent;
    exports.ɵg = VectorSourceComponent;
    exports.ɵj = VideoSourceComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,