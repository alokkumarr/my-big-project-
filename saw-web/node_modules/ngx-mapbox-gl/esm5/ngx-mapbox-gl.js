/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */
export { NgxMapboxGLModule, CustomControl, ControlComponent, MAPBOX_API_KEY, MglResizeEventEmitter, MapService, MapComponent } from './public_api';
export { AttributionControlDirective as ɵr } from './lib/control/attribution-control.directive';
export { FullscreenControlDirective as ɵm } from './lib/control/fullscreen-control.directive';
export { GeocoderControlDirective as ɵp, MAPBOX_GEOCODER_API_KEY as ɵo } from './lib/control/geocoder-control.directive';
export { GeolocateControlDirective as ɵq } from './lib/control/geolocate-control.directive';
export { NavigationControlDirective as ɵn } from './lib/control/navigation-control.directive';
export { ScaleControlDirective as ɵs } from './lib/control/scale-control.directive';
export { DraggableDirective as ɵb } from './lib/draggable/draggable.directive';
export { ImageComponent as ɵf } from './lib/image/image.component';
export { LayerComponent as ɵa } from './lib/layer/layer.component';
export { ClusterPointDirective as ɵu, MarkerClusterComponent as ɵv, PointDirective as ɵt } from './lib/marker-cluster/marker-cluster.component';
export { MarkerComponent as ɵe } from './lib/marker/marker.component';
export { PopupComponent as ɵl } from './lib/popup/popup.component';
export { CanvasSourceComponent as ɵk } from './lib/source/canvas-source.component';
export { FeatureComponent as ɵc } from './lib/source/geojson/feature.component';
export { GeoJSONSourceComponent as ɵd } from './lib/source/geojson/geojson-source.component';
export { ImageSourceComponent as ɵi } from './lib/source/image-source.component';
export { RasterSourceComponent as ɵh } from './lib/source/raster-source.component';
export { VectorSourceComponent as ɵg } from './lib/source/vector-source.component';
export { VideoSourceComponent as ɵj } from './lib/source/video-source.component';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hcGJveC1nbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1tYXBib3gtZ2wvIiwic291cmNlcyI6WyJuZ3gtbWFwYm94LWdsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFJQSxvSUFBYyxjQUFjLENBQUM7QUFFN0IsT0FBTyxFQUFDLDJCQUEyQixJQUFJLEVBQUUsRUFBQyxNQUFNLDZDQUE2QyxDQUFDO0FBQzlGLE9BQU8sRUFBQywwQkFBMEIsSUFBSSxFQUFFLEVBQUMsTUFBTSw0Q0FBNEMsQ0FBQztBQUM1RixPQUFPLEVBQUMsd0JBQXdCLElBQUksRUFBRSxFQUFDLHVCQUF1QixJQUFJLEVBQUUsRUFBQyxNQUFNLDBDQUEwQyxDQUFDO0FBQ3RILE9BQU8sRUFBQyx5QkFBeUIsSUFBSSxFQUFFLEVBQUMsTUFBTSwyQ0FBMkMsQ0FBQztBQUMxRixPQUFPLEVBQUMsMEJBQTBCLElBQUksRUFBRSxFQUFDLE1BQU0sNENBQTRDLENBQUM7QUFDNUYsT0FBTyxFQUFDLHFCQUFxQixJQUFJLEVBQUUsRUFBQyxNQUFNLHVDQUF1QyxDQUFDO0FBQ2xGLE9BQU8sRUFBQyxrQkFBa0IsSUFBSSxFQUFFLEVBQUMsTUFBTSxxQ0FBcUMsQ0FBQztBQUM3RSxPQUFPLEVBQUMsY0FBYyxJQUFJLEVBQUUsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBQ2pFLE9BQU8sRUFBQyxjQUFjLElBQUksRUFBRSxFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDakUsT0FBTyxFQUFDLHFCQUFxQixJQUFJLEVBQUUsRUFBQyxzQkFBc0IsSUFBSSxFQUFFLEVBQUMsY0FBYyxJQUFJLEVBQUUsRUFBQyxNQUFNLCtDQUErQyxDQUFDO0FBQzVJLE9BQU8sRUFBQyxlQUFlLElBQUksRUFBRSxFQUFDLE1BQU0sK0JBQStCLENBQUM7QUFDcEUsT0FBTyxFQUFDLGNBQWMsSUFBSSxFQUFFLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUNqRSxPQUFPLEVBQUMscUJBQXFCLElBQUksRUFBRSxFQUFDLE1BQU0sc0NBQXNDLENBQUM7QUFDakYsT0FBTyxFQUFDLGdCQUFnQixJQUFJLEVBQUUsRUFBQyxNQUFNLHdDQUF3QyxDQUFDO0FBQzlFLE9BQU8sRUFBQyxzQkFBc0IsSUFBSSxFQUFFLEVBQUMsTUFBTSwrQ0FBK0MsQ0FBQztBQUMzRixPQUFPLEVBQUMsb0JBQW9CLElBQUksRUFBRSxFQUFDLE1BQU0scUNBQXFDLENBQUM7QUFDL0UsT0FBTyxFQUFDLHFCQUFxQixJQUFJLEVBQUUsRUFBQyxNQUFNLHNDQUFzQyxDQUFDO0FBQ2pGLE9BQU8sRUFBQyxxQkFBcUIsSUFBSSxFQUFFLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQztBQUNqRixPQUFPLEVBQUMsb0JBQW9CLElBQUksRUFBRSxFQUFDLE1BQU0scUNBQXFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdlbmVyYXRlZCBidW5kbGUgaW5kZXguIERvIG5vdCBlZGl0LlxuICovXG5cbmV4cG9ydCAqIGZyb20gJy4vcHVibGljX2FwaSc7XG5cbmV4cG9ydCB7QXR0cmlidXRpb25Db250cm9sRGlyZWN0aXZlIGFzIMm1cn0gZnJvbSAnLi9saWIvY29udHJvbC9hdHRyaWJ1dGlvbi1jb250cm9sLmRpcmVjdGl2ZSc7XG5leHBvcnQge0Z1bGxzY3JlZW5Db250cm9sRGlyZWN0aXZlIGFzIMm1bX0gZnJvbSAnLi9saWIvY29udHJvbC9mdWxsc2NyZWVuLWNvbnRyb2wuZGlyZWN0aXZlJztcbmV4cG9ydCB7R2VvY29kZXJDb250cm9sRGlyZWN0aXZlIGFzIMm1cCxNQVBCT1hfR0VPQ09ERVJfQVBJX0tFWSBhcyDJtW99IGZyb20gJy4vbGliL2NvbnRyb2wvZ2VvY29kZXItY29udHJvbC5kaXJlY3RpdmUnO1xuZXhwb3J0IHtHZW9sb2NhdGVDb250cm9sRGlyZWN0aXZlIGFzIMm1cX0gZnJvbSAnLi9saWIvY29udHJvbC9nZW9sb2NhdGUtY29udHJvbC5kaXJlY3RpdmUnO1xuZXhwb3J0IHtOYXZpZ2F0aW9uQ29udHJvbERpcmVjdGl2ZSBhcyDJtW59IGZyb20gJy4vbGliL2NvbnRyb2wvbmF2aWdhdGlvbi1jb250cm9sLmRpcmVjdGl2ZSc7XG5leHBvcnQge1NjYWxlQ29udHJvbERpcmVjdGl2ZSBhcyDJtXN9IGZyb20gJy4vbGliL2NvbnRyb2wvc2NhbGUtY29udHJvbC5kaXJlY3RpdmUnO1xuZXhwb3J0IHtEcmFnZ2FibGVEaXJlY3RpdmUgYXMgybVifSBmcm9tICcuL2xpYi9kcmFnZ2FibGUvZHJhZ2dhYmxlLmRpcmVjdGl2ZSc7XG5leHBvcnQge0ltYWdlQ29tcG9uZW50IGFzIMm1Zn0gZnJvbSAnLi9saWIvaW1hZ2UvaW1hZ2UuY29tcG9uZW50JztcbmV4cG9ydCB7TGF5ZXJDb21wb25lbnQgYXMgybVhfSBmcm9tICcuL2xpYi9sYXllci9sYXllci5jb21wb25lbnQnO1xuZXhwb3J0IHtDbHVzdGVyUG9pbnREaXJlY3RpdmUgYXMgybV1LE1hcmtlckNsdXN0ZXJDb21wb25lbnQgYXMgybV2LFBvaW50RGlyZWN0aXZlIGFzIMm1dH0gZnJvbSAnLi9saWIvbWFya2VyLWNsdXN0ZXIvbWFya2VyLWNsdXN0ZXIuY29tcG9uZW50JztcbmV4cG9ydCB7TWFya2VyQ29tcG9uZW50IGFzIMm1ZX0gZnJvbSAnLi9saWIvbWFya2VyL21hcmtlci5jb21wb25lbnQnO1xuZXhwb3J0IHtQb3B1cENvbXBvbmVudCBhcyDJtWx9IGZyb20gJy4vbGliL3BvcHVwL3BvcHVwLmNvbXBvbmVudCc7XG5leHBvcnQge0NhbnZhc1NvdXJjZUNvbXBvbmVudCBhcyDJtWt9IGZyb20gJy4vbGliL3NvdXJjZS9jYW52YXMtc291cmNlLmNvbXBvbmVudCc7XG5leHBvcnQge0ZlYXR1cmVDb21wb25lbnQgYXMgybVjfSBmcm9tICcuL2xpYi9zb3VyY2UvZ2VvanNvbi9mZWF0dXJlLmNvbXBvbmVudCc7XG5leHBvcnQge0dlb0pTT05Tb3VyY2VDb21wb25lbnQgYXMgybVkfSBmcm9tICcuL2xpYi9zb3VyY2UvZ2VvanNvbi9nZW9qc29uLXNvdXJjZS5jb21wb25lbnQnO1xuZXhwb3J0IHtJbWFnZVNvdXJjZUNvbXBvbmVudCBhcyDJtWl9IGZyb20gJy4vbGliL3NvdXJjZS9pbWFnZS1zb3VyY2UuY29tcG9uZW50JztcbmV4cG9ydCB7UmFzdGVyU291cmNlQ29tcG9uZW50IGFzIMm1aH0gZnJvbSAnLi9saWIvc291cmNlL3Jhc3Rlci1zb3VyY2UuY29tcG9uZW50JztcbmV4cG9ydCB7VmVjdG9yU291cmNlQ29tcG9uZW50IGFzIMm1Z30gZnJvbSAnLi9saWIvc291cmNlL3ZlY3Rvci1zb3VyY2UuY29tcG9uZW50JztcbmV4cG9ydCB7VmlkZW9Tb3VyY2VDb21wb25lbnQgYXMgybVqfSBmcm9tICcuL2xpYi9zb3VyY2UvdmlkZW8tc291cmNlLmNvbXBvbmVudCc7Il19