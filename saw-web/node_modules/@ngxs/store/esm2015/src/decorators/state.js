/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ensureStoreMetadata } from '../internal/internals';
import { META_KEY } from '../symbols';
/** @type {?} */
const stateNameRegex = new RegExp('^[a-zA-Z0-9_]+$');
/**
 * Error message
 * @ignore
 * @type {?}
 */
export const stateNameErrorMessage = name => `${name} is not a valid state name. It needs to be a valid object property name.`;
/**
 * Decorates a class with ngxs state information.
 * @template T
 * @param {?} options
 * @return {?}
 */
export function State(options) {
    return function (target) {
        /** @type {?} */
        const meta = ensureStoreMetadata(target);
        // Handle inheritance
        if (Object.getPrototypeOf(target).hasOwnProperty(META_KEY)) {
            /** @type {?} */
            const parentMeta = Object.getPrototypeOf(target)[META_KEY];
            meta.actions = Object.assign({}, meta.actions, parentMeta.actions);
        }
        meta.children = options.children;
        meta.defaults = options.defaults;
        meta.name = options.name;
        if (!options.name) {
            throw new Error(`States must register a 'name' property`);
        }
        if (!stateNameRegex.test(options.name)) {
            throw new Error(stateNameErrorMessage(options.name));
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS8iLCJzb3VyY2VzIjpbInNyYy9kZWNvcmF0b3JzL3N0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM1RCxPQUFPLEVBQWdCLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQzs7TUFFOUMsY0FBYyxHQUFHLElBQUksTUFBTSxDQUFDLGlCQUFpQixDQUFDOzs7Ozs7QUFNcEQsTUFBTSxPQUFPLHFCQUFxQixHQUFHLElBQUksQ0FBQyxFQUFFLENBQzFDLEdBQUcsSUFBSSwwRUFBMEU7Ozs7Ozs7QUFLbkYsTUFBTSxVQUFVLEtBQUssQ0FBSSxPQUF3QjtJQUMvQyxPQUFPLFVBQVMsTUFBVzs7Y0FDbkIsSUFBSSxHQUFHLG1CQUFtQixDQUFDLE1BQU0sQ0FBQztRQUV4QyxxQkFBcUI7UUFDckIsSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRTs7a0JBQ3BELFVBQVUsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQztZQUUxRCxJQUFJLENBQUMsT0FBTyxxQkFDUCxJQUFJLENBQUMsT0FBTyxFQUNaLFVBQVUsQ0FBQyxPQUFPLENBQ3RCLENBQUM7U0FDSDtRQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDakMsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBRXpCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFO1lBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztTQUMzRDtRQUVELElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN0QyxNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ3REO0lBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVuc3VyZVN0b3JlTWV0YWRhdGEgfSBmcm9tICcuLi9pbnRlcm5hbC9pbnRlcm5hbHMnO1xyXG5pbXBvcnQgeyBTdG9yZU9wdGlvbnMsIE1FVEFfS0VZIH0gZnJvbSAnLi4vc3ltYm9scyc7XHJcblxyXG5jb25zdCBzdGF0ZU5hbWVSZWdleCA9IG5ldyBSZWdFeHAoJ15bYS16QS1aMC05X10rJCcpO1xyXG5cclxuLyoqXHJcbiAqIEVycm9yIG1lc3NhZ2VcclxuICogQGlnbm9yZVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHN0YXRlTmFtZUVycm9yTWVzc2FnZSA9IG5hbWUgPT5cclxuICBgJHtuYW1lfSBpcyBub3QgYSB2YWxpZCBzdGF0ZSBuYW1lLiBJdCBuZWVkcyB0byBiZSBhIHZhbGlkIG9iamVjdCBwcm9wZXJ0eSBuYW1lLmA7XHJcblxyXG4vKipcclxuICogRGVjb3JhdGVzIGEgY2xhc3Mgd2l0aCBuZ3hzIHN0YXRlIGluZm9ybWF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIFN0YXRlPFQ+KG9wdGlvbnM6IFN0b3JlT3B0aW9uczxUPikge1xyXG4gIHJldHVybiBmdW5jdGlvbih0YXJnZXQ6IGFueSkge1xyXG4gICAgY29uc3QgbWV0YSA9IGVuc3VyZVN0b3JlTWV0YWRhdGEodGFyZ2V0KTtcclxuXHJcbiAgICAvLyBIYW5kbGUgaW5oZXJpdGFuY2VcclxuICAgIGlmIChPYmplY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KS5oYXNPd25Qcm9wZXJ0eShNRVRBX0tFWSkpIHtcclxuICAgICAgY29uc3QgcGFyZW50TWV0YSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpW01FVEFfS0VZXTtcclxuXHJcbiAgICAgIG1ldGEuYWN0aW9ucyA9IHtcclxuICAgICAgICAuLi5tZXRhLmFjdGlvbnMsXHJcbiAgICAgICAgLi4ucGFyZW50TWV0YS5hY3Rpb25zXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgbWV0YS5jaGlsZHJlbiA9IG9wdGlvbnMuY2hpbGRyZW47XHJcbiAgICBtZXRhLmRlZmF1bHRzID0gb3B0aW9ucy5kZWZhdWx0cztcclxuICAgIG1ldGEubmFtZSA9IG9wdGlvbnMubmFtZTtcclxuXHJcbiAgICBpZiAoIW9wdGlvbnMubmFtZSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFN0YXRlcyBtdXN0IHJlZ2lzdGVyIGEgJ25hbWUnIHByb3BlcnR5YCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFzdGF0ZU5hbWVSZWdleC50ZXN0KG9wdGlvbnMubmFtZSkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKHN0YXRlTmFtZUVycm9yTWVzc2FnZShvcHRpb25zLm5hbWUpKTtcclxuICAgIH1cclxuICB9O1xyXG59XHJcbiJdfQ==