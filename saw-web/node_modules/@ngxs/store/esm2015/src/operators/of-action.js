/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { map, filter } from 'rxjs/operators';
import { getActionTypeFromInstance } from '../utils/utils';
/**
 * RxJS operator for selecting out specific actions.
 *
 * This will grab actions that have just been dispatched as well as actions that have completed
 * @param {...?} allowedTypes
 * @return {?}
 */
export function ofAction(...allowedTypes) {
    return ofActionOperator(allowedTypes);
}
/**
 * RxJS operator for selecting out specific actions.
 *
 * This will ONLY grab actions that have just been dispatched
 * @param {...?} allowedTypes
 * @return {?}
 */
export function ofActionDispatched(...allowedTypes) {
    return ofActionOperator(allowedTypes, "DISPATCHED" /* Dispatched */);
}
/**
 * RxJS operator for selecting out specific actions.
 *
 * This will ONLY grab actions that have just been successfully completed
 * @param {...?} allowedTypes
 * @return {?}
 */
export function ofActionSuccessful(...allowedTypes) {
    return ofActionOperator(allowedTypes, "SUCCESSFUL" /* Successful */);
}
/**
 * RxJS operator for selecting out specific actions.
 *
 * This will ONLY grab actions that have just been canceled
 * @param {...?} allowedTypes
 * @return {?}
 */
export function ofActionCanceled(...allowedTypes) {
    return ofActionOperator(allowedTypes, "CANCELED" /* Canceled */);
}
/**
 * RxJS operator for selecting out specific actions.
 *
 * This will ONLY grab actions that have just thrown an error
 * @param {...?} allowedTypes
 * @return {?}
 */
export function ofActionErrored(...allowedTypes) {
    return ofActionOperator(allowedTypes, "ERRORED" /* Errored */);
}
/**
 * @param {?} allowedTypes
 * @param {?=} status
 * @return {?}
 */
function ofActionOperator(allowedTypes, status) {
    /** @type {?} */
    const allowedMap = createAllowedMap(allowedTypes);
    return function (o) {
        return o.pipe(filterStatus(allowedMap, status), mapAction());
    };
}
/**
 * @param {?} allowedTypes
 * @param {?=} status
 * @return {?}
 */
function filterStatus(allowedTypes, status) {
    return filter((ctx) => {
        /** @type {?} */
        const actionType = getActionTypeFromInstance(ctx.action);
        /** @type {?} */
        const type = allowedTypes[actionType];
        return status ? type && ctx.status === status : type;
    });
}
/**
 * @return {?}
 */
function mapAction() {
    return map((ctx) => ctx.action);
}
/**
 * @param {?} types
 * @return {?}
 */
function createAllowedMap(types) {
    return types.reduce((acc, klass) => {
        acc[getActionTypeFromInstance(klass)] = true;
        return acc;
    }, {});
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2YtYWN0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMvc3RvcmUvIiwic291cmNlcyI6WyJzcmMvb3BlcmF0b3JzL29mLWFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7Ozs7QUFXM0QsTUFBTSxVQUFVLFFBQVEsQ0FBQyxHQUFHLFlBQW1CO0lBQzdDLE9BQU8sZ0JBQWdCLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDeEMsQ0FBQzs7Ozs7Ozs7QUFPRCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsR0FBRyxZQUFtQjtJQUN2RCxPQUFPLGdCQUFnQixDQUFDLFlBQVksZ0NBQTBCLENBQUM7QUFDakUsQ0FBQzs7Ozs7Ozs7QUFPRCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsR0FBRyxZQUFtQjtJQUN2RCxPQUFPLGdCQUFnQixDQUFDLFlBQVksZ0NBQTBCLENBQUM7QUFDakUsQ0FBQzs7Ozs7Ozs7QUFPRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsR0FBRyxZQUFtQjtJQUNyRCxPQUFPLGdCQUFnQixDQUFDLFlBQVksNEJBQXdCLENBQUM7QUFDL0QsQ0FBQzs7Ozs7Ozs7QUFPRCxNQUFNLFVBQVUsZUFBZSxDQUFDLEdBQUcsWUFBbUI7SUFDcEQsT0FBTyxnQkFBZ0IsQ0FBQyxZQUFZLDBCQUF1QixDQUFDO0FBQzlELENBQUM7Ozs7OztBQUVELFNBQVMsZ0JBQWdCLENBQUMsWUFBbUIsRUFBRSxNQUFxQjs7VUFDNUQsVUFBVSxHQUFHLGdCQUFnQixDQUFDLFlBQVksQ0FBQztJQUNqRCxPQUFPLFVBQVMsQ0FBa0I7UUFDaEMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUNYLFlBQVksQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLEVBQ2hDLFNBQVMsRUFBRSxDQUNaLENBQUM7SUFDSixDQUFDLENBQUM7QUFDSixDQUFDOzs7Ozs7QUFFRCxTQUFTLFlBQVksQ0FBQyxZQUF3QyxFQUFFLE1BQXFCO0lBQ25GLE9BQU8sTUFBTSxDQUFDLENBQUMsR0FBa0IsRUFBRSxFQUFFOztjQUM3QixVQUFVLEdBQUcseUJBQXlCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQzs7Y0FDbEQsSUFBSSxHQUFHLFlBQVksQ0FBQyxVQUFVLENBQUM7UUFDckMsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3ZELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQzs7OztBQUVELFNBQVMsU0FBUztJQUNoQixPQUFPLEdBQUcsQ0FBQyxDQUFDLEdBQWtCLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNqRCxDQUFDOzs7OztBQUVELFNBQVMsZ0JBQWdCLENBQUMsS0FBWTtJQUNwQyxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFRLEVBQUUsS0FBVSxFQUFFLEVBQUU7UUFDM0MsR0FBRyxDQUFDLHlCQUF5QixDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQzdDLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ1QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9wZXJhdG9yRnVuY3Rpb24sIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwLCBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IGdldEFjdGlvblR5cGVGcm9tSW5zdGFuY2UgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IEFjdGlvbkNvbnRleHQsIEFjdGlvblN0YXR1cyB9IGZyb20gJy4uL2FjdGlvbnMtc3RyZWFtJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvZkFjdGlvbjxUPihhbGxvd2VkVHlwZSk6IE9wZXJhdG9yRnVuY3Rpb248YW55LCBUPjtcclxuZXhwb3J0IGZ1bmN0aW9uIG9mQWN0aW9uPFQ+KC4uLmFsbG93ZWRUeXBlcyk6IE9wZXJhdG9yRnVuY3Rpb248YW55LCBUPjtcclxuXHJcbi8qKlxyXG4gKiBSeEpTIG9wZXJhdG9yIGZvciBzZWxlY3Rpbmcgb3V0IHNwZWNpZmljIGFjdGlvbnMuXHJcbiAqXHJcbiAqIFRoaXMgd2lsbCBncmFiIGFjdGlvbnMgdGhhdCBoYXZlIGp1c3QgYmVlbiBkaXNwYXRjaGVkIGFzIHdlbGwgYXMgYWN0aW9ucyB0aGF0IGhhdmUgY29tcGxldGVkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gb2ZBY3Rpb24oLi4uYWxsb3dlZFR5cGVzOiBhbnlbXSkge1xyXG4gIHJldHVybiBvZkFjdGlvbk9wZXJhdG9yKGFsbG93ZWRUeXBlcyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSeEpTIG9wZXJhdG9yIGZvciBzZWxlY3Rpbmcgb3V0IHNwZWNpZmljIGFjdGlvbnMuXHJcbiAqXHJcbiAqIFRoaXMgd2lsbCBPTkxZIGdyYWIgYWN0aW9ucyB0aGF0IGhhdmUganVzdCBiZWVuIGRpc3BhdGNoZWRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBvZkFjdGlvbkRpc3BhdGNoZWQoLi4uYWxsb3dlZFR5cGVzOiBhbnlbXSkge1xyXG4gIHJldHVybiBvZkFjdGlvbk9wZXJhdG9yKGFsbG93ZWRUeXBlcywgQWN0aW9uU3RhdHVzLkRpc3BhdGNoZWQpO1xyXG59XHJcblxyXG4vKipcclxuICogUnhKUyBvcGVyYXRvciBmb3Igc2VsZWN0aW5nIG91dCBzcGVjaWZpYyBhY3Rpb25zLlxyXG4gKlxyXG4gKiBUaGlzIHdpbGwgT05MWSBncmFiIGFjdGlvbnMgdGhhdCBoYXZlIGp1c3QgYmVlbiBzdWNjZXNzZnVsbHkgY29tcGxldGVkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gb2ZBY3Rpb25TdWNjZXNzZnVsKC4uLmFsbG93ZWRUeXBlczogYW55W10pIHtcclxuICByZXR1cm4gb2ZBY3Rpb25PcGVyYXRvcihhbGxvd2VkVHlwZXMsIEFjdGlvblN0YXR1cy5TdWNjZXNzZnVsKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJ4SlMgb3BlcmF0b3IgZm9yIHNlbGVjdGluZyBvdXQgc3BlY2lmaWMgYWN0aW9ucy5cclxuICpcclxuICogVGhpcyB3aWxsIE9OTFkgZ3JhYiBhY3Rpb25zIHRoYXQgaGF2ZSBqdXN0IGJlZW4gY2FuY2VsZWRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBvZkFjdGlvbkNhbmNlbGVkKC4uLmFsbG93ZWRUeXBlczogYW55W10pIHtcclxuICByZXR1cm4gb2ZBY3Rpb25PcGVyYXRvcihhbGxvd2VkVHlwZXMsIEFjdGlvblN0YXR1cy5DYW5jZWxlZCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSeEpTIG9wZXJhdG9yIGZvciBzZWxlY3Rpbmcgb3V0IHNwZWNpZmljIGFjdGlvbnMuXHJcbiAqXHJcbiAqIFRoaXMgd2lsbCBPTkxZIGdyYWIgYWN0aW9ucyB0aGF0IGhhdmUganVzdCB0aHJvd24gYW4gZXJyb3JcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBvZkFjdGlvbkVycm9yZWQoLi4uYWxsb3dlZFR5cGVzOiBhbnlbXSkge1xyXG4gIHJldHVybiBvZkFjdGlvbk9wZXJhdG9yKGFsbG93ZWRUeXBlcywgQWN0aW9uU3RhdHVzLkVycm9yZWQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBvZkFjdGlvbk9wZXJhdG9yKGFsbG93ZWRUeXBlczogYW55W10sIHN0YXR1cz86IEFjdGlvblN0YXR1cykge1xyXG4gIGNvbnN0IGFsbG93ZWRNYXAgPSBjcmVhdGVBbGxvd2VkTWFwKGFsbG93ZWRUeXBlcyk7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKG86IE9ic2VydmFibGU8YW55Pikge1xyXG4gICAgcmV0dXJuIG8ucGlwZShcclxuICAgICAgZmlsdGVyU3RhdHVzKGFsbG93ZWRNYXAsIHN0YXR1cyksXHJcbiAgICAgIG1hcEFjdGlvbigpXHJcbiAgICApO1xyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbHRlclN0YXR1cyhhbGxvd2VkVHlwZXM6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9LCBzdGF0dXM/OiBBY3Rpb25TdGF0dXMpIHtcclxuICByZXR1cm4gZmlsdGVyKChjdHg6IEFjdGlvbkNvbnRleHQpID0+IHtcclxuICAgIGNvbnN0IGFjdGlvblR5cGUgPSBnZXRBY3Rpb25UeXBlRnJvbUluc3RhbmNlKGN0eC5hY3Rpb24pO1xyXG4gICAgY29uc3QgdHlwZSA9IGFsbG93ZWRUeXBlc1thY3Rpb25UeXBlXTtcclxuICAgIHJldHVybiBzdGF0dXMgPyB0eXBlICYmIGN0eC5zdGF0dXMgPT09IHN0YXR1cyA6IHR5cGU7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1hcEFjdGlvbigpIHtcclxuICByZXR1cm4gbWFwKChjdHg6IEFjdGlvbkNvbnRleHQpID0+IGN0eC5hY3Rpb24pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVBbGxvd2VkTWFwKHR5cGVzOiBhbnlbXSk6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9IHtcclxuICByZXR1cm4gdHlwZXMucmVkdWNlKChhY2M6IGFueSwga2xhc3M6IGFueSkgPT4ge1xyXG4gICAgYWNjW2dldEFjdGlvblR5cGVGcm9tSW5zdGFuY2Uoa2xhc3MpXSA9IHRydWU7XHJcbiAgICByZXR1cm4gYWNjO1xyXG4gIH0sIHt9KTtcclxufVxyXG4iXX0=