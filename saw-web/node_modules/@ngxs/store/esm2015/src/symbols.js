/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from '@angular/core';
/** @type {?} */
export const ROOT_STATE_TOKEN = new InjectionToken('ROOT_STATE_TOKEN');
/** @type {?} */
export const FEATURE_STATE_TOKEN = new InjectionToken('FEATURE_STATE_TOKEN');
/** @type {?} */
export const META_KEY = 'NGXS_META';
/** @type {?} */
export const SELECTOR_META_KEY = 'NGXS_SELECTOR_META';
/** @type {?} */
export const NGXS_PLUGINS = new InjectionToken('NGXS_PLUGINS');
/**
 * The NGXS config settings.
 */
export class NgxsConfig {
    constructor() {
        this.compatibility = {
            strictContentSecurityPolicy: false
        };
    }
}
if (false) {
    /**
     * Run in development mode. This will add additional debugging features:
     * - Object.freeze on the state and actions to guarantee immutability
     * (default: false)
     * @type {?}
     */
    NgxsConfig.prototype.developmentMode;
    /** @type {?} */
    NgxsConfig.prototype.compatibility;
}
/**
 * State context provided to the actions in the state.
 * @record
 * @template T
 */
export function StateContext() { }
if (false) {
    /**
     * Get the current state.
     * @return {?}
     */
    StateContext.prototype.getState = function () { };
    /**
     * Reset the state to a new value.
     * @param {?} val
     * @return {?}
     */
    StateContext.prototype.setState = function (val) { };
    /**
     * Patch the existing state with the provided value.
     * @param {?} val
     * @return {?}
     */
    StateContext.prototype.patchState = function (val) { };
    /**
     * Dispatch a new action and return the dispatched observable.
     * @param {?} actions
     * @return {?}
     */
    StateContext.prototype.dispatch = function (actions) { };
}
/**
 * Plugin interface
 * @record
 */
export function NgxsPlugin() { }
if (false) {
    /**
     * Handle the state/action before its submitted to the state handlers.
     * @param {?} state
     * @param {?} action
     * @param {?} next
     * @return {?}
     */
    NgxsPlugin.prototype.handle = function (state, action, next) { };
}
/**
 * Options that can be provided to the store.
 * @record
 * @template T
 */
export function StoreOptions() { }
if (false) {
    /**
     * Name of the state. Required.
     * @type {?}
     */
    StoreOptions.prototype.name;
    /**
     * Default values for the state. If not provided, uses empty object.
     * @type {?|undefined}
     */
    StoreOptions.prototype.defaults;
    /**
     * Sub states for the given state.
     * @type {?|undefined}
     */
    StoreOptions.prototype.children;
}
/**
 * Actions that can be provided in a action decorator.
 * @record
 */
export function ActionOptions() { }
if (false) {
    /**
     * Cancel the previous uncompleted observable(s).
     * @type {?|undefined}
     */
    ActionOptions.prototype.cancelUncompleted;
}
/**
 * On init interface
 * @record
 */
export function NgxsOnInit() { }
if (false) {
    /**
     * @param {?=} ctx
     * @return {?}
     */
    NgxsOnInit.prototype.ngxsOnInit = function (ctx) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9scy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL3N0b3JlLyIsInNvdXJjZXMiOlsic3JjL3N5bWJvbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRy9DLE1BQU0sT0FBTyxnQkFBZ0IsR0FBRyxJQUFJLGNBQWMsQ0FBTSxrQkFBa0IsQ0FBQzs7QUFDM0UsTUFBTSxPQUFPLG1CQUFtQixHQUFHLElBQUksY0FBYyxDQUFNLHFCQUFxQixDQUFDOztBQUNqRixNQUFNLE9BQU8sUUFBUSxHQUFHLFdBQVc7O0FBQ25DLE1BQU0sT0FBTyxpQkFBaUIsR0FBRyxvQkFBb0I7O0FBRXJELE1BQU0sT0FBTyxZQUFZLEdBQUcsSUFBSSxjQUFjLENBQUMsY0FBYyxDQUFDOzs7O0FBTzlELE1BQU0sT0FBTyxVQUFVO0lBZ0JyQjtRQUNFLElBQUksQ0FBQyxhQUFhLEdBQUc7WUFDbkIsMkJBQTJCLEVBQUUsS0FBSztTQUNuQyxDQUFDO0lBQ0osQ0FBQztDQUNGOzs7Ozs7OztJQWZDLHFDQUF5Qjs7SUFDekIsbUNBT0U7Ozs7Ozs7QUFZSixrQ0FvQkM7Ozs7OztJQWhCQyxrREFBYzs7Ozs7O0lBS2QscURBQWlCOzs7Ozs7SUFLakIsdURBQTRCOzs7Ozs7SUFLNUIseURBQWlEOzs7Ozs7QUFRbkQsZ0NBS0M7Ozs7Ozs7OztJQURDLGlFQUE2RDs7Ozs7OztBQU0vRCxrQ0FlQzs7Ozs7O0lBWEMsNEJBQWE7Ozs7O0lBS2IsZ0NBQWE7Ozs7O0lBS2IsZ0NBQWlCOzs7Ozs7QUFNbkIsbUNBS0M7Ozs7OztJQURDLDBDQUE0Qjs7Ozs7O0FBTTlCLGdDQUVDOzs7Ozs7SUFEQyxxREFBZ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5leHBvcnQgY29uc3QgUk9PVF9TVEFURV9UT0tFTiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxhbnk+KCdST09UX1NUQVRFX1RPS0VOJyk7XHJcbmV4cG9ydCBjb25zdCBGRUFUVVJFX1NUQVRFX1RPS0VOID0gbmV3IEluamVjdGlvblRva2VuPGFueT4oJ0ZFQVRVUkVfU1RBVEVfVE9LRU4nKTtcclxuZXhwb3J0IGNvbnN0IE1FVEFfS0VZID0gJ05HWFNfTUVUQSc7XHJcbmV4cG9ydCBjb25zdCBTRUxFQ1RPUl9NRVRBX0tFWSA9ICdOR1hTX1NFTEVDVE9SX01FVEEnO1xyXG5cclxuZXhwb3J0IGNvbnN0IE5HWFNfUExVR0lOUyA9IG5ldyBJbmplY3Rpb25Ub2tlbignTkdYU19QTFVHSU5TJyk7XHJcbmV4cG9ydCB0eXBlIE5neHNQbHVnaW5Db25zdHJ1Y3RvciA9IG5ldyAoLi4uYXJnczogYW55W10pID0+IE5neHNQbHVnaW47XHJcbmV4cG9ydCB0eXBlIE5neHNQbHVnaW5GbiA9IChzdGF0ZTogYW55LCBtdXRhdGlvbjogYW55LCBuZXh0OiBOZ3hzTmV4dFBsdWdpbkZuKSA9PiBhbnk7XHJcblxyXG4vKipcclxuICogVGhlIE5HWFMgY29uZmlnIHNldHRpbmdzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE5neHNDb25maWcge1xyXG4gIC8qKlxyXG4gICAqIFJ1biBpbiBkZXZlbG9wbWVudCBtb2RlLiBUaGlzIHdpbGwgYWRkIGFkZGl0aW9uYWwgZGVidWdnaW5nIGZlYXR1cmVzOlxyXG4gICAqIC0gT2JqZWN0LmZyZWV6ZSBvbiB0aGUgc3RhdGUgYW5kIGFjdGlvbnMgdG8gZ3VhcmFudGVlIGltbXV0YWJpbGl0eVxyXG4gICAqIChkZWZhdWx0OiBmYWxzZSlcclxuICAgKi9cclxuICBkZXZlbG9wbWVudE1vZGU6IGJvb2xlYW47XHJcbiAgY29tcGF0aWJpbGl0eToge1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdXBwb3J0IGEgc3RyaWN0IENvbnRlbnQgU2VjdXJpdHkgUG9saWN5LlxyXG4gICAgICogVGhpcyB3aWxsIGNpcnVtdmVudCBzb21lIG9wdGltaXNhdGlvbnMgdGhhdCB2aW9sYXRlIGEgc3RyaWN0IENTUCB0aHJvdWdoIHRoZSB1c2Ugb2YgYG5ldyBGdW5jdGlvbiguLi4pYC5cclxuICAgICAqIChkZWZhdWx0OiBmYWxzZSlcclxuICAgICAqL1xyXG4gICAgc3RyaWN0Q29udGVudFNlY3VyaXR5UG9saWN5OiBib29sZWFuO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5jb21wYXRpYmlsaXR5ID0ge1xyXG4gICAgICBzdHJpY3RDb250ZW50U2VjdXJpdHlQb2xpY3k6IGZhbHNlXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFN0YXRlIGNvbnRleHQgcHJvdmlkZWQgdG8gdGhlIGFjdGlvbnMgaW4gdGhlIHN0YXRlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBTdGF0ZUNvbnRleHQ8VD4ge1xyXG4gIC8qKlxyXG4gICAqIEdldCB0aGUgY3VycmVudCBzdGF0ZS5cclxuICAgKi9cclxuICBnZXRTdGF0ZSgpOiBUO1xyXG5cclxuICAvKipcclxuICAgKiBSZXNldCB0aGUgc3RhdGUgdG8gYSBuZXcgdmFsdWUuXHJcbiAgICovXHJcbiAgc2V0U3RhdGUodmFsOiBUKTtcclxuXHJcbiAgLyoqXHJcbiAgICogUGF0Y2ggdGhlIGV4aXN0aW5nIHN0YXRlIHdpdGggdGhlIHByb3ZpZGVkIHZhbHVlLlxyXG4gICAqL1xyXG4gIHBhdGNoU3RhdGUodmFsOiBQYXJ0aWFsPFQ+KTtcclxuXHJcbiAgLyoqXHJcbiAgICogRGlzcGF0Y2ggYSBuZXcgYWN0aW9uIGFuZCByZXR1cm4gdGhlIGRpc3BhdGNoZWQgb2JzZXJ2YWJsZS5cclxuICAgKi9cclxuICBkaXNwYXRjaChhY3Rpb25zOiBhbnkgfCBhbnlbXSk6IE9ic2VydmFibGU8dm9pZD47XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIE5neHNOZXh0UGx1Z2luRm4gPSAoc3RhdGU6IGFueSwgbXV0YXRpb246IGFueSkgPT4gYW55O1xyXG5cclxuLyoqXHJcbiAqIFBsdWdpbiBpbnRlcmZhY2VcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTmd4c1BsdWdpbiB7XHJcbiAgLyoqXHJcbiAgICogSGFuZGxlIHRoZSBzdGF0ZS9hY3Rpb24gYmVmb3JlIGl0cyBzdWJtaXR0ZWQgdG8gdGhlIHN0YXRlIGhhbmRsZXJzLlxyXG4gICAqL1xyXG4gIGhhbmRsZShzdGF0ZTogYW55LCBhY3Rpb246IGFueSwgbmV4dDogTmd4c05leHRQbHVnaW5Gbik6IGFueTtcclxufVxyXG5cclxuLyoqXHJcbiAqIE9wdGlvbnMgdGhhdCBjYW4gYmUgcHJvdmlkZWQgdG8gdGhlIHN0b3JlLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBTdG9yZU9wdGlvbnM8VD4ge1xyXG4gIC8qKlxyXG4gICAqIE5hbWUgb2YgdGhlIHN0YXRlLiBSZXF1aXJlZC5cclxuICAgKi9cclxuICBuYW1lOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgdmFsdWVzIGZvciB0aGUgc3RhdGUuIElmIG5vdCBwcm92aWRlZCwgdXNlcyBlbXB0eSBvYmplY3QuXHJcbiAgICovXHJcbiAgZGVmYXVsdHM/OiBUO1xyXG5cclxuICAvKipcclxuICAgKiBTdWIgc3RhdGVzIGZvciB0aGUgZ2l2ZW4gc3RhdGUuXHJcbiAgICovXHJcbiAgY2hpbGRyZW4/OiBhbnlbXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFjdGlvbnMgdGhhdCBjYW4gYmUgcHJvdmlkZWQgaW4gYSBhY3Rpb24gZGVjb3JhdG9yLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBBY3Rpb25PcHRpb25zIHtcclxuICAvKipcclxuICAgKiBDYW5jZWwgdGhlIHByZXZpb3VzIHVuY29tcGxldGVkIG9ic2VydmFibGUocykuXHJcbiAgICovXHJcbiAgY2FuY2VsVW5jb21wbGV0ZWQ/OiBib29sZWFuO1xyXG59XHJcblxyXG4vKipcclxuICogT24gaW5pdCBpbnRlcmZhY2VcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTmd4c09uSW5pdCB7XHJcbiAgbmd4c09uSW5pdChjdHg/OiBTdGF0ZUNvbnRleHQ8YW55Pik6IHZvaWQgfCBhbnk7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIE5neHNMaWZlQ3ljbGUgPSBQYXJ0aWFsPE5neHNPbkluaXQ+O1xyXG4iXX0=