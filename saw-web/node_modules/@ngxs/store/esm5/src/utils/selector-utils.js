/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ensureSelectorMetadata, getSelectorMetadata, getStoreMetadata } from '../internal/internals';
import { memoize } from '../utils/memoize';
/**
 * Function for creating a selector
 * @param {?} selectors The selectors to use to create the arguments of this function
 * @param {?} originalFn The original function being made into a selector
 * @param {?=} creationMetadata
 * @return {?}
 */
export function createSelector(selectors, originalFn, creationMetadata) {
    /** @type {?} */
    var wrappedFn = function wrappedSelectorFn() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        /** @type {?} */
        var returnValue = originalFn.apply(void 0, tslib_1.__spread(args));
        if (returnValue instanceof Function) {
            /** @type {?} */
            var innerMemoizedFn = memoize.apply(null, [returnValue]);
            return innerMemoizedFn;
        }
        return returnValue;
    };
    /** @type {?} */
    var memoizedFn = memoize(wrappedFn);
    /** @type {?} */
    var containerClass = creationMetadata && creationMetadata.containerClass;
    /** @type {?} */
    var fn = function (state) {
        /** @type {?} */
        var results = [];
        /** @type {?} */
        var selectorsToApply = [];
        if (containerClass) {
            // If we are on a state class, add it as the first selector parameter
            /** @type {?} */
            var metadata = getStoreMetadata(containerClass);
            if (metadata) {
                selectorsToApply.push(containerClass);
            }
        }
        if (selectors) {
            selectorsToApply.push.apply(selectorsToApply, tslib_1.__spread(selectors));
        }
        // Determine arguments from the app state using the selectors
        if (selectorsToApply) {
            results.push.apply(results, tslib_1.__spread(selectorsToApply.map(function (a) { return getSelectorFn(a)(state); })));
        }
        // if the lambda tries to access a something on the
        // state that doesn't exist, it will throw a TypeError.
        // since this is quite usual behaviour, we simply return undefined if so.
        try {
            return memoizedFn.apply(void 0, tslib_1.__spread(results));
        }
        catch (ex) {
            if (ex instanceof TypeError) {
                return undefined;
            }
            throw ex;
        }
    };
    /** @type {?} */
    var selectorMetaData = ensureSelectorMetadata(memoizedFn);
    selectorMetaData.originalFn = originalFn;
    selectorMetaData.selectFromAppState = fn;
    if (creationMetadata) {
        selectorMetaData.containerClass = creationMetadata.containerClass;
        selectorMetaData.selectorName = creationMetadata.selectorName;
    }
    return memoizedFn;
}
/**
 * This function gets the selector function to be used to get the selected slice from the app state
 * @ignore
 * @param {?} selector
 * @return {?}
 */
export function getSelectorFn(selector) {
    /** @type {?} */
    var metadata = getSelectorMetadata(selector) || getStoreMetadata(selector);
    return (metadata && metadata.selectFromAppState) || selector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0b3ItdXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS8iLCJzb3VyY2VzIjpbInNyYy91dGlscy9zZWxlY3Rvci11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBbUIsc0JBQXNCLEVBQUUsbUJBQW1CLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN2SCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7Ozs7Ozs7O0FBTzNDLE1BQU0sVUFBVSxjQUFjLENBQzVCLFNBQWdCLEVBQ2hCLFVBQWUsRUFDZixnQkFBZ0U7O1FBRTFELFNBQVMsR0FBRyxTQUFTLGlCQUFpQjtRQUFDLGNBQU87YUFBUCxVQUFPLEVBQVAscUJBQU8sRUFBUCxJQUFPO1lBQVAseUJBQU87OztZQUM1QyxXQUFXLEdBQUcsVUFBVSxnQ0FBSSxJQUFJLEVBQUM7UUFDdkMsSUFBSSxXQUFXLFlBQVksUUFBUSxFQUFFOztnQkFDN0IsZUFBZSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDMUQsT0FBTyxlQUFlLENBQUM7U0FDeEI7UUFDRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDOztRQUNLLFVBQVUsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDOztRQUMvQixjQUFjLEdBQUcsZ0JBQWdCLElBQUksZ0JBQWdCLENBQUMsY0FBYzs7UUFFcEUsRUFBRSxHQUFHLFVBQUEsS0FBSzs7WUFDUixPQUFPLEdBQUcsRUFBRTs7WUFFWixnQkFBZ0IsR0FBRyxFQUFFO1FBRTNCLElBQUksY0FBYyxFQUFFOzs7Z0JBRVosUUFBUSxHQUFHLGdCQUFnQixDQUFDLGNBQWMsQ0FBQztZQUNqRCxJQUFJLFFBQVEsRUFBRTtnQkFDWixnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7YUFDdkM7U0FDRjtRQUNELElBQUksU0FBUyxFQUFFO1lBQ2IsZ0JBQWdCLENBQUMsSUFBSSxPQUFyQixnQkFBZ0IsbUJBQVMsU0FBUyxHQUFFO1NBQ3JDO1FBQ0QsNkRBQTZEO1FBQzdELElBQUksZ0JBQWdCLEVBQUU7WUFDcEIsT0FBTyxDQUFDLElBQUksT0FBWixPQUFPLG1CQUFTLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBdkIsQ0FBdUIsQ0FBQyxHQUFFO1NBQ3JFO1FBRUQsbURBQW1EO1FBQ25ELHVEQUF1RDtRQUN2RCx5RUFBeUU7UUFDekUsSUFBSTtZQUNGLE9BQU8sVUFBVSxnQ0FBSSxPQUFPLEdBQUU7U0FDL0I7UUFBQyxPQUFPLEVBQUUsRUFBRTtZQUNYLElBQUksRUFBRSxZQUFZLFNBQVMsRUFBRTtnQkFDM0IsT0FBTyxTQUFTLENBQUM7YUFDbEI7WUFDRCxNQUFNLEVBQUUsQ0FBQztTQUNWO0lBQ0gsQ0FBQzs7UUFFSyxnQkFBZ0IsR0FBRyxzQkFBc0IsQ0FBQyxVQUFVLENBQUM7SUFDM0QsZ0JBQWdCLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztJQUN6QyxnQkFBZ0IsQ0FBQyxrQkFBa0IsR0FBRyxFQUFFLENBQUM7SUFDekMsSUFBSSxnQkFBZ0IsRUFBRTtRQUNwQixnQkFBZ0IsQ0FBQyxjQUFjLEdBQUcsZ0JBQWdCLENBQUMsY0FBYyxDQUFDO1FBQ2xFLGdCQUFnQixDQUFDLFlBQVksR0FBRyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUM7S0FDL0Q7SUFDRCxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDOzs7Ozs7O0FBTUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxRQUFhOztRQUNuQyxRQUFRLEdBQUcsbUJBQW1CLENBQUMsUUFBUSxDQUFDLElBQUksZ0JBQWdCLENBQUMsUUFBUSxDQUFDO0lBQzVFLE9BQU8sQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLGtCQUFrQixDQUFDLElBQUksUUFBUSxDQUFDO0FBQy9ELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZWxlY3RGcm9tU3RhdGUsIGVuc3VyZVNlbGVjdG9yTWV0YWRhdGEsIGdldFNlbGVjdG9yTWV0YWRhdGEsIGdldFN0b3JlTWV0YWRhdGEgfSBmcm9tICcuLi9pbnRlcm5hbC9pbnRlcm5hbHMnO1xyXG5pbXBvcnQgeyBtZW1vaXplIH0gZnJvbSAnLi4vdXRpbHMvbWVtb2l6ZSc7XHJcblxyXG4vKipcclxuICogRnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgc2VsZWN0b3JcclxuICogQHBhcmFtIHNlbGVjdG9ycyBUaGUgc2VsZWN0b3JzIHRvIHVzZSB0byBjcmVhdGUgdGhlIGFyZ3VtZW50cyBvZiB0aGlzIGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSBvcmlnaW5hbEZuIFRoZSBvcmlnaW5hbCBmdW5jdGlvbiBiZWluZyBtYWRlIGludG8gYSBzZWxlY3RvclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yKFxyXG4gIHNlbGVjdG9yczogYW55W10sXHJcbiAgb3JpZ2luYWxGbjogYW55LFxyXG4gIGNyZWF0aW9uTWV0YWRhdGE/OiB7IGNvbnRhaW5lckNsYXNzOiBhbnk7IHNlbGVjdG9yTmFtZTogc3RyaW5nIH1cclxuKSB7XHJcbiAgY29uc3Qgd3JhcHBlZEZuID0gZnVuY3Rpb24gd3JhcHBlZFNlbGVjdG9yRm4oLi4uYXJncykge1xyXG4gICAgY29uc3QgcmV0dXJuVmFsdWUgPSBvcmlnaW5hbEZuKC4uLmFyZ3MpO1xyXG4gICAgaWYgKHJldHVyblZhbHVlIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcclxuICAgICAgY29uc3QgaW5uZXJNZW1vaXplZEZuID0gbWVtb2l6ZS5hcHBseShudWxsLCBbcmV0dXJuVmFsdWVdKTtcclxuICAgICAgcmV0dXJuIGlubmVyTWVtb2l6ZWRGbjtcclxuICAgIH1cclxuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcclxuICB9O1xyXG4gIGNvbnN0IG1lbW9pemVkRm4gPSBtZW1vaXplKHdyYXBwZWRGbik7XHJcbiAgY29uc3QgY29udGFpbmVyQ2xhc3MgPSBjcmVhdGlvbk1ldGFkYXRhICYmIGNyZWF0aW9uTWV0YWRhdGEuY29udGFpbmVyQ2xhc3M7XHJcblxyXG4gIGNvbnN0IGZuID0gc3RhdGUgPT4ge1xyXG4gICAgY29uc3QgcmVzdWx0cyA9IFtdO1xyXG5cclxuICAgIGNvbnN0IHNlbGVjdG9yc1RvQXBwbHkgPSBbXTtcclxuXHJcbiAgICBpZiAoY29udGFpbmVyQ2xhc3MpIHtcclxuICAgICAgLy8gSWYgd2UgYXJlIG9uIGEgc3RhdGUgY2xhc3MsIGFkZCBpdCBhcyB0aGUgZmlyc3Qgc2VsZWN0b3IgcGFyYW1ldGVyXHJcbiAgICAgIGNvbnN0IG1ldGFkYXRhID0gZ2V0U3RvcmVNZXRhZGF0YShjb250YWluZXJDbGFzcyk7XHJcbiAgICAgIGlmIChtZXRhZGF0YSkge1xyXG4gICAgICAgIHNlbGVjdG9yc1RvQXBwbHkucHVzaChjb250YWluZXJDbGFzcyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChzZWxlY3RvcnMpIHtcclxuICAgICAgc2VsZWN0b3JzVG9BcHBseS5wdXNoKC4uLnNlbGVjdG9ycyk7XHJcbiAgICB9XHJcbiAgICAvLyBEZXRlcm1pbmUgYXJndW1lbnRzIGZyb20gdGhlIGFwcCBzdGF0ZSB1c2luZyB0aGUgc2VsZWN0b3JzXHJcbiAgICBpZiAoc2VsZWN0b3JzVG9BcHBseSkge1xyXG4gICAgICByZXN1bHRzLnB1c2goLi4uc2VsZWN0b3JzVG9BcHBseS5tYXAoYSA9PiBnZXRTZWxlY3RvckZuKGEpKHN0YXRlKSkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGlmIHRoZSBsYW1iZGEgdHJpZXMgdG8gYWNjZXNzIGEgc29tZXRoaW5nIG9uIHRoZVxyXG4gICAgLy8gc3RhdGUgdGhhdCBkb2Vzbid0IGV4aXN0LCBpdCB3aWxsIHRocm93IGEgVHlwZUVycm9yLlxyXG4gICAgLy8gc2luY2UgdGhpcyBpcyBxdWl0ZSB1c3VhbCBiZWhhdmlvdXIsIHdlIHNpbXBseSByZXR1cm4gdW5kZWZpbmVkIGlmIHNvLlxyXG4gICAgdHJ5IHtcclxuICAgICAgcmV0dXJuIG1lbW9pemVkRm4oLi4ucmVzdWx0cyk7XHJcbiAgICB9IGNhdGNoIChleCkge1xyXG4gICAgICBpZiAoZXggaW5zdGFuY2VvZiBUeXBlRXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICB9XHJcbiAgICAgIHRocm93IGV4O1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGNvbnN0IHNlbGVjdG9yTWV0YURhdGEgPSBlbnN1cmVTZWxlY3Rvck1ldGFkYXRhKG1lbW9pemVkRm4pO1xyXG4gIHNlbGVjdG9yTWV0YURhdGEub3JpZ2luYWxGbiA9IG9yaWdpbmFsRm47XHJcbiAgc2VsZWN0b3JNZXRhRGF0YS5zZWxlY3RGcm9tQXBwU3RhdGUgPSBmbjtcclxuICBpZiAoY3JlYXRpb25NZXRhZGF0YSkge1xyXG4gICAgc2VsZWN0b3JNZXRhRGF0YS5jb250YWluZXJDbGFzcyA9IGNyZWF0aW9uTWV0YWRhdGEuY29udGFpbmVyQ2xhc3M7XHJcbiAgICBzZWxlY3Rvck1ldGFEYXRhLnNlbGVjdG9yTmFtZSA9IGNyZWF0aW9uTWV0YWRhdGEuc2VsZWN0b3JOYW1lO1xyXG4gIH1cclxuICByZXR1cm4gbWVtb2l6ZWRGbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoaXMgZnVuY3Rpb24gZ2V0cyB0aGUgc2VsZWN0b3IgZnVuY3Rpb24gdG8gYmUgdXNlZCB0byBnZXQgdGhlIHNlbGVjdGVkIHNsaWNlIGZyb20gdGhlIGFwcCBzdGF0ZVxyXG4gKiBAaWdub3JlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VsZWN0b3JGbihzZWxlY3RvcjogYW55KTogU2VsZWN0RnJvbVN0YXRlIHtcclxuICBjb25zdCBtZXRhZGF0YSA9IGdldFNlbGVjdG9yTWV0YWRhdGEoc2VsZWN0b3IpIHx8IGdldFN0b3JlTWV0YWRhdGEoc2VsZWN0b3IpO1xyXG4gIHJldHVybiAobWV0YWRhdGEgJiYgbWV0YWRhdGEuc2VsZWN0RnJvbUFwcFN0YXRlKSB8fCBzZWxlY3RvcjtcclxufVxyXG4iXX0=