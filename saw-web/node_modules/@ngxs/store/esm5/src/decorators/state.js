/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ensureStoreMetadata } from '../internal/internals';
import { META_KEY } from '../symbols';
/** @type {?} */
var stateNameRegex = new RegExp('^[a-zA-Z0-9_]+$');
/**
 * Error message
 * @ignore
 * @type {?}
 */
export var stateNameErrorMessage = function (name) {
    return name + " is not a valid state name. It needs to be a valid object property name.";
};
/**
 * Decorates a class with ngxs state information.
 * @template T
 * @param {?} options
 * @return {?}
 */
export function State(options) {
    return function (target) {
        /** @type {?} */
        var meta = ensureStoreMetadata(target);
        // Handle inheritance
        if (Object.getPrototypeOf(target).hasOwnProperty(META_KEY)) {
            /** @type {?} */
            var parentMeta = Object.getPrototypeOf(target)[META_KEY];
            meta.actions = tslib_1.__assign({}, meta.actions, parentMeta.actions);
        }
        meta.children = options.children;
        meta.defaults = options.defaults;
        meta.name = options.name;
        if (!options.name) {
            throw new Error("States must register a 'name' property");
        }
        if (!stateNameRegex.test(options.name)) {
            throw new Error(stateNameErrorMessage(options.name));
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS8iLCJzb3VyY2VzIjpbInNyYy9kZWNvcmF0b3JzL3N0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUQsT0FBTyxFQUFnQixRQUFRLEVBQUUsTUFBTSxZQUFZLENBQUM7O0lBRTlDLGNBQWMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQzs7Ozs7O0FBTXBELE1BQU0sS0FBTyxxQkFBcUIsR0FBRyxVQUFBLElBQUk7SUFDdkMsT0FBRyxJQUFJLDZFQUEwRTtBQUFqRixDQUFpRjs7Ozs7OztBQUtuRixNQUFNLFVBQVUsS0FBSyxDQUFJLE9BQXdCO0lBQy9DLE9BQU8sVUFBUyxNQUFXOztZQUNuQixJQUFJLEdBQUcsbUJBQW1CLENBQUMsTUFBTSxDQUFDO1FBRXhDLHFCQUFxQjtRQUNyQixJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFOztnQkFDcEQsVUFBVSxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDO1lBRTFELElBQUksQ0FBQyxPQUFPLHdCQUNQLElBQUksQ0FBQyxPQUFPLEVBQ1osVUFBVSxDQUFDLE9BQU8sQ0FDdEIsQ0FBQztTQUNIO1FBRUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUNqQyxJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFFekIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUU7WUFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO1NBQzNEO1FBRUQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3RDLE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDdEQ7SUFDSCxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZW5zdXJlU3RvcmVNZXRhZGF0YSB9IGZyb20gJy4uL2ludGVybmFsL2ludGVybmFscyc7XHJcbmltcG9ydCB7IFN0b3JlT3B0aW9ucywgTUVUQV9LRVkgfSBmcm9tICcuLi9zeW1ib2xzJztcclxuXHJcbmNvbnN0IHN0YXRlTmFtZVJlZ2V4ID0gbmV3IFJlZ0V4cCgnXlthLXpBLVowLTlfXSskJyk7XHJcblxyXG4vKipcclxuICogRXJyb3IgbWVzc2FnZVxyXG4gKiBAaWdub3JlXHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgc3RhdGVOYW1lRXJyb3JNZXNzYWdlID0gbmFtZSA9PlxyXG4gIGAke25hbWV9IGlzIG5vdCBhIHZhbGlkIHN0YXRlIG5hbWUuIEl0IG5lZWRzIHRvIGJlIGEgdmFsaWQgb2JqZWN0IHByb3BlcnR5IG5hbWUuYDtcclxuXHJcbi8qKlxyXG4gKiBEZWNvcmF0ZXMgYSBjbGFzcyB3aXRoIG5neHMgc3RhdGUgaW5mb3JtYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gU3RhdGU8VD4ob3B0aW9uczogU3RvcmVPcHRpb25zPFQ+KSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKHRhcmdldDogYW55KSB7XHJcbiAgICBjb25zdCBtZXRhID0gZW5zdXJlU3RvcmVNZXRhZGF0YSh0YXJnZXQpO1xyXG5cclxuICAgIC8vIEhhbmRsZSBpbmhlcml0YW5jZVxyXG4gICAgaWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpLmhhc093blByb3BlcnR5KE1FVEFfS0VZKSkge1xyXG4gICAgICBjb25zdCBwYXJlbnRNZXRhID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldClbTUVUQV9LRVldO1xyXG5cclxuICAgICAgbWV0YS5hY3Rpb25zID0ge1xyXG4gICAgICAgIC4uLm1ldGEuYWN0aW9ucyxcclxuICAgICAgICAuLi5wYXJlbnRNZXRhLmFjdGlvbnNcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBtZXRhLmNoaWxkcmVuID0gb3B0aW9ucy5jaGlsZHJlbjtcclxuICAgIG1ldGEuZGVmYXVsdHMgPSBvcHRpb25zLmRlZmF1bHRzO1xyXG4gICAgbWV0YS5uYW1lID0gb3B0aW9ucy5uYW1lO1xyXG5cclxuICAgIGlmICghb3B0aW9ucy5uYW1lKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgU3RhdGVzIG11c3QgcmVnaXN0ZXIgYSAnbmFtZScgcHJvcGVydHlgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXN0YXRlTmFtZVJlZ2V4LnRlc3Qob3B0aW9ucy5uYW1lKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3Ioc3RhdGVOYW1lRXJyb3JNZXNzYWdlKG9wdGlvbnMubmFtZSkpO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuIl19