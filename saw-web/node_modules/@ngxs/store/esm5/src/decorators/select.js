/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Store } from '../store';
import { propGetter } from '../internal/internals';
import { META_KEY, NgxsConfig } from '../symbols';
/**
 * Allows the select decorator to get access to the DI store.
 * @ignore
 */
var SelectFactory = /** @class */ (function () {
    function SelectFactory(store, config) {
        SelectFactory.store = store;
        SelectFactory.config = config;
    }
    SelectFactory.store = undefined;
    SelectFactory.config = undefined;
    SelectFactory.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SelectFactory.ctorParameters = function () { return [
        { type: Store },
        { type: NgxsConfig }
    ]; };
    return SelectFactory;
}());
export { SelectFactory };
if (false) {
    /** @type {?} */
    SelectFactory.store;
    /** @type {?} */
    SelectFactory.config;
}
/**
 * Decorator for selecting a slice of state from the store.
 * @param {?=} selectorOrFeature
 * @param {...?} paths
 * @return {?}
 */
export function Select(selectorOrFeature) {
    var paths = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        paths[_i - 1] = arguments[_i];
    }
    return function (target, name) {
        /** @type {?} */
        var selectorFnName = '__' + name + '__selector';
        if (!selectorOrFeature) {
            // if foo$ => make it just foo
            selectorOrFeature = name.lastIndexOf('$') === name.length - 1 ? name.substring(0, name.length - 1) : name;
        }
        /** @type {?} */
        var createSelect = function (fn) {
            /** @type {?} */
            var store = SelectFactory.store;
            if (!store) {
                throw new Error('SelectFactory not connected to store!');
            }
            return store.select(fn);
        };
        /** @type {?} */
        var createSelector = function () {
            /** @type {?} */
            var config = SelectFactory.config;
            if (typeof selectorOrFeature === 'string') {
                /** @type {?} */
                var propsArray = paths.length ? tslib_1.__spread([selectorOrFeature], paths) : selectorOrFeature.split('.');
                return propGetter(propsArray, config);
            }
            else if (selectorOrFeature[META_KEY] && selectorOrFeature[META_KEY].path) {
                return propGetter(selectorOrFeature[META_KEY].path.split('.'), config);
            }
            else {
                return selectorOrFeature;
            }
        };
        if (target[selectorFnName]) {
            throw new Error('You cannot use @Select decorator and a ' + selectorFnName + ' property.');
        }
        if (delete target[name]) {
            Object.defineProperty(target, selectorFnName, {
                writable: true,
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(target, name, {
                get: function () {
                    return this[selectorFnName] || (this[selectorFnName] = createSelect.apply(this, [createSelector()]));
                },
                enumerable: true,
                configurable: true
            });
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMvc3RvcmUvIiwic291cmNlcyI6WyJzcmMvZGVjb3JhdG9ycy9zZWxlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDakMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ25ELE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLE1BQU0sWUFBWSxDQUFDOzs7OztBQU1sRDtJQUlFLHVCQUFZLEtBQVksRUFBRSxNQUFrQjtRQUMxQyxhQUFhLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUM1QixhQUFhLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUNoQyxDQUFDO0lBTE0sbUJBQUssR0FBc0IsU0FBUyxDQUFDO0lBQ3JDLG9CQUFNLEdBQTJCLFNBQVMsQ0FBQzs7Z0JBSG5ELFVBQVU7Ozs7Z0JBUkYsS0FBSztnQkFFSyxVQUFVOztJQWM3QixvQkFBQztDQUFBLEFBUkQsSUFRQztTQVBZLGFBQWE7OztJQUN4QixvQkFBNEM7O0lBQzVDLHFCQUFrRDs7Ozs7Ozs7QUFVcEQsTUFBTSxVQUFVLE1BQU0sQ0FBQyxpQkFBa0I7SUFBRSxlQUFrQjtTQUFsQixVQUFrQixFQUFsQixxQkFBa0IsRUFBbEIsSUFBa0I7UUFBbEIsOEJBQWtCOztJQUMzRCxPQUFPLFVBQVMsTUFBVyxFQUFFLElBQVk7O1lBQ2pDLGNBQWMsR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLFlBQVk7UUFFakQsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ3RCLDhCQUE4QjtZQUM5QixpQkFBaUIsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7U0FDM0c7O1lBRUssWUFBWSxHQUFHLFVBQUEsRUFBRTs7Z0JBQ2YsS0FBSyxHQUFHLGFBQWEsQ0FBQyxLQUFLO1lBRWpDLElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO2FBQzFEO1lBRUQsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzFCLENBQUM7O1lBRUssY0FBYyxHQUFHOztnQkFDZixNQUFNLEdBQUcsYUFBYSxDQUFDLE1BQU07WUFDbkMsSUFBSSxPQUFPLGlCQUFpQixLQUFLLFFBQVEsRUFBRTs7b0JBQ25DLFVBQVUsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsbUJBQUUsaUJBQWlCLEdBQUssS0FBSyxFQUFFLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO2dCQUU5RixPQUFPLFVBQVUsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDdkM7aUJBQU0sSUFBSSxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLEVBQUU7Z0JBQzFFLE9BQU8sVUFBVSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDeEU7aUJBQU07Z0JBQ0wsT0FBTyxpQkFBaUIsQ0FBQzthQUMxQjtRQUNILENBQUM7UUFFRCxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxHQUFHLGNBQWMsR0FBRyxZQUFZLENBQUMsQ0FBQztTQUM1RjtRQUVELElBQUksT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdkIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsY0FBYyxFQUFFO2dCQUM1QyxRQUFRLEVBQUUsSUFBSTtnQkFDZCxVQUFVLEVBQUUsS0FBSztnQkFDakIsWUFBWSxFQUFFLElBQUk7YUFDbkIsQ0FBQyxDQUFDO1lBRUgsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFO2dCQUNsQyxHQUFHLEVBQUU7b0JBQ0gsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdkcsQ0FBQztnQkFDRCxVQUFVLEVBQUUsSUFBSTtnQkFDaEIsWUFBWSxFQUFFLElBQUk7YUFDbkIsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgU3RvcmUgfSBmcm9tICcuLi9zdG9yZSc7XHJcbmltcG9ydCB7IHByb3BHZXR0ZXIgfSBmcm9tICcuLi9pbnRlcm5hbC9pbnRlcm5hbHMnO1xyXG5pbXBvcnQgeyBNRVRBX0tFWSwgTmd4c0NvbmZpZyB9IGZyb20gJy4uL3N5bWJvbHMnO1xyXG5cclxuLyoqXHJcbiAqIEFsbG93cyB0aGUgc2VsZWN0IGRlY29yYXRvciB0byBnZXQgYWNjZXNzIHRvIHRoZSBESSBzdG9yZS5cclxuICogQGlnbm9yZVxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgU2VsZWN0RmFjdG9yeSB7XHJcbiAgc3RhdGljIHN0b3JlOiBTdG9yZSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcclxuICBzdGF0aWMgY29uZmlnOiBOZ3hzQ29uZmlnIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG4gIGNvbnN0cnVjdG9yKHN0b3JlOiBTdG9yZSwgY29uZmlnOiBOZ3hzQ29uZmlnKSB7XHJcbiAgICBTZWxlY3RGYWN0b3J5LnN0b3JlID0gc3RvcmU7XHJcbiAgICBTZWxlY3RGYWN0b3J5LmNvbmZpZyA9IGNvbmZpZztcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZWNvcmF0b3IgZm9yIHNlbGVjdGluZyBhIHNsaWNlIG9mIHN0YXRlIGZyb20gdGhlIHN0b3JlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIFNlbGVjdChzZWxlY3Rvck9yRmVhdHVyZT8sIC4uLnBhdGhzOiBzdHJpbmdbXSkge1xyXG4gIHJldHVybiBmdW5jdGlvbih0YXJnZXQ6IGFueSwgbmFtZTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBzZWxlY3RvckZuTmFtZSA9ICdfXycgKyBuYW1lICsgJ19fc2VsZWN0b3InO1xyXG5cclxuICAgIGlmICghc2VsZWN0b3JPckZlYXR1cmUpIHtcclxuICAgICAgLy8gaWYgZm9vJCA9PiBtYWtlIGl0IGp1c3QgZm9vXHJcbiAgICAgIHNlbGVjdG9yT3JGZWF0dXJlID0gbmFtZS5sYXN0SW5kZXhPZignJCcpID09PSBuYW1lLmxlbmd0aCAtIDEgPyBuYW1lLnN1YnN0cmluZygwLCBuYW1lLmxlbmd0aCAtIDEpIDogbmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjcmVhdGVTZWxlY3QgPSBmbiA9PiB7XHJcbiAgICAgIGNvbnN0IHN0b3JlID0gU2VsZWN0RmFjdG9yeS5zdG9yZTtcclxuXHJcbiAgICAgIGlmICghc3RvcmUpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlbGVjdEZhY3Rvcnkgbm90IGNvbm5lY3RlZCB0byBzdG9yZSEnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHN0b3JlLnNlbGVjdChmbik7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGNyZWF0ZVNlbGVjdG9yID0gKCkgPT4ge1xyXG4gICAgICBjb25zdCBjb25maWcgPSBTZWxlY3RGYWN0b3J5LmNvbmZpZztcclxuICAgICAgaWYgKHR5cGVvZiBzZWxlY3Rvck9yRmVhdHVyZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICBjb25zdCBwcm9wc0FycmF5ID0gcGF0aHMubGVuZ3RoID8gW3NlbGVjdG9yT3JGZWF0dXJlLCAuLi5wYXRoc10gOiBzZWxlY3Rvck9yRmVhdHVyZS5zcGxpdCgnLicpO1xyXG5cclxuICAgICAgICByZXR1cm4gcHJvcEdldHRlcihwcm9wc0FycmF5LCBjb25maWcpO1xyXG4gICAgICB9IGVsc2UgaWYgKHNlbGVjdG9yT3JGZWF0dXJlW01FVEFfS0VZXSAmJiBzZWxlY3Rvck9yRmVhdHVyZVtNRVRBX0tFWV0ucGF0aCkge1xyXG4gICAgICAgIHJldHVybiBwcm9wR2V0dGVyKHNlbGVjdG9yT3JGZWF0dXJlW01FVEFfS0VZXS5wYXRoLnNwbGl0KCcuJyksIGNvbmZpZyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yT3JGZWF0dXJlO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGlmICh0YXJnZXRbc2VsZWN0b3JGbk5hbWVdKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IGNhbm5vdCB1c2UgQFNlbGVjdCBkZWNvcmF0b3IgYW5kIGEgJyArIHNlbGVjdG9yRm5OYW1lICsgJyBwcm9wZXJ0eS4nKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZGVsZXRlIHRhcmdldFtuYW1lXSkge1xyXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBzZWxlY3RvckZuTmFtZSwge1xyXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXNbc2VsZWN0b3JGbk5hbWVdIHx8ICh0aGlzW3NlbGVjdG9yRm5OYW1lXSA9IGNyZWF0ZVNlbGVjdC5hcHBseSh0aGlzLCBbY3JlYXRlU2VsZWN0b3IoKV0pKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuIl19