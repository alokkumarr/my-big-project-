/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { getActionTypeFromInstance } from '@ngxs/store';
import { NGXS_LOGGER_PLUGIN_OPTIONS } from './symbols';
import { pad } from './internals';
import { tap } from 'rxjs/operators';
export class NgxsLoggerPlugin {
    /**
     * @param {?} _options
     */
    constructor(_options) {
        this._options = _options;
    }
    /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    handle(state, event, next) {
        if (this._options.disabled) {
            return next(state, event);
        }
        /** @type {?} */
        const options = this._options || (/** @type {?} */ ({}));
        /** @type {?} */
        const logger = options.logger || console;
        /** @type {?} */
        const actionName = getActionTypeFromInstance(event);
        /** @type {?} */
        const time = new Date();
        // tslint:disable-next-line
        /** @type {?} */
        const formattedTime = ` @ ${pad(time.getHours(), 2)}:${pad(time.getMinutes(), 2)}:${pad(time.getSeconds(), 2)}.${pad(time.getMilliseconds(), 3)}`;
        /** @type {?} */
        const message = `action ${actionName}${formattedTime}`;
        /** @type {?} */
        const startMessage = options.collapsed ? logger.groupCollapsed : logger.group;
        try {
            startMessage.call(logger, message);
        }
        catch (e) {
            console.log(message);
        }
        if (typeof event.payload !== 'undefined') {
            this.log('payload', 'color: #9E9E9E; font-weight: bold', event.payload);
        }
        this.log('prev state', 'color: #9E9E9E; font-weight: bold', state);
        return next(state, event).pipe(tap(nextState => {
            this.log('next state', 'color: #4CAF50; font-weight: bold', nextState);
            try {
                logger.groupEnd();
            }
            catch (e) {
                logger.log('—— log end ——');
            }
        }));
    }
    /**
     * @param {?} title
     * @param {?} color
     * @param {?} payload
     * @return {?}
     */
    log(title, color, payload) {
        /** @type {?} */
        const options = this._options || (/** @type {?} */ ({}));
        /** @type {?} */
        const logger = options.logger || console;
        if (this.isIE()) {
            logger.log(title, payload);
        }
        else {
            logger.log('%c ' + title, color, payload);
        }
    }
    /**
     * @return {?}
     */
    isIE() {
        /** @type {?} */
        const ua = typeof window !== 'undefined' && window.navigator.userAgent ? window.navigator.userAgent : '';
        /** @type {?} */
        let ms_ie = false;
        /** @type {?} */
        const old_ie = ua.indexOf('MSIE ');
        /** @type {?} */
        const new_ie = ua.indexOf('Trident/');
        if (old_ie > -1 || new_ie > -1) {
            ms_ie = true;
        }
        return ms_ie;
    }
}
NgxsLoggerPlugin.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NgxsLoggerPlugin.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NGXS_LOGGER_PLUGIN_OPTIONS,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxsLoggerPlugin.prototype._options;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLnBsdWdpbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL2xvZ2dlci1wbHVnaW4vIiwic291cmNlcyI6WyJzcmMvbG9nZ2VyLnBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFjLHlCQUF5QixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXBFLE9BQU8sRUFBRSwwQkFBMEIsRUFBMkIsTUFBTSxXQUFXLENBQUM7QUFDaEYsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHckMsTUFBTSxPQUFPLGdCQUFnQjs7OztJQUMzQixZQUF3RCxRQUFpQztRQUFqQyxhQUFRLEdBQVIsUUFBUSxDQUF5QjtJQUFHLENBQUM7Ozs7Ozs7SUFFN0YsTUFBTSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSTtRQUN2QixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFO1lBQzFCLE9BQU8sSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztTQUMzQjs7Y0FFSyxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsSUFBSSxtQkFBSyxFQUFFLEVBQUE7O2NBQ2xDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxJQUFJLE9BQU87O2NBQ2xDLFVBQVUsR0FBRyx5QkFBeUIsQ0FBQyxLQUFLLENBQUM7O2NBQzdDLElBQUksR0FBRyxJQUFJLElBQUksRUFBRTs7O2NBR2pCLGFBQWEsR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxHQUFHLENBQ3JGLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFDakIsQ0FBQyxDQUNGLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRTs7Y0FFL0IsT0FBTyxHQUFHLFVBQVUsVUFBVSxHQUFHLGFBQWEsRUFBRTs7Y0FDaEQsWUFBWSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLO1FBRTdFLElBQUk7WUFDRixZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztTQUNwQztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN0QjtRQUVELElBQUksT0FBTyxLQUFLLENBQUMsT0FBTyxLQUFLLFdBQVcsRUFBRTtZQUN4QyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxtQ0FBbUMsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDekU7UUFFRCxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxtQ0FBbUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVuRSxPQUFPLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUM1QixHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDZCxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxtQ0FBbUMsRUFBRSxTQUFTLENBQUMsQ0FBQztZQUN2RSxJQUFJO2dCQUNGLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUNuQjtZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNWLE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7YUFDN0I7UUFDSCxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7Ozs7OztJQUVELEdBQUcsQ0FBQyxLQUFhLEVBQUUsS0FBYSxFQUFFLE9BQVk7O2NBQ3RDLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxJQUFJLG1CQUFLLEVBQUUsRUFBQTs7Y0FDbEMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTztRQUV4QyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNmLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQzVCO2FBQU07WUFDTCxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQzNDO0lBQ0gsQ0FBQzs7OztJQUVELElBQUk7O2NBQ0ksRUFBRSxHQUFHLE9BQU8sTUFBTSxLQUFLLFdBQVcsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7O1lBQ3BHLEtBQUssR0FBRyxLQUFLOztjQUVYLE1BQU0sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQzs7Y0FDNUIsTUFBTSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO1FBRXJDLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRTtZQUM5QixLQUFLLEdBQUcsSUFBSSxDQUFDO1NBQ2Q7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7OztZQXRFRixVQUFVOzs7OzRDQUVJLE1BQU0sU0FBQywwQkFBMEI7Ozs7Ozs7SUFBbEMsb0NBQTZFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5neHNQbHVnaW4sIGdldEFjdGlvblR5cGVGcm9tSW5zdGFuY2UgfSBmcm9tICdAbmd4cy9zdG9yZSc7XHJcblxyXG5pbXBvcnQgeyBOR1hTX0xPR0dFUl9QTFVHSU5fT1BUSU9OUywgTmd4c0xvZ2dlclBsdWdpbk9wdGlvbnMgfSBmcm9tICcuL3N5bWJvbHMnO1xyXG5pbXBvcnQgeyBwYWQgfSBmcm9tICcuL2ludGVybmFscyc7XHJcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE5neHNMb2dnZXJQbHVnaW4gaW1wbGVtZW50cyBOZ3hzUGx1Z2luIHtcclxuICBjb25zdHJ1Y3RvcihASW5qZWN0KE5HWFNfTE9HR0VSX1BMVUdJTl9PUFRJT05TKSBwcml2YXRlIF9vcHRpb25zOiBOZ3hzTG9nZ2VyUGx1Z2luT3B0aW9ucykge31cclxuXHJcbiAgaGFuZGxlKHN0YXRlLCBldmVudCwgbmV4dCkge1xyXG4gICAgaWYgKHRoaXMuX29wdGlvbnMuZGlzYWJsZWQpIHtcclxuICAgICAgcmV0dXJuIG5leHQoc3RhdGUsIGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5fb3B0aW9ucyB8fCA8YW55Pnt9O1xyXG4gICAgY29uc3QgbG9nZ2VyID0gb3B0aW9ucy5sb2dnZXIgfHwgY29uc29sZTtcclxuICAgIGNvbnN0IGFjdGlvbk5hbWUgPSBnZXRBY3Rpb25UeXBlRnJvbUluc3RhbmNlKGV2ZW50KTtcclxuICAgIGNvbnN0IHRpbWUgPSBuZXcgRGF0ZSgpO1xyXG5cclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxyXG4gICAgY29uc3QgZm9ybWF0dGVkVGltZSA9IGAgQCAke3BhZCh0aW1lLmdldEhvdXJzKCksIDIpfToke3BhZCh0aW1lLmdldE1pbnV0ZXMoKSwgMil9OiR7cGFkKFxyXG4gICAgICB0aW1lLmdldFNlY29uZHMoKSxcclxuICAgICAgMlxyXG4gICAgKX0uJHtwYWQodGltZS5nZXRNaWxsaXNlY29uZHMoKSwgMyl9YDtcclxuXHJcbiAgICBjb25zdCBtZXNzYWdlID0gYGFjdGlvbiAke2FjdGlvbk5hbWV9JHtmb3JtYXR0ZWRUaW1lfWA7XHJcbiAgICBjb25zdCBzdGFydE1lc3NhZ2UgPSBvcHRpb25zLmNvbGxhcHNlZCA/IGxvZ2dlci5ncm91cENvbGxhcHNlZCA6IGxvZ2dlci5ncm91cDtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBzdGFydE1lc3NhZ2UuY2FsbChsb2dnZXIsIG1lc3NhZ2UpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIGV2ZW50LnBheWxvYWQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHRoaXMubG9nKCdwYXlsb2FkJywgJ2NvbG9yOiAjOUU5RTlFOyBmb250LXdlaWdodDogYm9sZCcsIGV2ZW50LnBheWxvYWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMubG9nKCdwcmV2IHN0YXRlJywgJ2NvbG9yOiAjOUU5RTlFOyBmb250LXdlaWdodDogYm9sZCcsIHN0YXRlKTtcclxuXHJcbiAgICByZXR1cm4gbmV4dChzdGF0ZSwgZXZlbnQpLnBpcGUoXHJcbiAgICAgIHRhcChuZXh0U3RhdGUgPT4ge1xyXG4gICAgICAgIHRoaXMubG9nKCduZXh0IHN0YXRlJywgJ2NvbG9yOiAjNENBRjUwOyBmb250LXdlaWdodDogYm9sZCcsIG5leHRTdGF0ZSk7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGxvZ2dlci5ncm91cEVuZCgpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgIGxvZ2dlci5sb2coJ+KAlOKAlCBsb2cgZW5kIOKAlOKAlCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBsb2codGl0bGU6IHN0cmluZywgY29sb3I6IHN0cmluZywgcGF5bG9hZDogYW55KSB7XHJcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5fb3B0aW9ucyB8fCA8YW55Pnt9O1xyXG4gICAgY29uc3QgbG9nZ2VyID0gb3B0aW9ucy5sb2dnZXIgfHwgY29uc29sZTtcclxuXHJcbiAgICBpZiAodGhpcy5pc0lFKCkpIHtcclxuICAgICAgbG9nZ2VyLmxvZyh0aXRsZSwgcGF5bG9hZCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBsb2dnZXIubG9nKCclYyAnICsgdGl0bGUsIGNvbG9yLCBwYXlsb2FkKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlzSUUoKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCB1YSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50ID8gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQgOiAnJztcclxuICAgIGxldCBtc19pZSA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0IG9sZF9pZSA9IHVhLmluZGV4T2YoJ01TSUUgJyk7XHJcbiAgICBjb25zdCBuZXdfaWUgPSB1YS5pbmRleE9mKCdUcmlkZW50LycpO1xyXG5cclxuICAgIGlmIChvbGRfaWUgPiAtMSB8fCBuZXdfaWUgPiAtMSkge1xyXG4gICAgICBtc19pZSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG1zX2llO1xyXG4gIH1cclxufVxyXG4iXX0=