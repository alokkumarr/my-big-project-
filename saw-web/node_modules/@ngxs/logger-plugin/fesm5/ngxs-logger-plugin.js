import { InjectionToken, Injectable, Inject, NgModule } from '@angular/core';
import { getActionTypeFromInstance, NGXS_PLUGINS } from '@ngxs/store';
import { tap } from 'rxjs/operators';
import { __assign } from 'tslib';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var NGXS_LOGGER_PLUGIN_OPTIONS = new InjectionToken('NGXS_LOGGER_PLUGIN_OPTIONS');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var repeat = function (str, times) { return new Array(times + 1).join(str); };
/** @type {?} */
var pad = function (num, maxLength) { return repeat('0', maxLength - num.toString().length) + num; };

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxsLoggerPlugin = /** @class */ (function () {
    function NgxsLoggerPlugin(_options) {
        this._options = _options;
    }
    /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    NgxsLoggerPlugin.prototype.handle = /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    function (state, event, next) {
        var _this = this;
        if (this._options.disabled) {
            return next(state, event);
        }
        /** @type {?} */
        var options = this._options || (/** @type {?} */ ({}));
        /** @type {?} */
        var logger = options.logger || console;
        /** @type {?} */
        var actionName = getActionTypeFromInstance(event);
        /** @type {?} */
        var time = new Date();
        // tslint:disable-next-line
        /** @type {?} */
        var formattedTime = " @ " + pad(time.getHours(), 2) + ":" + pad(time.getMinutes(), 2) + ":" + pad(time.getSeconds(), 2) + "." + pad(time.getMilliseconds(), 3);
        /** @type {?} */
        var message = "action " + actionName + formattedTime;
        /** @type {?} */
        var startMessage = options.collapsed ? logger.groupCollapsed : logger.group;
        try {
            startMessage.call(logger, message);
        }
        catch (e) {
            console.log(message);
        }
        if (typeof event.payload !== 'undefined') {
            this.log('payload', 'color: #9E9E9E; font-weight: bold', event.payload);
        }
        this.log('prev state', 'color: #9E9E9E; font-weight: bold', state);
        return next(state, event).pipe(tap(function (nextState) {
            _this.log('next state', 'color: #4CAF50; font-weight: bold', nextState);
            try {
                logger.groupEnd();
            }
            catch (e) {
                logger.log('—— log end ——');
            }
        }));
    };
    /**
     * @param {?} title
     * @param {?} color
     * @param {?} payload
     * @return {?}
     */
    NgxsLoggerPlugin.prototype.log = /**
     * @param {?} title
     * @param {?} color
     * @param {?} payload
     * @return {?}
     */
    function (title, color, payload) {
        /** @type {?} */
        var options = this._options || (/** @type {?} */ ({}));
        /** @type {?} */
        var logger = options.logger || console;
        if (this.isIE()) {
            logger.log(title, payload);
        }
        else {
            logger.log('%c ' + title, color, payload);
        }
    };
    /**
     * @return {?}
     */
    NgxsLoggerPlugin.prototype.isIE = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var ua = typeof window !== 'undefined' && window.navigator.userAgent ? window.navigator.userAgent : '';
        /** @type {?} */
        var ms_ie = false;
        /** @type {?} */
        var old_ie = ua.indexOf('MSIE ');
        /** @type {?} */
        var new_ie = ua.indexOf('Trident/');
        if (old_ie > -1 || new_ie > -1) {
            ms_ie = true;
        }
        return ms_ie;
    };
    NgxsLoggerPlugin.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NgxsLoggerPlugin.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NGXS_LOGGER_PLUGIN_OPTIONS,] }] }
    ]; };
    return NgxsLoggerPlugin;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var USER_OPTIONS = new InjectionToken('LOGGER_USER_OPTIONS');
/**
 * @param {?} options
 * @return {?}
 */
function loggerOptionsFactory(options) {
    /** @type {?} */
    var defaultLoggerOptions = {
        logger: console,
        collapsed: false,
        disabled: false
    };
    return __assign({}, defaultLoggerOptions, options);
}
var NgxsLoggerPluginModule = /** @class */ (function () {
    function NgxsLoggerPluginModule() {
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    NgxsLoggerPluginModule.forRoot = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        return {
            ngModule: NgxsLoggerPluginModule,
            providers: [
                {
                    provide: NGXS_PLUGINS,
                    useClass: NgxsLoggerPlugin,
                    multi: true
                },
                {
                    provide: USER_OPTIONS,
                    useValue: options
                },
                {
                    provide: NGXS_LOGGER_PLUGIN_OPTIONS,
                    useFactory: loggerOptionsFactory,
                    deps: [USER_OPTIONS]
                }
            ]
        };
    };
    NgxsLoggerPluginModule.decorators = [
        { type: NgModule }
    ];
    return NgxsLoggerPluginModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxsLoggerPluginModule, NgxsLoggerPlugin, NGXS_LOGGER_PLUGIN_OPTIONS, USER_OPTIONS as ɵa, loggerOptionsFactory as ɵb };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4cy1sb2dnZXItcGx1Z2luLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9Abmd4cy9sb2dnZXItcGx1Z2luL3NyYy9zeW1ib2xzLnRzIiwibmc6Ly9Abmd4cy9sb2dnZXItcGx1Z2luL3NyYy9pbnRlcm5hbHMudHMiLCJuZzovL0BuZ3hzL2xvZ2dlci1wbHVnaW4vc3JjL2xvZ2dlci5wbHVnaW4udHMiLCJuZzovL0BuZ3hzL2xvZ2dlci1wbHVnaW4vc3JjL2xvZ2dlci5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTmd4c0xvZ2dlclBsdWdpbk9wdGlvbnMge1xyXG4gIC8qKiBBdXRvIGV4cGFuZCBsb2dnZWQgYWN0aW9ucyAgKi9cclxuICBjb2xsYXBzZWQ/OiBib29sZWFuO1xyXG5cclxuICAvKiogUHJvdmlkZSBhbHRlcm5hdGUgY29uc29sZS5sb2cgaW1wbGVtZW50YXRpb24gKi9cclxuICBsb2dnZXI/OiBhbnk7XHJcblxyXG4gIC8qKiBEaXNhYmxlIHRoZSBsb2dnZXIuIFVzZWZ1bCBmb3IgcHJvZCBtb2RlLiAqL1xyXG4gIGRpc2FibGVkPzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IE5HWFNfTE9HR0VSX1BMVUdJTl9PUFRJT05TID0gbmV3IEluamVjdGlvblRva2VuKCdOR1hTX0xPR0dFUl9QTFVHSU5fT1BUSU9OUycpO1xyXG4iLCJleHBvcnQgY29uc3QgcmVwZWF0ID0gKHN0ciwgdGltZXMpID0+IG5ldyBBcnJheSh0aW1lcyArIDEpLmpvaW4oc3RyKTtcclxuZXhwb3J0IGNvbnN0IHBhZCA9IChudW0sIG1heExlbmd0aCkgPT4gcmVwZWF0KCcwJywgbWF4TGVuZ3RoIC0gbnVtLnRvU3RyaW5nKCkubGVuZ3RoKSArIG51bTtcclxuIiwiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5neHNQbHVnaW4sIGdldEFjdGlvblR5cGVGcm9tSW5zdGFuY2UgfSBmcm9tICdAbmd4cy9zdG9yZSc7XHJcblxyXG5pbXBvcnQgeyBOR1hTX0xPR0dFUl9QTFVHSU5fT1BUSU9OUywgTmd4c0xvZ2dlclBsdWdpbk9wdGlvbnMgfSBmcm9tICcuL3N5bWJvbHMnO1xyXG5pbXBvcnQgeyBwYWQgfSBmcm9tICcuL2ludGVybmFscyc7XHJcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE5neHNMb2dnZXJQbHVnaW4gaW1wbGVtZW50cyBOZ3hzUGx1Z2luIHtcclxuICBjb25zdHJ1Y3RvcihASW5qZWN0KE5HWFNfTE9HR0VSX1BMVUdJTl9PUFRJT05TKSBwcml2YXRlIF9vcHRpb25zOiBOZ3hzTG9nZ2VyUGx1Z2luT3B0aW9ucykge31cclxuXHJcbiAgaGFuZGxlKHN0YXRlLCBldmVudCwgbmV4dCkge1xyXG4gICAgaWYgKHRoaXMuX29wdGlvbnMuZGlzYWJsZWQpIHtcclxuICAgICAgcmV0dXJuIG5leHQoc3RhdGUsIGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5fb3B0aW9ucyB8fCA8YW55Pnt9O1xyXG4gICAgY29uc3QgbG9nZ2VyID0gb3B0aW9ucy5sb2dnZXIgfHwgY29uc29sZTtcclxuICAgIGNvbnN0IGFjdGlvbk5hbWUgPSBnZXRBY3Rpb25UeXBlRnJvbUluc3RhbmNlKGV2ZW50KTtcclxuICAgIGNvbnN0IHRpbWUgPSBuZXcgRGF0ZSgpO1xyXG5cclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxyXG4gICAgY29uc3QgZm9ybWF0dGVkVGltZSA9IGAgQCAke3BhZCh0aW1lLmdldEhvdXJzKCksIDIpfToke3BhZCh0aW1lLmdldE1pbnV0ZXMoKSwgMil9OiR7cGFkKFxyXG4gICAgICB0aW1lLmdldFNlY29uZHMoKSxcclxuICAgICAgMlxyXG4gICAgKX0uJHtwYWQodGltZS5nZXRNaWxsaXNlY29uZHMoKSwgMyl9YDtcclxuXHJcbiAgICBjb25zdCBtZXNzYWdlID0gYGFjdGlvbiAke2FjdGlvbk5hbWV9JHtmb3JtYXR0ZWRUaW1lfWA7XHJcbiAgICBjb25zdCBzdGFydE1lc3NhZ2UgPSBvcHRpb25zLmNvbGxhcHNlZCA/IGxvZ2dlci5ncm91cENvbGxhcHNlZCA6IGxvZ2dlci5ncm91cDtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBzdGFydE1lc3NhZ2UuY2FsbChsb2dnZXIsIG1lc3NhZ2UpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIGV2ZW50LnBheWxvYWQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHRoaXMubG9nKCdwYXlsb2FkJywgJ2NvbG9yOiAjOUU5RTlFOyBmb250LXdlaWdodDogYm9sZCcsIGV2ZW50LnBheWxvYWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMubG9nKCdwcmV2IHN0YXRlJywgJ2NvbG9yOiAjOUU5RTlFOyBmb250LXdlaWdodDogYm9sZCcsIHN0YXRlKTtcclxuXHJcbiAgICByZXR1cm4gbmV4dChzdGF0ZSwgZXZlbnQpLnBpcGUoXHJcbiAgICAgIHRhcChuZXh0U3RhdGUgPT4ge1xyXG4gICAgICAgIHRoaXMubG9nKCduZXh0IHN0YXRlJywgJ2NvbG9yOiAjNENBRjUwOyBmb250LXdlaWdodDogYm9sZCcsIG5leHRTdGF0ZSk7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGxvZ2dlci5ncm91cEVuZCgpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgIGxvZ2dlci5sb2coJ8OiwoDClMOiwoDClCBsb2cgZW5kIMOiwoDClMOiwoDClCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBsb2codGl0bGU6IHN0cmluZywgY29sb3I6IHN0cmluZywgcGF5bG9hZDogYW55KSB7XHJcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5fb3B0aW9ucyB8fCA8YW55Pnt9O1xyXG4gICAgY29uc3QgbG9nZ2VyID0gb3B0aW9ucy5sb2dnZXIgfHwgY29uc29sZTtcclxuXHJcbiAgICBpZiAodGhpcy5pc0lFKCkpIHtcclxuICAgICAgbG9nZ2VyLmxvZyh0aXRsZSwgcGF5bG9hZCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBsb2dnZXIubG9nKCclYyAnICsgdGl0bGUsIGNvbG9yLCBwYXlsb2FkKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlzSUUoKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCB1YSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50ID8gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQgOiAnJztcclxuICAgIGxldCBtc19pZSA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0IG9sZF9pZSA9IHVhLmluZGV4T2YoJ01TSUUgJyk7XHJcbiAgICBjb25zdCBuZXdfaWUgPSB1YS5pbmRleE9mKCdUcmlkZW50LycpO1xyXG5cclxuICAgIGlmIChvbGRfaWUgPiAtMSB8fCBuZXdfaWUgPiAtMSkge1xyXG4gICAgICBtc19pZSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG1zX2llO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTkdYU19QTFVHSU5TIH0gZnJvbSAnQG5neHMvc3RvcmUnO1xyXG5pbXBvcnQgeyBOZ3hzTG9nZ2VyUGx1Z2luT3B0aW9ucywgTkdYU19MT0dHRVJfUExVR0lOX09QVElPTlMgfSBmcm9tICcuL3N5bWJvbHMnO1xyXG5pbXBvcnQgeyBOZ3hzTG9nZ2VyUGx1Z2luIH0gZnJvbSAnLi9sb2dnZXIucGx1Z2luJztcclxuXHJcbmV4cG9ydCBjb25zdCBVU0VSX09QVElPTlMgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ0xPR0dFUl9VU0VSX09QVElPTlMnKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2dnZXJPcHRpb25zRmFjdG9yeShvcHRpb25zOiBOZ3hzTG9nZ2VyUGx1Z2luT3B0aW9ucykge1xyXG4gIGNvbnN0IGRlZmF1bHRMb2dnZXJPcHRpb25zOiBOZ3hzTG9nZ2VyUGx1Z2luT3B0aW9ucyA9IHtcclxuICAgIGxvZ2dlcjogY29uc29sZSxcclxuICAgIGNvbGxhcHNlZDogZmFsc2UsXHJcbiAgICBkaXNhYmxlZDogZmFsc2VcclxuICB9O1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgLi4uZGVmYXVsdExvZ2dlck9wdGlvbnMsXHJcbiAgICAuLi5vcHRpb25zXHJcbiAgfTtcclxufVxyXG5cclxuQE5nTW9kdWxlKClcclxuZXhwb3J0IGNsYXNzIE5neHNMb2dnZXJQbHVnaW5Nb2R1bGUge1xyXG4gIHN0YXRpYyBmb3JSb290KG9wdGlvbnM/OiBOZ3hzTG9nZ2VyUGx1Z2luT3B0aW9ucyk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmdNb2R1bGU6IE5neHNMb2dnZXJQbHVnaW5Nb2R1bGUsXHJcbiAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6IE5HWFNfUExVR0lOUyxcclxuICAgICAgICAgIHVzZUNsYXNzOiBOZ3hzTG9nZ2VyUGx1Z2luLFxyXG4gICAgICAgICAgbXVsdGk6IHRydWVcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6IFVTRVJfT1BUSU9OUyxcclxuICAgICAgICAgIHVzZVZhbHVlOiBvcHRpb25zXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwcm92aWRlOiBOR1hTX0xPR0dFUl9QTFVHSU5fT1BUSU9OUyxcclxuICAgICAgICAgIHVzZUZhY3Rvcnk6IGxvZ2dlck9wdGlvbnNGYWN0b3J5LFxyXG4gICAgICAgICAgZGVwczogW1VTRVJfT1BUSU9OU11cclxuICAgICAgICB9XHJcbiAgICAgIF1cclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQWFBLElBQWEsMEJBQTBCLEdBQUcsSUFBSSxjQUFjLENBQUMsNEJBQTRCLENBQUM7Ozs7Ozs7QUNiMUYsSUFBYSxNQUFNLEdBQUcsVUFBQyxHQUFHLEVBQUUsS0FBSyxJQUFLLE9BQUEsSUFBSSxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBQTs7QUFDcEUsSUFBYSxHQUFHLEdBQUcsVUFBQyxHQUFHLEVBQUUsU0FBUyxJQUFLLE9BQUEsTUFBTSxDQUFDLEdBQUcsRUFBRSxTQUFTLEdBQUcsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBQTs7Ozs7O0FDRDNGO0lBU0UsMEJBQXdELFFBQWlDO1FBQWpDLGFBQVEsR0FBUixRQUFRLENBQXlCO0tBQUk7Ozs7Ozs7SUFFN0YsaUNBQU07Ozs7OztJQUFOLFVBQU8sS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJO1FBQXpCLGlCQXlDQztRQXhDQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFO1lBQzFCLE9BQU8sSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztTQUMzQjs7WUFFSyxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsdUJBQVMsRUFBRSxFQUFBOztZQUNsQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPOztZQUNsQyxVQUFVLEdBQUcseUJBQXlCLENBQUMsS0FBSyxDQUFDOztZQUM3QyxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7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