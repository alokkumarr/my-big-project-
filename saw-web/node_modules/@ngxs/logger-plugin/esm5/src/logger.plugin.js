/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { getActionTypeFromInstance } from '@ngxs/store';
import { NGXS_LOGGER_PLUGIN_OPTIONS } from './symbols';
import { pad } from './internals';
import { tap } from 'rxjs/operators';
var NgxsLoggerPlugin = /** @class */ (function () {
    function NgxsLoggerPlugin(_options) {
        this._options = _options;
    }
    /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    NgxsLoggerPlugin.prototype.handle = /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    function (state, event, next) {
        var _this = this;
        if (this._options.disabled) {
            return next(state, event);
        }
        /** @type {?} */
        var options = this._options || (/** @type {?} */ ({}));
        /** @type {?} */
        var logger = options.logger || console;
        /** @type {?} */
        var actionName = getActionTypeFromInstance(event);
        /** @type {?} */
        var time = new Date();
        // tslint:disable-next-line
        /** @type {?} */
        var formattedTime = " @ " + pad(time.getHours(), 2) + ":" + pad(time.getMinutes(), 2) + ":" + pad(time.getSeconds(), 2) + "." + pad(time.getMilliseconds(), 3);
        /** @type {?} */
        var message = "action " + actionName + formattedTime;
        /** @type {?} */
        var startMessage = options.collapsed ? logger.groupCollapsed : logger.group;
        try {
            startMessage.call(logger, message);
        }
        catch (e) {
            console.log(message);
        }
        if (typeof event.payload !== 'undefined') {
            this.log('payload', 'color: #9E9E9E; font-weight: bold', event.payload);
        }
        this.log('prev state', 'color: #9E9E9E; font-weight: bold', state);
        return next(state, event).pipe(tap(function (nextState) {
            _this.log('next state', 'color: #4CAF50; font-weight: bold', nextState);
            try {
                logger.groupEnd();
            }
            catch (e) {
                logger.log('—— log end ——');
            }
        }));
    };
    /**
     * @param {?} title
     * @param {?} color
     * @param {?} payload
     * @return {?}
     */
    NgxsLoggerPlugin.prototype.log = /**
     * @param {?} title
     * @param {?} color
     * @param {?} payload
     * @return {?}
     */
    function (title, color, payload) {
        /** @type {?} */
        var options = this._options || (/** @type {?} */ ({}));
        /** @type {?} */
        var logger = options.logger || console;
        if (this.isIE()) {
            logger.log(title, payload);
        }
        else {
            logger.log('%c ' + title, color, payload);
        }
    };
    /**
     * @return {?}
     */
    NgxsLoggerPlugin.prototype.isIE = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var ua = typeof window !== 'undefined' && window.navigator.userAgent ? window.navigator.userAgent : '';
        /** @type {?} */
        var ms_ie = false;
        /** @type {?} */
        var old_ie = ua.indexOf('MSIE ');
        /** @type {?} */
        var new_ie = ua.indexOf('Trident/');
        if (old_ie > -1 || new_ie > -1) {
            ms_ie = true;
        }
        return ms_ie;
    };
    NgxsLoggerPlugin.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NgxsLoggerPlugin.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NGXS_LOGGER_PLUGIN_OPTIONS,] }] }
    ]; };
    return NgxsLoggerPlugin;
}());
export { NgxsLoggerPlugin };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxsLoggerPlugin.prototype._options;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLnBsdWdpbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL2xvZ2dlci1wbHVnaW4vIiwic291cmNlcyI6WyJzcmMvbG9nZ2VyLnBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFjLHlCQUF5QixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXBFLE9BQU8sRUFBRSwwQkFBMEIsRUFBMkIsTUFBTSxXQUFXLENBQUM7QUFDaEYsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckM7SUFFRSwwQkFBd0QsUUFBaUM7UUFBakMsYUFBUSxHQUFSLFFBQVEsQ0FBeUI7SUFBRyxDQUFDOzs7Ozs7O0lBRTdGLGlDQUFNOzs7Ozs7SUFBTixVQUFPLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSTtRQUF6QixpQkF5Q0M7UUF4Q0MsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRTtZQUMxQixPQUFPLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDM0I7O1lBRUssT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLElBQUksbUJBQUssRUFBRSxFQUFBOztZQUNsQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPOztZQUNsQyxVQUFVLEdBQUcseUJBQXlCLENBQUMsS0FBSyxDQUFDOztZQUM3QyxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7OztZQUdqQixhQUFhLEdBQUcsUUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQUksR0FBRyxDQUNyRixJQUFJLENBQUMsVUFBVSxFQUFFLEVBQ2pCLENBQUMsQ0FDRixTQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQyxDQUFHOztZQUUvQixPQUFPLEdBQUcsWUFBVSxVQUFVLEdBQUcsYUFBZTs7WUFDaEQsWUFBWSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLO1FBRTdFLElBQUk7WUFDRixZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztTQUNwQztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN0QjtRQUVELElBQUksT0FBTyxLQUFLLENBQUMsT0FBTyxLQUFLLFdBQVcsRUFBRTtZQUN4QyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxtQ0FBbUMsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDekU7UUFFRCxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxtQ0FBbUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVuRSxPQUFPLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUM1QixHQUFHLENBQUMsVUFBQSxTQUFTO1lBQ1gsS0FBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsbUNBQW1DLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDdkUsSUFBSTtnQkFDRixNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDbkI7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO2FBQzdCO1FBQ0gsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7Ozs7Ozs7SUFFRCw4QkFBRzs7Ozs7O0lBQUgsVUFBSSxLQUFhLEVBQUUsS0FBYSxFQUFFLE9BQVk7O1lBQ3RDLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxJQUFJLG1CQUFLLEVBQUUsRUFBQTs7WUFDbEMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTztRQUV4QyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNmLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQzVCO2FBQU07WUFDTCxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQzNDO0lBQ0gsQ0FBQzs7OztJQUVELCtCQUFJOzs7SUFBSjs7WUFDUSxFQUFFLEdBQUcsT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTs7WUFDcEcsS0FBSyxHQUFHLEtBQUs7O1lBRVgsTUFBTSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDOztZQUM1QixNQUFNLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFFckMsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQzlCLEtBQUssR0FBRyxJQUFJLENBQUM7U0FDZDtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7Z0JBdEVGLFVBQVU7Ozs7Z0RBRUksTUFBTSxTQUFDLDBCQUEwQjs7SUFxRWhELHVCQUFDO0NBQUEsQUF2RUQsSUF1RUM7U0F0RVksZ0JBQWdCOzs7Ozs7SUFDZixvQ0FBNkUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTmd4c1BsdWdpbiwgZ2V0QWN0aW9uVHlwZUZyb21JbnN0YW5jZSB9IGZyb20gJ0BuZ3hzL3N0b3JlJztcclxuXHJcbmltcG9ydCB7IE5HWFNfTE9HR0VSX1BMVUdJTl9PUFRJT05TLCBOZ3hzTG9nZ2VyUGx1Z2luT3B0aW9ucyB9IGZyb20gJy4vc3ltYm9scyc7XHJcbmltcG9ydCB7IHBhZCB9IGZyb20gJy4vaW50ZXJuYWxzJztcclxuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTmd4c0xvZ2dlclBsdWdpbiBpbXBsZW1lbnRzIE5neHNQbHVnaW4ge1xyXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoTkdYU19MT0dHRVJfUExVR0lOX09QVElPTlMpIHByaXZhdGUgX29wdGlvbnM6IE5neHNMb2dnZXJQbHVnaW5PcHRpb25zKSB7fVxyXG5cclxuICBoYW5kbGUoc3RhdGUsIGV2ZW50LCBuZXh0KSB7XHJcbiAgICBpZiAodGhpcy5fb3B0aW9ucy5kaXNhYmxlZCkge1xyXG4gICAgICByZXR1cm4gbmV4dChzdGF0ZSwgZXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9vcHRpb25zIHx8IDxhbnk+e307XHJcbiAgICBjb25zdCBsb2dnZXIgPSBvcHRpb25zLmxvZ2dlciB8fCBjb25zb2xlO1xyXG4gICAgY29uc3QgYWN0aW9uTmFtZSA9IGdldEFjdGlvblR5cGVGcm9tSW5zdGFuY2UoZXZlbnQpO1xyXG4gICAgY29uc3QgdGltZSA9IG5ldyBEYXRlKCk7XHJcblxyXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICBjb25zdCBmb3JtYXR0ZWRUaW1lID0gYCBAICR7cGFkKHRpbWUuZ2V0SG91cnMoKSwgMil9OiR7cGFkKHRpbWUuZ2V0TWludXRlcygpLCAyKX06JHtwYWQoXHJcbiAgICAgIHRpbWUuZ2V0U2Vjb25kcygpLFxyXG4gICAgICAyXHJcbiAgICApfS4ke3BhZCh0aW1lLmdldE1pbGxpc2Vjb25kcygpLCAzKX1gO1xyXG5cclxuICAgIGNvbnN0IG1lc3NhZ2UgPSBgYWN0aW9uICR7YWN0aW9uTmFtZX0ke2Zvcm1hdHRlZFRpbWV9YDtcclxuICAgIGNvbnN0IHN0YXJ0TWVzc2FnZSA9IG9wdGlvbnMuY29sbGFwc2VkID8gbG9nZ2VyLmdyb3VwQ29sbGFwc2VkIDogbG9nZ2VyLmdyb3VwO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIHN0YXJ0TWVzc2FnZS5jYWxsKGxvZ2dlciwgbWVzc2FnZSk7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgZXZlbnQucGF5bG9hZCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgdGhpcy5sb2coJ3BheWxvYWQnLCAnY29sb3I6ICM5RTlFOUU7IGZvbnQtd2VpZ2h0OiBib2xkJywgZXZlbnQucGF5bG9hZCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5sb2coJ3ByZXYgc3RhdGUnLCAnY29sb3I6ICM5RTlFOUU7IGZvbnQtd2VpZ2h0OiBib2xkJywgc3RhdGUpO1xyXG5cclxuICAgIHJldHVybiBuZXh0KHN0YXRlLCBldmVudCkucGlwZShcclxuICAgICAgdGFwKG5leHRTdGF0ZSA9PiB7XHJcbiAgICAgICAgdGhpcy5sb2coJ25leHQgc3RhdGUnLCAnY29sb3I6ICM0Q0FGNTA7IGZvbnQtd2VpZ2h0OiBib2xkJywgbmV4dFN0YXRlKTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgbG9nZ2VyLmdyb3VwRW5kKCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgbG9nZ2VyLmxvZygn4oCU4oCUIGxvZyBlbmQg4oCU4oCUJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGxvZyh0aXRsZTogc3RyaW5nLCBjb2xvcjogc3RyaW5nLCBwYXlsb2FkOiBhbnkpIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9vcHRpb25zIHx8IDxhbnk+e307XHJcbiAgICBjb25zdCBsb2dnZXIgPSBvcHRpb25zLmxvZ2dlciB8fCBjb25zb2xlO1xyXG5cclxuICAgIGlmICh0aGlzLmlzSUUoKSkge1xyXG4gICAgICBsb2dnZXIubG9nKHRpdGxlLCBwYXlsb2FkKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxvZ2dlci5sb2coJyVjICcgKyB0aXRsZSwgY29sb3IsIHBheWxvYWQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaXNJRSgpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IHVhID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQgPyB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCA6ICcnO1xyXG4gICAgbGV0IG1zX2llID0gZmFsc2U7XHJcblxyXG4gICAgY29uc3Qgb2xkX2llID0gdWEuaW5kZXhPZignTVNJRSAnKTtcclxuICAgIGNvbnN0IG5ld19pZSA9IHVhLmluZGV4T2YoJ1RyaWRlbnQvJyk7XHJcblxyXG4gICAgaWYgKG9sZF9pZSA+IC0xIHx8IG5ld19pZSA+IC0xKSB7XHJcbiAgICAgIG1zX2llID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbXNfaWU7XHJcbiAgfVxyXG59XHJcbiJdfQ==