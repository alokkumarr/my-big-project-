import { InjectionToken, Injectable, Inject, NgModule } from '@angular/core';
import { getActionTypeFromInstance, NGXS_PLUGINS } from '@ngxs/store';
import { tap } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const NGXS_LOGGER_PLUGIN_OPTIONS = new InjectionToken('NGXS_LOGGER_PLUGIN_OPTIONS');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const repeat = (str, times) => new Array(times + 1).join(str);
/** @type {?} */
const pad = (num, maxLength) => repeat('0', maxLength - num.toString().length) + num;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxsLoggerPlugin {
    /**
     * @param {?} _options
     */
    constructor(_options) {
        this._options = _options;
    }
    /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    handle(state, event, next) {
        if (this._options.disabled) {
            return next(state, event);
        }
        /** @type {?} */
        const options = this._options || (/** @type {?} */ ({}));
        /** @type {?} */
        const logger = options.logger || console;
        /** @type {?} */
        const actionName = getActionTypeFromInstance(event);
        /** @type {?} */
        const time = new Date();
        // tslint:disable-next-line
        /** @type {?} */
        const formattedTime = ` @ ${pad(time.getHours(), 2)}:${pad(time.getMinutes(), 2)}:${pad(time.getSeconds(), 2)}.${pad(time.getMilliseconds(), 3)}`;
        /** @type {?} */
        const message = `action ${actionName}${formattedTime}`;
        /** @type {?} */
        const startMessage = options.collapsed ? logger.groupCollapsed : logger.group;
        try {
            startMessage.call(logger, message);
        }
        catch (e) {
            console.log(message);
        }
        if (typeof event.payload !== 'undefined') {
            this.log('payload', 'color: #9E9E9E; font-weight: bold', event.payload);
        }
        this.log('prev state', 'color: #9E9E9E; font-weight: bold', state);
        return next(state, event).pipe(tap(nextState => {
            this.log('next state', 'color: #4CAF50; font-weight: bold', nextState);
            try {
                logger.groupEnd();
            }
            catch (e) {
                logger.log('—— log end ——');
            }
        }));
    }
    /**
     * @param {?} title
     * @param {?} color
     * @param {?} payload
     * @return {?}
     */
    log(title, color, payload) {
        /** @type {?} */
        const options = this._options || (/** @type {?} */ ({}));
        /** @type {?} */
        const logger = options.logger || console;
        if (this.isIE()) {
            logger.log(title, payload);
        }
        else {
            logger.log('%c ' + title, color, payload);
        }
    }
    /**
     * @return {?}
     */
    isIE() {
        /** @type {?} */
        const ua = typeof window !== 'undefined' && window.navigator.userAgent ? window.navigator.userAgent : '';
        /** @type {?} */
        let ms_ie = false;
        /** @type {?} */
        const old_ie = ua.indexOf('MSIE ');
        /** @type {?} */
        const new_ie = ua.indexOf('Trident/');
        if (old_ie > -1 || new_ie > -1) {
            ms_ie = true;
        }
        return ms_ie;
    }
}
NgxsLoggerPlugin.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NgxsLoggerPlugin.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NGXS_LOGGER_PLUGIN_OPTIONS,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const USER_OPTIONS = new InjectionToken('LOGGER_USER_OPTIONS');
/**
 * @param {?} options
 * @return {?}
 */
function loggerOptionsFactory(options) {
    /** @type {?} */
    const defaultLoggerOptions = {
        logger: console,
        collapsed: false,
        disabled: false
    };
    return Object.assign({}, defaultLoggerOptions, options);
}
class NgxsLoggerPluginModule {
    /**
     * @param {?=} options
     * @return {?}
     */
    static forRoot(options) {
        return {
            ngModule: NgxsLoggerPluginModule,
            providers: [
                {
                    provide: NGXS_PLUGINS,
                    useClass: NgxsLoggerPlugin,
                    multi: true
                },
                {
                    provide: USER_OPTIONS,
                    useValue: options
                },
                {
                    provide: NGXS_LOGGER_PLUGIN_OPTIONS,
                    useFactory: loggerOptionsFactory,
                    deps: [USER_OPTIONS]
                }
            ]
        };
    }
}
NgxsLoggerPluginModule.decorators = [
    { type: NgModule }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxsLoggerPluginModule, NgxsLoggerPlugin, NGXS_LOGGER_PLUGIN_OPTIONS, USER_OPTIONS as ɵa, loggerOptionsFactory as ɵb };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,