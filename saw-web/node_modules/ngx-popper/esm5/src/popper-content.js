/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, HostListener, Renderer2, ViewChild, ViewContainerRef, ViewEncapsulation, } from "@angular/core";
import Popper from 'popper.js';
import { Placements, Triggers } from './popper-model';
var PopperContent = /** @class */ (function () {
    function PopperContent(elemRef, renderer, viewRef, CDR) {
        this.elemRef = elemRef;
        this.renderer = renderer;
        this.viewRef = viewRef;
        this.CDR = CDR;
        this.popperOptions = (/** @type {?} */ ({
            disableAnimation: false,
            disableDefaultStyling: false,
            placement: Placements.Auto,
            boundariesElement: '',
            trigger: Triggers.HOVER,
            positionFixed: false,
            appendToBody: false,
            popperModifiers: {}
        }));
        this.isMouseOver = false;
        this.onHidden = new EventEmitter();
        this.displayType = "none";
        this.opacity = 0;
        this.ariaHidden = 'true';
        this.arrowColor = null;
        this.state = true;
    }
    /**
     * @return {?}
     */
    PopperContent.prototype.onMouseOver = /**
     * @return {?}
     */
    function () {
        this.isMouseOver = true;
    };
    /**
     * @return {?}
     */
    PopperContent.prototype.showOnLeave = /**
     * @return {?}
     */
    function () {
        this.isMouseOver = false;
        if (this.popperOptions.trigger !== Triggers.HOVER && !this.popperOptions.hideOnMouseLeave) {
            return;
        }
        this.hide();
    };
    /**
     * @return {?}
     */
    PopperContent.prototype.onDocumentResize = /**
     * @return {?}
     */
    function () {
        this.update();
    };
    /**
     * @return {?}
     */
    PopperContent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.clean();
        if (this.popperOptions.appendTo && this.elemRef && this.elemRef.nativeElement && this.elemRef.nativeElement.parentNode) {
            this.viewRef.detach();
            this.elemRef.nativeElement.parentNode.removeChild(this.elemRef.nativeElement);
        }
    };
    /**
     * @return {?}
     */
    PopperContent.prototype.clean = /**
     * @return {?}
     */
    function () {
        this.toggleVisibility(false);
        if (!this.popperInstance) {
            return;
        }
        ((/** @type {?} */ (this.popperInstance))).disableEventListeners();
        this.popperInstance.destroy();
    };
    /**
     * @return {?}
     */
    PopperContent.prototype.show = /**
     * @return {?}
     */
    function () {
        if (!this.referenceObject) {
            return;
        }
        /** @type {?} */
        var appendToParent = this.popperOptions.appendTo && document.querySelector(this.popperOptions.appendTo);
        if (appendToParent && this.elemRef.nativeElement.parentNode !== appendToParent) {
            this.elemRef.nativeElement.parentNode && this.elemRef.nativeElement.parentNode.removeChild(this.elemRef.nativeElement);
            appendToParent.appendChild(this.elemRef.nativeElement);
        }
        /** @type {?} */
        var popperOptions = (/** @type {?} */ ({
            placement: this.popperOptions.placement,
            positionFixed: this.popperOptions.positionFixed,
            modifiers: {
                arrow: {
                    element: this.popperViewRef.nativeElement.querySelector('.ngxp__arrow')
                }
            }
        }));
        if (this.onUpdate) {
            popperOptions.onUpdate = (/** @type {?} */ (this.onUpdate));
        }
        /** @type {?} */
        var boundariesElement = this.popperOptions.boundariesElement && document.querySelector(this.popperOptions.boundariesElement);
        if (popperOptions.modifiers && boundariesElement) {
            popperOptions.modifiers.preventOverflow = { boundariesElement: boundariesElement };
        }
        if (popperOptions.modifiers && this.popperOptions.preventOverflow !== undefined) {
            popperOptions.modifiers.preventOverflow = popperOptions.modifiers.preventOverflow || {};
            popperOptions.modifiers.preventOverflow.enabled = this.popperOptions.preventOverflow;
            if (!popperOptions.modifiers.preventOverflow.enabled) {
                popperOptions.modifiers.hide = { enabled: false };
            }
        }
        this.determineArrowColor();
        popperOptions.modifiers = Object.assign(popperOptions.modifiers, this.popperOptions.popperModifiers);
        this.popperInstance = new Popper(this.referenceObject, this.popperViewRef.nativeElement, popperOptions);
        ((/** @type {?} */ (this.popperInstance))).enableEventListeners();
        this.scheduleUpdate();
        this.toggleVisibility(true);
        this.globalResize = this.renderer.listen('document', 'resize', this.onDocumentResize.bind(this));
    };
    /**
     * @private
     * @return {?}
     */
    PopperContent.prototype.determineArrowColor = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        ['background-color', 'backgroundColor'].some(function (clr) {
            if (!_this.popperOptions.styles) {
                return false;
            }
            if (_this.popperOptions.styles.hasOwnProperty(clr)) {
                _this.arrowColor = _this.popperOptions.styles[clr];
                return true;
            }
            return false;
        });
    };
    /**
     * @return {?}
     */
    PopperContent.prototype.update = /**
     * @return {?}
     */
    function () {
        this.popperInstance && ((/** @type {?} */ (this.popperInstance))).update();
    };
    /**
     * @return {?}
     */
    PopperContent.prototype.scheduleUpdate = /**
     * @return {?}
     */
    function () {
        this.popperInstance && ((/** @type {?} */ (this.popperInstance))).scheduleUpdate();
    };
    /**
     * @return {?}
     */
    PopperContent.prototype.hide = /**
     * @return {?}
     */
    function () {
        if (this.popperInstance) {
            this.popperInstance.destroy();
        }
        this.toggleVisibility(false);
        this.onHidden.emit();
    };
    /**
     * @param {?} state
     * @return {?}
     */
    PopperContent.prototype.toggleVisibility = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        if (!state) {
            this.opacity = 0;
            this.displayType = "none";
            this.ariaHidden = 'true';
        }
        else {
            this.opacity = 1;
            this.displayType = "block";
            this.ariaHidden = 'false';
        }
        if (!this.CDR['destroyed']) {
            this.CDR.detectChanges();
        }
    };
    /**
     * @param {?=} classList
     * @return {?}
     */
    PopperContent.prototype.extractAppliedClassListExpr = /**
     * @param {?=} classList
     * @return {?}
     */
    function (classList) {
        if (!classList || typeof classList !== 'string') {
            return null;
        }
        try {
            return classList
                .replace(/ /, '')
                .split(',')
                .reduce(function (acc, clss) {
                acc[clss] = true;
                return acc;
            }, {});
        }
        catch (e) {
            return null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    PopperContent.prototype.clearGlobalResize = /**
     * @private
     * @return {?}
     */
    function () {
        this.globalResize && typeof this.globalResize === 'function' && this.globalResize();
    };
    PopperContent.decorators = [
        { type: Component, args: [{
                    selector: "popper-content",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n    <div #popperViewRef\n         [class.ngxp__container]=\"!popperOptions.disableDefaultStyling\"\n         [class.ngxp__animation]=\"!popperOptions.disableAnimation\"\n         [style.display]=\"displayType\"\n         [style.opacity]=\"opacity\"\n         [ngStyle]=\"popperOptions.styles\"\n         [ngClass]=\"extractAppliedClassListExpr(popperOptions.applyClass)\"\n         attr.aria-hidden=\"{{ariaHidden}}\"\n         [attr.aria-describedby]=\"popperOptions.ariaDescribe || null\"\n         attr.role=\"{{popperOptions.ariaRole}}\">\n      <div class=\"ngxp__inner\" *ngIf=\"text\" [innerHTML]=\"text\">\n        <ng-content></ng-content>\n      </div>\n      <div class=\"ngxp__inner\" *ngIf=\"!text\">\n        <ng-content></ng-content>\n      </div>\n      <div class=\"ngxp__arrow\" [style.border-color]=\"arrowColor\" [class.__force-arrow]=\"arrowColor\"\n           [ngClass]=\"extractAppliedClassListExpr(popperOptions.applyArrowClass)\"></div>\n\n    </div>\n  ",
                    styles: ["\n    .ngxp__container {\n      display: none;\n      position: absolute;\n      border-radius: 3px;\n      border: 1px solid grey;\n      box-shadow: 0 0 2px rgba(0, 0, 0, 0.5);\n      padding: 10px;\n    }\n\n    .ngxp__container.ngxp__animation {\n      -webkit-animation: ngxp-fadeIn 150ms ease-out;\n      -moz-animation: ngxp-fadeIn 150ms ease-out;\n      -o-animation: ngxp-fadeIn 150ms ease-out;\n      animation: ngxp-fadeIn 150ms ease-out;\n\n    }\n\n    .ngxp__container > .ngxp__arrow {\n      border-color: grey;\n      width: 0;\n      height: 0;\n      border-style: solid;\n      position: absolute;\n      margin: 5px;\n    }\n\n    .ngxp__container[x-placement^=\"top\"],\n    .ngxp__container[x-placement^=\"bottom\"],\n    .ngxp__container[x-placement^=\"right\"],\n    .ngxp__container[x-placement^=\"left\"] {\n      display: block;\n    }\n\n    .ngxp__container[x-placement^=\"top\"] {\n      margin-bottom: 5px;\n    }\n\n    .ngxp__container[x-placement^=\"top\"] > .ngxp__arrow {\n      border-width: 5px 5px 0 5px;\n      border-right-color: transparent;\n      border-bottom-color: transparent;\n      border-left-color: transparent;\n      bottom: -5px;\n      left: calc(50% - 5px);\n      margin-top: 0;\n      margin-bottom: 0;\n    }\n\n    .ngxp__container[x-placement^=\"top\"] > .ngxp__arrow.__force-arrow {\n      border-right-color: transparent !important;\n      border-bottom-color: transparent !important;\n      border-left-color: transparent !important;\n    }\n\n    .ngxp__container[x-placement^=\"bottom\"] {\n      margin-top: 5px;\n    }\n\n    .ngxp__container[x-placement^=\"bottom\"] > .ngxp__arrow {\n      border-width: 0 5px 5px 5px;\n      border-top-color: transparent;\n      border-right-color: transparent;\n      border-left-color: transparent;\n      top: -5px;\n      left: calc(50% - 5px);\n      margin-top: 0;\n      margin-bottom: 0;\n    }\n\n    .ngxp__container[x-placement^=\"bottom\"] > .ngxp__arrow.__force-arrow {\n      border-top-color: transparent !important;\n      border-right-color: transparent !important;\n      border-left-color: transparent !important;\n    }\n\n    .ngxp__container[x-placement^=\"right\"] {\n      margin-left: 5px;\n    }\n\n    .ngxp__container[x-placement^=\"right\"] > .ngxp__arrow {\n      border-width: 5px 5px 5px 0;\n      border-top-color: transparent;\n      border-bottom-color: transparent;\n      border-left-color: transparent;\n      left: -5px;\n      top: calc(50% - 5px);\n      margin-left: 0;\n      margin-right: 0;\n    }\n\n    .ngxp__container[x-placement^=\"right\"] > .ngxp__arrow.__force-arrow {\n      border-top-color: transparent !important;\n      border-bottom-color: transparent !important;\n      border-left-color: transparent !important;\n    }\n\n    .ngxp__container[x-placement^=\"left\"] {\n      margin-right: 5px;\n    }\n\n    .ngxp__container[x-placement^=\"left\"] > .ngxp__arrow {\n      border-width: 5px 0 5px 5px;\n      border-top-color: transparent;\n      border-bottom-color: transparent;\n      border-right-color: transparent;\n      right: -5px;\n      top: calc(50% - 5px);\n      margin-left: 0;\n      margin-right: 0;\n    }\n\n    .ngxp__container[x-placement^=\"left\"] > .ngxp__arrow.__force-arrow {\n      border-top-color: transparent !important;\n      border-bottom-color: transparent !important;\n      border-right-color: transparent !important;\n    }\n\n    @-webkit-keyframes ngxp-fadeIn {\n      0% {\n        display: none;\n        opacity: 0;\n      }\n\n      1% {\n        display: block;\n        opacity: 0;\n      }\n\n      100% {\n        display: block;\n        opacity: 1;\n      }\n    }\n\n    @keyframes ngxp-fadeIn {\n      0% {\n        display: none;\n        opacity: 0;\n      }\n\n      1% {\n        display: block;\n        opacity: 0;\n      }\n\n      100% {\n        display: block;\n        opacity: 1;\n      }\n    }\n  "]
                }] }
    ];
    /** @nocollapse */
    PopperContent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ViewContainerRef },
        { type: ChangeDetectorRef }
    ]; };
    PopperContent.propDecorators = {
        popperViewRef: [{ type: ViewChild, args: ["popperViewRef",] }],
        onMouseOver: [{ type: HostListener, args: ['mouseover',] }],
        showOnLeave: [{ type: HostListener, args: ['mouseleave',] }]
    };
    return PopperContent;
}());
export { PopperContent };
if (false) {
    /** @type {?} */
    PopperContent.prototype.popperOptions;
    /** @type {?} */
    PopperContent.prototype.referenceObject;
    /** @type {?} */
    PopperContent.prototype.isMouseOver;
    /** @type {?} */
    PopperContent.prototype.onHidden;
    /** @type {?} */
    PopperContent.prototype.text;
    /** @type {?} */
    PopperContent.prototype.popperInstance;
    /** @type {?} */
    PopperContent.prototype.displayType;
    /** @type {?} */
    PopperContent.prototype.opacity;
    /** @type {?} */
    PopperContent.prototype.ariaHidden;
    /** @type {?} */
    PopperContent.prototype.arrowColor;
    /** @type {?} */
    PopperContent.prototype.onUpdate;
    /** @type {?} */
    PopperContent.prototype.state;
    /**
     * @type {?}
     * @private
     */
    PopperContent.prototype.globalResize;
    /** @type {?} */
    PopperContent.prototype.popperViewRef;
    /** @type {?} */
    PopperContent.prototype.elemRef;
    /**
     * @type {?}
     * @private
     */
    PopperContent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PopperContent.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    PopperContent.prototype.CDR;
}
//# sourceMappingURL=data:application/json;base64,