/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, HostListener, Renderer2, ViewChild, ViewContainerRef, ViewEncapsulation, } from "@angular/core";
import Popper from 'popper.js';
import { Placements, Triggers } from './popper-model';
export class PopperContent {
    /**
     * @param {?} elemRef
     * @param {?} renderer
     * @param {?} viewRef
     * @param {?} CDR
     */
    constructor(elemRef, renderer, viewRef, CDR) {
        this.elemRef = elemRef;
        this.renderer = renderer;
        this.viewRef = viewRef;
        this.CDR = CDR;
        this.popperOptions = (/** @type {?} */ ({
            disableAnimation: false,
            disableDefaultStyling: false,
            placement: Placements.Auto,
            boundariesElement: '',
            trigger: Triggers.HOVER,
            positionFixed: false,
            appendToBody: false,
            popperModifiers: {}
        }));
        this.isMouseOver = false;
        this.onHidden = new EventEmitter();
        this.displayType = "none";
        this.opacity = 0;
        this.ariaHidden = 'true';
        this.arrowColor = null;
        this.state = true;
    }
    /**
     * @return {?}
     */
    onMouseOver() {
        this.isMouseOver = true;
    }
    /**
     * @return {?}
     */
    showOnLeave() {
        this.isMouseOver = false;
        if (this.popperOptions.trigger !== Triggers.HOVER && !this.popperOptions.hideOnMouseLeave) {
            return;
        }
        this.hide();
    }
    /**
     * @return {?}
     */
    onDocumentResize() {
        this.update();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.clean();
        if (this.popperOptions.appendTo && this.elemRef && this.elemRef.nativeElement && this.elemRef.nativeElement.parentNode) {
            this.viewRef.detach();
            this.elemRef.nativeElement.parentNode.removeChild(this.elemRef.nativeElement);
        }
    }
    /**
     * @return {?}
     */
    clean() {
        this.toggleVisibility(false);
        if (!this.popperInstance) {
            return;
        }
        ((/** @type {?} */ (this.popperInstance))).disableEventListeners();
        this.popperInstance.destroy();
    }
    /**
     * @return {?}
     */
    show() {
        if (!this.referenceObject) {
            return;
        }
        /** @type {?} */
        const appendToParent = this.popperOptions.appendTo && document.querySelector(this.popperOptions.appendTo);
        if (appendToParent && this.elemRef.nativeElement.parentNode !== appendToParent) {
            this.elemRef.nativeElement.parentNode && this.elemRef.nativeElement.parentNode.removeChild(this.elemRef.nativeElement);
            appendToParent.appendChild(this.elemRef.nativeElement);
        }
        /** @type {?} */
        let popperOptions = (/** @type {?} */ ({
            placement: this.popperOptions.placement,
            positionFixed: this.popperOptions.positionFixed,
            modifiers: {
                arrow: {
                    element: this.popperViewRef.nativeElement.querySelector('.ngxp__arrow')
                }
            }
        }));
        if (this.onUpdate) {
            popperOptions.onUpdate = (/** @type {?} */ (this.onUpdate));
        }
        /** @type {?} */
        let boundariesElement = this.popperOptions.boundariesElement && document.querySelector(this.popperOptions.boundariesElement);
        if (popperOptions.modifiers && boundariesElement) {
            popperOptions.modifiers.preventOverflow = { boundariesElement };
        }
        if (popperOptions.modifiers && this.popperOptions.preventOverflow !== undefined) {
            popperOptions.modifiers.preventOverflow = popperOptions.modifiers.preventOverflow || {};
            popperOptions.modifiers.preventOverflow.enabled = this.popperOptions.preventOverflow;
            if (!popperOptions.modifiers.preventOverflow.enabled) {
                popperOptions.modifiers.hide = { enabled: false };
            }
        }
        this.determineArrowColor();
        popperOptions.modifiers = Object.assign(popperOptions.modifiers, this.popperOptions.popperModifiers);
        this.popperInstance = new Popper(this.referenceObject, this.popperViewRef.nativeElement, popperOptions);
        ((/** @type {?} */ (this.popperInstance))).enableEventListeners();
        this.scheduleUpdate();
        this.toggleVisibility(true);
        this.globalResize = this.renderer.listen('document', 'resize', this.onDocumentResize.bind(this));
    }
    /**
     * @private
     * @return {?}
     */
    determineArrowColor() {
        ['background-color', 'backgroundColor'].some((clr) => {
            if (!this.popperOptions.styles) {
                return false;
            }
            if (this.popperOptions.styles.hasOwnProperty(clr)) {
                this.arrowColor = this.popperOptions.styles[clr];
                return true;
            }
            return false;
        });
    }
    /**
     * @return {?}
     */
    update() {
        this.popperInstance && ((/** @type {?} */ (this.popperInstance))).update();
    }
    /**
     * @return {?}
     */
    scheduleUpdate() {
        this.popperInstance && ((/** @type {?} */ (this.popperInstance))).scheduleUpdate();
    }
    /**
     * @return {?}
     */
    hide() {
        if (this.popperInstance) {
            this.popperInstance.destroy();
        }
        this.toggleVisibility(false);
        this.onHidden.emit();
    }
    /**
     * @param {?} state
     * @return {?}
     */
    toggleVisibility(state) {
        if (!state) {
            this.opacity = 0;
            this.displayType = "none";
            this.ariaHidden = 'true';
        }
        else {
            this.opacity = 1;
            this.displayType = "block";
            this.ariaHidden = 'false';
        }
        if (!this.CDR['destroyed']) {
            this.CDR.detectChanges();
        }
    }
    /**
     * @param {?=} classList
     * @return {?}
     */
    extractAppliedClassListExpr(classList) {
        if (!classList || typeof classList !== 'string') {
            return null;
        }
        try {
            return classList
                .replace(/ /, '')
                .split(',')
                .reduce((acc, clss) => {
                acc[clss] = true;
                return acc;
            }, {});
        }
        catch (e) {
            return null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    clearGlobalResize() {
        this.globalResize && typeof this.globalResize === 'function' && this.globalResize();
    }
}
PopperContent.decorators = [
    { type: Component, args: [{
                selector: "popper-content",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <div #popperViewRef
         [class.ngxp__container]="!popperOptions.disableDefaultStyling"
         [class.ngxp__animation]="!popperOptions.disableAnimation"
         [style.display]="displayType"
         [style.opacity]="opacity"
         [ngStyle]="popperOptions.styles"
         [ngClass]="extractAppliedClassListExpr(popperOptions.applyClass)"
         attr.aria-hidden="{{ariaHidden}}"
         [attr.aria-describedby]="popperOptions.ariaDescribe || null"
         attr.role="{{popperOptions.ariaRole}}">
      <div class="ngxp__inner" *ngIf="text" [innerHTML]="text">
        <ng-content></ng-content>
      </div>
      <div class="ngxp__inner" *ngIf="!text">
        <ng-content></ng-content>
      </div>
      <div class="ngxp__arrow" [style.border-color]="arrowColor" [class.__force-arrow]="arrowColor"
           [ngClass]="extractAppliedClassListExpr(popperOptions.applyArrowClass)"></div>

    </div>
  `,
                styles: [`
    .ngxp__container {
      display: none;
      position: absolute;
      border-radius: 3px;
      border: 1px solid grey;
      box-shadow: 0 0 2px rgba(0, 0, 0, 0.5);
      padding: 10px;
    }

    .ngxp__container.ngxp__animation {
      -webkit-animation: ngxp-fadeIn 150ms ease-out;
      -moz-animation: ngxp-fadeIn 150ms ease-out;
      -o-animation: ngxp-fadeIn 150ms ease-out;
      animation: ngxp-fadeIn 150ms ease-out;

    }

    .ngxp__container > .ngxp__arrow {
      border-color: grey;
      width: 0;
      height: 0;
      border-style: solid;
      position: absolute;
      margin: 5px;
    }

    .ngxp__container[x-placement^="top"],
    .ngxp__container[x-placement^="bottom"],
    .ngxp__container[x-placement^="right"],
    .ngxp__container[x-placement^="left"] {
      display: block;
    }

    .ngxp__container[x-placement^="top"] {
      margin-bottom: 5px;
    }

    .ngxp__container[x-placement^="top"] > .ngxp__arrow {
      border-width: 5px 5px 0 5px;
      border-right-color: transparent;
      border-bottom-color: transparent;
      border-left-color: transparent;
      bottom: -5px;
      left: calc(50% - 5px);
      margin-top: 0;
      margin-bottom: 0;
    }

    .ngxp__container[x-placement^="top"] > .ngxp__arrow.__force-arrow {
      border-right-color: transparent !important;
      border-bottom-color: transparent !important;
      border-left-color: transparent !important;
    }

    .ngxp__container[x-placement^="bottom"] {
      margin-top: 5px;
    }

    .ngxp__container[x-placement^="bottom"] > .ngxp__arrow {
      border-width: 0 5px 5px 5px;
      border-top-color: transparent;
      border-right-color: transparent;
      border-left-color: transparent;
      top: -5px;
      left: calc(50% - 5px);
      margin-top: 0;
      margin-bottom: 0;
    }

    .ngxp__container[x-placement^="bottom"] > .ngxp__arrow.__force-arrow {
      border-top-color: transparent !important;
      border-right-color: transparent !important;
      border-left-color: transparent !important;
    }

    .ngxp__container[x-placement^="right"] {
      margin-left: 5px;
    }

    .ngxp__container[x-placement^="right"] > .ngxp__arrow {
      border-width: 5px 5px 5px 0;
      border-top-color: transparent;
      border-bottom-color: transparent;
      border-left-color: transparent;
      left: -5px;
      top: calc(50% - 5px);
      margin-left: 0;
      margin-right: 0;
    }

    .ngxp__container[x-placement^="right"] > .ngxp__arrow.__force-arrow {
      border-top-color: transparent !important;
      border-bottom-color: transparent !important;
      border-left-color: transparent !important;
    }

    .ngxp__container[x-placement^="left"] {
      margin-right: 5px;
    }

    .ngxp__container[x-placement^="left"] > .ngxp__arrow {
      border-width: 5px 0 5px 5px;
      border-top-color: transparent;
      border-bottom-color: transparent;
      border-right-color: transparent;
      right: -5px;
      top: calc(50% - 5px);
      margin-left: 0;
      margin-right: 0;
    }

    .ngxp__container[x-placement^="left"] > .ngxp__arrow.__force-arrow {
      border-top-color: transparent !important;
      border-bottom-color: transparent !important;
      border-right-color: transparent !important;
    }

    @-webkit-keyframes ngxp-fadeIn {
      0% {
        display: none;
        opacity: 0;
      }

      1% {
        display: block;
        opacity: 0;
      }

      100% {
        display: block;
        opacity: 1;
      }
    }

    @keyframes ngxp-fadeIn {
      0% {
        display: none;
        opacity: 0;
      }

      1% {
        display: block;
        opacity: 0;
      }

      100% {
        display: block;
        opacity: 1;
      }
    }
  `]
            }] }
];
/** @nocollapse */
PopperContent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ViewContainerRef },
    { type: ChangeDetectorRef }
];
PopperContent.propDecorators = {
    popperViewRef: [{ type: ViewChild, args: ["popperViewRef",] }],
    onMouseOver: [{ type: HostListener, args: ['mouseover',] }],
    showOnLeave: [{ type: HostListener, args: ['mouseleave',] }]
};
if (false) {
    /** @type {?} */
    PopperContent.prototype.popperOptions;
    /** @type {?} */
    PopperContent.prototype.referenceObject;
    /** @type {?} */
    PopperContent.prototype.isMouseOver;
    /** @type {?} */
    PopperContent.prototype.onHidden;
    /** @type {?} */
    PopperContent.prototype.text;
    /** @type {?} */
    PopperContent.prototype.popperInstance;
    /** @type {?} */
    PopperContent.prototype.displayType;
    /** @type {?} */
    PopperContent.prototype.opacity;
    /** @type {?} */
    PopperContent.prototype.ariaHidden;
    /** @type {?} */
    PopperContent.prototype.arrowColor;
    /** @type {?} */
    PopperContent.prototype.onUpdate;
    /** @type {?} */
    PopperContent.prototype.state;
    /**
     * @type {?}
     * @private
     */
    PopperContent.prototype.globalResize;
    /** @type {?} */
    PopperContent.prototype.popperViewRef;
    /** @type {?} */
    PopperContent.prototype.elemRef;
    /**
     * @type {?}
     * @private
     */
    PopperContent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PopperContent.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    PopperContent.prototype.CDR;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wcGVyLWNvbnRlbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcG9wcGVyLyIsInNvdXJjZXMiOlsic3JjL3BvcHBlci1jb250ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQzFDLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLFlBQVksRUFFWixTQUFTLEVBQ1QsU0FBUyxFQUNULGdCQUFnQixFQUNoQixpQkFBaUIsR0FDbEIsTUFBTSxlQUFlLENBQUE7QUFDdEIsT0FBTyxNQUFNLE1BQU0sV0FBVyxDQUFBO0FBQzlCLE9BQU8sRUFBQyxVQUFVLEVBQXdCLFFBQVEsRUFBQyxNQUFNLGdCQUFnQixDQUFBO0FBcUx6RSxNQUFNLE9BQU8sYUFBYTs7Ozs7OztJQTBEeEIsWUFDUyxPQUFtQixFQUNsQixRQUFtQixFQUNuQixPQUF5QixFQUN6QixHQUFzQjtRQUh2QixZQUFPLEdBQVAsT0FBTyxDQUFZO1FBQ2xCLGFBQVEsR0FBUixRQUFRLENBQVc7UUFDbkIsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7UUFDekIsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUE1RGhDLGtCQUFhLEdBQXlCLG1CQUFzQjtZQUMxRCxnQkFBZ0IsRUFBRSxLQUFLO1lBQ3ZCLHFCQUFxQixFQUFFLEtBQUs7WUFDNUIsU0FBUyxFQUFFLFVBQVUsQ0FBQyxJQUFJO1lBQzFCLGlCQUFpQixFQUFFLEVBQUU7WUFDckIsT0FBTyxFQUFFLFFBQVEsQ0FBQyxLQUFLO1lBQ3ZCLGFBQWEsRUFBRSxLQUFLO1lBQ3BCLFlBQVksRUFBRSxLQUFLO1lBQ25CLGVBQWUsRUFBRSxFQUFFO1NBQ3BCLEVBQUEsQ0FBQztRQUlGLGdCQUFXLEdBQVksS0FBSyxDQUFDO1FBRTdCLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBTTlCLGdCQUFXLEdBQVcsTUFBTSxDQUFDO1FBRTdCLFlBQU8sR0FBVyxDQUFDLENBQUM7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QUUsaUJBQWlCLENBQUMsSUFBSTtnQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBcUJUO3lCQUNROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBdUpSO2FBQ0Y7Ozs7WUE5TEMsVUFBVTtZQUlWLFNBQVM7WUFFVCxnQkFBZ0I7WUFSUyxpQkFBaUI7Ozs0QkFzT3pDLFNBQVMsU0FBQyxlQUFlOzBCQUd6QixZQUFZLFNBQUMsV0FBVzswQkFLeEIsWUFBWSxTQUFDLFlBQVk7Ozs7SUEzQzFCLHNDQVNFOztJQUVGLHdDQUE2Qjs7SUFFN0Isb0NBQTZCOztJQUU3QixpQ0FBOEI7O0lBRTlCLDZCQUFhOztJQUViLHVDQUF1Qjs7SUFFdkIsb0NBQTZCOztJQUU3QixnQ0FBb0I7O0lBRXBCLG1DQUE0Qjs7SUFFNUIsbUNBQWlDOztJQUVqQyxpQ0FBbUI7O0lBRW5CLDhCQUFzQjs7Ozs7SUFFdEIscUNBQTBCOztJQUUxQixzQ0FDMEI7O0lBcUJ4QixnQ0FBMEI7Ozs7O0lBQzFCLGlDQUEyQjs7Ozs7SUFDM0IsZ0NBQWlDOzs7OztJQUNqQyw0QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBIb3N0TGlzdGVuZXIsXG4gIE9uRGVzdHJveSxcbiAgUmVuZGVyZXIyLFxuICBWaWV3Q2hpbGQsXG4gIFZpZXdDb250YWluZXJSZWYsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiXG5pbXBvcnQgUG9wcGVyIGZyb20gJ3BvcHBlci5qcydcbmltcG9ydCB7UGxhY2VtZW50cywgUG9wcGVyQ29udGVudE9wdGlvbnMsIFRyaWdnZXJzfSBmcm9tICcuL3BvcHBlci1tb2RlbCdcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcInBvcHBlci1jb250ZW50XCIsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgI3BvcHBlclZpZXdSZWZcbiAgICAgICAgIFtjbGFzcy5uZ3hwX19jb250YWluZXJdPVwiIXBvcHBlck9wdGlvbnMuZGlzYWJsZURlZmF1bHRTdHlsaW5nXCJcbiAgICAgICAgIFtjbGFzcy5uZ3hwX19hbmltYXRpb25dPVwiIXBvcHBlck9wdGlvbnMuZGlzYWJsZUFuaW1hdGlvblwiXG4gICAgICAgICBbc3R5bGUuZGlzcGxheV09XCJkaXNwbGF5VHlwZVwiXG4gICAgICAgICBbc3R5bGUub3BhY2l0eV09XCJvcGFjaXR5XCJcbiAgICAgICAgIFtuZ1N0eWxlXT1cInBvcHBlck9wdGlvbnMuc3R5bGVzXCJcbiAgICAgICAgIFtuZ0NsYXNzXT1cImV4dHJhY3RBcHBsaWVkQ2xhc3NMaXN0RXhwcihwb3BwZXJPcHRpb25zLmFwcGx5Q2xhc3MpXCJcbiAgICAgICAgIGF0dHIuYXJpYS1oaWRkZW49XCJ7e2FyaWFIaWRkZW59fVwiXG4gICAgICAgICBbYXR0ci5hcmlhLWRlc2NyaWJlZGJ5XT1cInBvcHBlck9wdGlvbnMuYXJpYURlc2NyaWJlIHx8IG51bGxcIlxuICAgICAgICAgYXR0ci5yb2xlPVwie3twb3BwZXJPcHRpb25zLmFyaWFSb2xlfX1cIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJuZ3hwX19pbm5lclwiICpuZ0lmPVwidGV4dFwiIFtpbm5lckhUTUxdPVwidGV4dFwiPlxuICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJuZ3hwX19pbm5lclwiICpuZ0lmPVwiIXRleHRcIj5cbiAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibmd4cF9fYXJyb3dcIiBbc3R5bGUuYm9yZGVyLWNvbG9yXT1cImFycm93Q29sb3JcIiBbY2xhc3MuX19mb3JjZS1hcnJvd109XCJhcnJvd0NvbG9yXCJcbiAgICAgICAgICAgW25nQ2xhc3NdPVwiZXh0cmFjdEFwcGxpZWRDbGFzc0xpc3RFeHByKHBvcHBlck9wdGlvbnMuYXBwbHlBcnJvd0NsYXNzKVwiPjwvZGl2PlxuXG4gICAgPC9kaXY+XG4gIGAsXG4gIHN0eWxlczogW2BcbiAgICAubmd4cF9fY29udGFpbmVyIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgICBib3JkZXI6IDFweCBzb2xpZCBncmV5O1xuICAgICAgYm94LXNoYWRvdzogMCAwIDJweCByZ2JhKDAsIDAsIDAsIDAuNSk7XG4gICAgICBwYWRkaW5nOiAxMHB4O1xuICAgIH1cblxuICAgIC5uZ3hwX19jb250YWluZXIubmd4cF9fYW5pbWF0aW9uIHtcbiAgICAgIC13ZWJraXQtYW5pbWF0aW9uOiBuZ3hwLWZhZGVJbiAxNTBtcyBlYXNlLW91dDtcbiAgICAgIC1tb3otYW5pbWF0aW9uOiBuZ3hwLWZhZGVJbiAxNTBtcyBlYXNlLW91dDtcbiAgICAgIC1vLWFuaW1hdGlvbjogbmd4cC1mYWRlSW4gMTUwbXMgZWFzZS1vdXQ7XG4gICAgICBhbmltYXRpb246IG5neHAtZmFkZUluIDE1MG1zIGVhc2Utb3V0O1xuXG4gICAgfVxuXG4gICAgLm5neHBfX2NvbnRhaW5lciA+IC5uZ3hwX19hcnJvdyB7XG4gICAgICBib3JkZXItY29sb3I6IGdyZXk7XG4gICAgICB3aWR0aDogMDtcbiAgICAgIGhlaWdodDogMDtcbiAgICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICBtYXJnaW46IDVweDtcbiAgICB9XG5cbiAgICAubmd4cF9fY29udGFpbmVyW3gtcGxhY2VtZW50Xj1cInRvcFwiXSxcbiAgICAubmd4cF9fY29udGFpbmVyW3gtcGxhY2VtZW50Xj1cImJvdHRvbVwiXSxcbiAgICAubmd4cF9fY29udGFpbmVyW3gtcGxhY2VtZW50Xj1cInJpZ2h0XCJdLFxuICAgIC5uZ3hwX19jb250YWluZXJbeC1wbGFjZW1lbnRePVwibGVmdFwiXSB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9XG5cbiAgICAubmd4cF9fY29udGFpbmVyW3gtcGxhY2VtZW50Xj1cInRvcFwiXSB7XG4gICAgICBtYXJnaW4tYm90dG9tOiA1cHg7XG4gICAgfVxuXG4gICAgLm5neHBfX2NvbnRhaW5lclt4LXBsYWNlbWVudF49XCJ0b3BcIl0gPiAubmd4cF9fYXJyb3cge1xuICAgICAgYm9yZGVyLXdpZHRoOiA1cHggNXB4IDAgNXB4O1xuICAgICAgYm9yZGVyLXJpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgYm9yZGVyLWxlZnQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgYm90dG9tOiAtNXB4O1xuICAgICAgbGVmdDogY2FsYyg1MCUgLSA1cHgpO1xuICAgICAgbWFyZ2luLXRvcDogMDtcbiAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgfVxuXG4gICAgLm5neHBfX2NvbnRhaW5lclt4LXBsYWNlbWVudF49XCJ0b3BcIl0gPiAubmd4cF9fYXJyb3cuX19mb3JjZS1hcnJvdyB7XG4gICAgICBib3JkZXItcmlnaHQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7XG4gICAgICBib3JkZXItYm90dG9tLWNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50O1xuICAgICAgYm9yZGVyLWxlZnQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7XG4gICAgfVxuXG4gICAgLm5neHBfX2NvbnRhaW5lclt4LXBsYWNlbWVudF49XCJib3R0b21cIl0ge1xuICAgICAgbWFyZ2luLXRvcDogNXB4O1xuICAgIH1cblxuICAgIC5uZ3hwX19jb250YWluZXJbeC1wbGFjZW1lbnRePVwiYm90dG9tXCJdID4gLm5neHBfX2Fycm93IHtcbiAgICAgIGJvcmRlci13aWR0aDogMCA1cHggNXB4IDVweDtcbiAgICAgIGJvcmRlci10b3AtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgYm9yZGVyLXJpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgIGJvcmRlci1sZWZ0LWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgIHRvcDogLTVweDtcbiAgICAgIGxlZnQ6IGNhbGMoNTAlIC0gNXB4KTtcbiAgICAgIG1hcmdpbi10b3A6IDA7XG4gICAgICBtYXJnaW4tYm90dG9tOiAwO1xuICAgIH1cblxuICAgIC5uZ3hwX19jb250YWluZXJbeC1wbGFjZW1lbnRePVwiYm90dG9tXCJdID4gLm5neHBfX2Fycm93Ll9fZm9yY2UtYXJyb3cge1xuICAgICAgYm9yZGVyLXRvcC1jb2xvcjogdHJhbnNwYXJlbnQgIWltcG9ydGFudDtcbiAgICAgIGJvcmRlci1yaWdodC1jb2xvcjogdHJhbnNwYXJlbnQgIWltcG9ydGFudDtcbiAgICAgIGJvcmRlci1sZWZ0LWNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50O1xuICAgIH1cblxuICAgIC5uZ3hwX19jb250YWluZXJbeC1wbGFjZW1lbnRePVwicmlnaHRcIl0ge1xuICAgICAgbWFyZ2luLWxlZnQ6IDVweDtcbiAgICB9XG5cbiAgICAubmd4cF9fY29udGFpbmVyW3gtcGxhY2VtZW50Xj1cInJpZ2h0XCJdID4gLm5neHBfX2Fycm93IHtcbiAgICAgIGJvcmRlci13aWR0aDogNXB4IDVweCA1cHggMDtcbiAgICAgIGJvcmRlci10b3AtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICBib3JkZXItbGVmdC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICBsZWZ0OiAtNXB4O1xuICAgICAgdG9wOiBjYWxjKDUwJSAtIDVweCk7XG4gICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICB9XG5cbiAgICAubmd4cF9fY29udGFpbmVyW3gtcGxhY2VtZW50Xj1cInJpZ2h0XCJdID4gLm5neHBfX2Fycm93Ll9fZm9yY2UtYXJyb3cge1xuICAgICAgYm9yZGVyLXRvcC1jb2xvcjogdHJhbnNwYXJlbnQgIWltcG9ydGFudDtcbiAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7XG4gICAgICBib3JkZXItbGVmdC1jb2xvcjogdHJhbnNwYXJlbnQgIWltcG9ydGFudDtcbiAgICB9XG5cbiAgICAubmd4cF9fY29udGFpbmVyW3gtcGxhY2VtZW50Xj1cImxlZnRcIl0ge1xuICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gICAgfVxuXG4gICAgLm5neHBfX2NvbnRhaW5lclt4LXBsYWNlbWVudF49XCJsZWZ0XCJdID4gLm5neHBfX2Fycm93IHtcbiAgICAgIGJvcmRlci13aWR0aDogNXB4IDAgNXB4IDVweDtcbiAgICAgIGJvcmRlci10b3AtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICBib3JkZXItcmlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgcmlnaHQ6IC01cHg7XG4gICAgICB0b3A6IGNhbGMoNTAlIC0gNXB4KTtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xuICAgIH1cblxuICAgIC5uZ3hwX19jb250YWluZXJbeC1wbGFjZW1lbnRePVwibGVmdFwiXSA+IC5uZ3hwX19hcnJvdy5fX2ZvcmNlLWFycm93IHtcbiAgICAgIGJvcmRlci10b3AtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7XG4gICAgICBib3JkZXItYm90dG9tLWNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50O1xuICAgICAgYm9yZGVyLXJpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50O1xuICAgIH1cblxuICAgIEAtd2Via2l0LWtleWZyYW1lcyBuZ3hwLWZhZGVJbiB7XG4gICAgICAwJSB7XG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICB9XG5cbiAgICAgIDElIHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICB9XG5cbiAgICAgIDEwMCUge1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBAa2V5ZnJhbWVzIG5neHAtZmFkZUluIHtcbiAgICAgIDAlIHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgIH1cblxuICAgICAgMSUge1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgIH1cblxuICAgICAgMTAwJSB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgfVxuICAgIH1cbiAgYF1cbn0pXG5leHBvcnQgY2xhc3MgUG9wcGVyQ29udGVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG5cbiAgcG9wcGVyT3B0aW9uczogUG9wcGVyQ29udGVudE9wdGlvbnMgPSA8UG9wcGVyQ29udGVudE9wdGlvbnM+e1xuICAgIGRpc2FibGVBbmltYXRpb246IGZhbHNlLFxuICAgIGRpc2FibGVEZWZhdWx0U3R5bGluZzogZmFsc2UsXG4gICAgcGxhY2VtZW50OiBQbGFjZW1lbnRzLkF1dG8sXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICcnLFxuICAgIHRyaWdnZXI6IFRyaWdnZXJzLkhPVkVSLFxuICAgIHBvc2l0aW9uRml4ZWQ6IGZhbHNlLFxuICAgIGFwcGVuZFRvQm9keTogZmFsc2UsXG4gICAgcG9wcGVyTW9kaWZpZXJzOiB7fVxuICB9O1xuXG4gIHJlZmVyZW5jZU9iamVjdDogSFRNTEVsZW1lbnQ7XG5cbiAgaXNNb3VzZU92ZXI6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBvbkhpZGRlbiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICB0ZXh0OiBzdHJpbmc7XG5cbiAgcG9wcGVySW5zdGFuY2U6IFBvcHBlcjtcblxuICBkaXNwbGF5VHlwZTogc3RyaW5nID0gXCJub25lXCI7XG5cbiAgb3BhY2l0eTogbnVtYmVyID0gMDtcblxuICBhcmlhSGlkZGVuOiBzdHJpbmcgPSAndHJ1ZSc7XG5cbiAgYXJyb3dDb2xvcjogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5cbiAgb25VcGRhdGU6IEZ1bmN0aW9uO1xuXG4gIHN0YXRlOiBib29sZWFuID0gdHJ1ZTtcblxuICBwcml2YXRlIGdsb2JhbFJlc2l6ZTogYW55O1xuXG4gIEBWaWV3Q2hpbGQoXCJwb3BwZXJWaWV3UmVmXCIpXG4gIHBvcHBlclZpZXdSZWY6IEVsZW1lbnRSZWY7XG5cbiAgQEhvc3RMaXN0ZW5lcignbW91c2VvdmVyJylcbiAgb25Nb3VzZU92ZXIoKSB7XG4gICAgdGhpcy5pc01vdXNlT3ZlciA9IHRydWU7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdtb3VzZWxlYXZlJylcbiAgc2hvd09uTGVhdmUoKSB7XG4gICAgdGhpcy5pc01vdXNlT3ZlciA9IGZhbHNlO1xuICAgIGlmICh0aGlzLnBvcHBlck9wdGlvbnMudHJpZ2dlciAhPT0gVHJpZ2dlcnMuSE9WRVIgJiYgIXRoaXMucG9wcGVyT3B0aW9ucy5oaWRlT25Nb3VzZUxlYXZlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuaGlkZSgpO1xuICB9XG5cbiAgb25Eb2N1bWVudFJlc2l6ZSgpIHtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGVsZW1SZWY6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgdmlld1JlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIENEUjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuY2xlYW4oKTtcbiAgICBpZih0aGlzLnBvcHBlck9wdGlvbnMuYXBwZW5kVG8gJiYgdGhpcy5lbGVtUmVmICYmIHRoaXMuZWxlbVJlZi5uYXRpdmVFbGVtZW50ICYmIHRoaXMuZWxlbVJlZi5uYXRpdmVFbGVtZW50LnBhcmVudE5vZGUpe1xuICAgICAgdGhpcy52aWV3UmVmLmRldGFjaCgpO1xuICAgICAgdGhpcy5lbGVtUmVmLm5hdGl2ZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1SZWYubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgY2xlYW4oKSB7XG4gICAgdGhpcy50b2dnbGVWaXNpYmlsaXR5KGZhbHNlKTtcbiAgICBpZiAoIXRoaXMucG9wcGVySW5zdGFuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgKHRoaXMucG9wcGVySW5zdGFuY2UgYXMgYW55KS5kaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLnBvcHBlckluc3RhbmNlLmRlc3Ryb3koKTtcblxuICB9XG5cbiAgc2hvdygpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMucmVmZXJlbmNlT2JqZWN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgYXBwZW5kVG9QYXJlbnQgPSB0aGlzLnBvcHBlck9wdGlvbnMuYXBwZW5kVG8gJiYgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLnBvcHBlck9wdGlvbnMuYXBwZW5kVG8pO1xuICAgIGlmIChhcHBlbmRUb1BhcmVudCAmJiB0aGlzLmVsZW1SZWYubmF0aXZlRWxlbWVudC5wYXJlbnROb2RlICE9PSBhcHBlbmRUb1BhcmVudCkge1xuICAgICAgdGhpcy5lbGVtUmVmLm5hdGl2ZUVsZW1lbnQucGFyZW50Tm9kZSAmJiB0aGlzLmVsZW1SZWYubmF0aXZlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbVJlZi5uYXRpdmVFbGVtZW50KTtcbiAgICAgIGFwcGVuZFRvUGFyZW50LmFwcGVuZENoaWxkKHRoaXMuZWxlbVJlZi5uYXRpdmVFbGVtZW50KTtcbiAgICB9XG5cbiAgICBsZXQgcG9wcGVyT3B0aW9uczogUG9wcGVyLlBvcHBlck9wdGlvbnMgPSA8UG9wcGVyLlBvcHBlck9wdGlvbnM+e1xuICAgICAgcGxhY2VtZW50OiB0aGlzLnBvcHBlck9wdGlvbnMucGxhY2VtZW50LFxuICAgICAgcG9zaXRpb25GaXhlZDogdGhpcy5wb3BwZXJPcHRpb25zLnBvc2l0aW9uRml4ZWQsXG4gICAgICBtb2RpZmllcnM6IHtcbiAgICAgICAgYXJyb3c6IHtcbiAgICAgICAgICBlbGVtZW50OiB0aGlzLnBvcHBlclZpZXdSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcubmd4cF9fYXJyb3cnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAodGhpcy5vblVwZGF0ZSkge1xuICAgICAgcG9wcGVyT3B0aW9ucy5vblVwZGF0ZSA9IHRoaXMub25VcGRhdGUgYXMgYW55O1xuICAgIH1cblxuICAgIGxldCBib3VuZGFyaWVzRWxlbWVudCA9IHRoaXMucG9wcGVyT3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCAmJiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMucG9wcGVyT3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCk7XG5cbiAgICBpZiAocG9wcGVyT3B0aW9ucy5tb2RpZmllcnMgJiYgYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgICAgIHBvcHBlck9wdGlvbnMubW9kaWZpZXJzLnByZXZlbnRPdmVyZmxvdyA9IHtib3VuZGFyaWVzRWxlbWVudH07XG4gICAgfVxuICAgIGlmIChwb3BwZXJPcHRpb25zLm1vZGlmaWVycyAmJiB0aGlzLnBvcHBlck9wdGlvbnMucHJldmVudE92ZXJmbG93ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBvcHBlck9wdGlvbnMubW9kaWZpZXJzLnByZXZlbnRPdmVyZmxvdyA9IHBvcHBlck9wdGlvbnMubW9kaWZpZXJzLnByZXZlbnRPdmVyZmxvdyB8fCB7fTtcbiAgICAgIHBvcHBlck9wdGlvbnMubW9kaWZpZXJzLnByZXZlbnRPdmVyZmxvdy5lbmFibGVkID0gdGhpcy5wb3BwZXJPcHRpb25zLnByZXZlbnRPdmVyZmxvdztcbiAgICAgIGlmICghcG9wcGVyT3B0aW9ucy5tb2RpZmllcnMucHJldmVudE92ZXJmbG93LmVuYWJsZWQpIHtcbiAgICAgICAgcG9wcGVyT3B0aW9ucy5tb2RpZmllcnMuaGlkZSA9IHtlbmFibGVkOiBmYWxzZX07XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZGV0ZXJtaW5lQXJyb3dDb2xvcigpO1xuICAgIHBvcHBlck9wdGlvbnMubW9kaWZpZXJzID0gT2JqZWN0LmFzc2lnbihwb3BwZXJPcHRpb25zLm1vZGlmaWVycywgdGhpcy5wb3BwZXJPcHRpb25zLnBvcHBlck1vZGlmaWVycyk7XG5cbiAgICB0aGlzLnBvcHBlckluc3RhbmNlID0gbmV3IFBvcHBlcihcbiAgICAgIHRoaXMucmVmZXJlbmNlT2JqZWN0LFxuICAgICAgdGhpcy5wb3BwZXJWaWV3UmVmLm5hdGl2ZUVsZW1lbnQsXG4gICAgICBwb3BwZXJPcHRpb25zLFxuICAgICk7XG5cbiAgICAodGhpcy5wb3BwZXJJbnN0YW5jZSBhcyBhbnkpLmVuYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgdGhpcy5zY2hlZHVsZVVwZGF0ZSgpO1xuICAgIHRoaXMudG9nZ2xlVmlzaWJpbGl0eSh0cnVlKTtcbiAgICB0aGlzLmdsb2JhbFJlc2l6ZSA9IHRoaXMucmVuZGVyZXIubGlzdGVuKCdkb2N1bWVudCcsICdyZXNpemUnLCB0aGlzLm9uRG9jdW1lbnRSZXNpemUuYmluZCh0aGlzKSlcbiAgfVxuXG4gIHByaXZhdGUgZGV0ZXJtaW5lQXJyb3dDb2xvcigpIHtcbiAgICBbJ2JhY2tncm91bmQtY29sb3InLCAnYmFja2dyb3VuZENvbG9yJ10uc29tZSgoY2xyKSA9PiB7XG4gICAgICBpZiAoIXRoaXMucG9wcGVyT3B0aW9ucy5zdHlsZXMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucG9wcGVyT3B0aW9ucy5zdHlsZXMuaGFzT3duUHJvcGVydHkoY2xyKSkge1xuICAgICAgICB0aGlzLmFycm93Q29sb3IgPSB0aGlzLnBvcHBlck9wdGlvbnMuc3R5bGVzW2Nscl07XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pXG4gIH1cblxuICB1cGRhdGUoKTogdm9pZCB7XG4gICAgdGhpcy5wb3BwZXJJbnN0YW5jZSAmJiAodGhpcy5wb3BwZXJJbnN0YW5jZSBhcyBhbnkpLnVwZGF0ZSgpO1xuICB9XG5cbiAgc2NoZWR1bGVVcGRhdGUoKTogdm9pZCB7XG4gICAgdGhpcy5wb3BwZXJJbnN0YW5jZSAmJiAodGhpcy5wb3BwZXJJbnN0YW5jZSBhcyBhbnkpLnNjaGVkdWxlVXBkYXRlKCk7XG4gIH1cblxuICBoaWRlKCk6IHZvaWQge1xuXG4gICAgaWYgKHRoaXMucG9wcGVySW5zdGFuY2UpIHtcbiAgICAgIHRoaXMucG9wcGVySW5zdGFuY2UuZGVzdHJveSgpO1xuICAgIH1cbiAgICB0aGlzLnRvZ2dsZVZpc2liaWxpdHkoZmFsc2UpO1xuICAgIHRoaXMub25IaWRkZW4uZW1pdCgpO1xuICB9XG5cbiAgdG9nZ2xlVmlzaWJpbGl0eShzdGF0ZTogYm9vbGVhbikge1xuICAgIGlmICghc3RhdGUpIHtcbiAgICAgIHRoaXMub3BhY2l0eSA9IDA7XG4gICAgICB0aGlzLmRpc3BsYXlUeXBlID0gXCJub25lXCI7XG4gICAgICB0aGlzLmFyaWFIaWRkZW4gPSAndHJ1ZSc7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5vcGFjaXR5ID0gMTtcbiAgICAgIHRoaXMuZGlzcGxheVR5cGUgPSBcImJsb2NrXCI7XG4gICAgICB0aGlzLmFyaWFIaWRkZW4gPSAnZmFsc2UnO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuQ0RSWydkZXN0cm95ZWQnXSkge1xuICAgICAgdGhpcy5DRFIuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cbiAgfVxuXG4gIGV4dHJhY3RBcHBsaWVkQ2xhc3NMaXN0RXhwcihjbGFzc0xpc3Q/OiBzdHJpbmcpOiBPYmplY3QgfCBudWxsIHtcbiAgICBpZiAoIWNsYXNzTGlzdCB8fCB0eXBlb2YgY2xhc3NMaXN0ICE9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY2xhc3NMaXN0XG4gICAgICAgIC5yZXBsYWNlKC8gLywgJycpXG4gICAgICAgIC5zcGxpdCgnLCcpXG4gICAgICAgIC5yZWR1Y2UoKGFjYywgY2xzcykgPT4ge1xuICAgICAgICAgIGFjY1tjbHNzXSA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfSwge30pXG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNsZWFyR2xvYmFsUmVzaXplKCkge1xuICAgIHRoaXMuZ2xvYmFsUmVzaXplICYmIHR5cGVvZiB0aGlzLmdsb2JhbFJlc2l6ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0aGlzLmdsb2JhbFJlc2l6ZSgpO1xuICB9XG5cbn1cbiJdfQ==