<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.synchronoss.saw</groupId>
    <artifactId>saw</artifactId>
    <version>${revision}</version>
  </parent>
  <artifactId>dist</artifactId>
  <version>${revision}</version>
  <packaging>jar</packaging>
  <name>saw-dist</name>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!-- Name used for Docker Machine.  Should include the username to
         enable identifying the owner of a machine in AWS.  -->
    <sip.cloud.name>${user.name}</sip.cloud.name>
    <!-- Default AWS region for Docker Machine -->
    <sip.cloud.region>us</sip.cloud.region>
    <!-- AWS secret key -->
    <sip.cloud.key>AKIAIMXBE56B6CRN6GKA</sip.cloud.key>
    <sip.cloud.key.secret>${env.SIP_CLOUD_KEY_SECRET}</sip.cloud.key.secret>
    <!-- Time to allow containers to boot up, in milliseconds.  Needs
         to account especially for the time the admin node takes to
         complete the SIP deployment.  -->
    <sip.docker.wait.time>1200000</sip.docker.wait.time>
    <!-- Enable Docker Machine configuration by default -->
    <saw.docker.skip.machine>false</saw.docker.skip.machine>
    <!-- SAW Docker environment ports -->
    <saw.docker.port>80</saw.docker.port>
    <saw.squid.port>3128</saw.squid.port>
    <saw.yarn.enabled>false</saw.yarn.enabled>
    <!-- SAW e2e test suite configutration supported values are smoke/sanity/regression/development-->
    <saw.e2e.suite>smoke</saw.e2e.suite>
    <!-- Test upgrading from old SIP version to new version by
         disabling the upgrade skip.  The build works the same, except
         the old SIP version is installed before installing the new
         version, to simulate upgrading the environment.  -->
    <sip.upgrade.skip>true</sip.upgrade.skip>
  </properties>
  <dependencies>
    <dependency>
      <groupId>com.sncr</groupId>
      <artifactId>saw-security</artifactId>
      <version>${project.version}</version>
      <type>war</type>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <!-- io.jsonwebtoken -->
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt</artifactId>
      <version>0.7.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.synchronoss.saw</groupId>
      <artifactId>saw-services-dist</artifactId>
      <version>${project.version}</version>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.synchronoss</groupId>
      <artifactId>bda-saw</artifactId>
      <version>${project.version}</version>
      <type>war</type>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.sncr</groupId>
      <artifactId>saw-security-command-line-tool</artifactId>
      <version>${project.version}</version>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.sncr</groupId>
      <artifactId>saw-security-parent</artifactId>
      <version>${project.version}</version>
      <type>pom</type>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.synchronoss</groupId>
      <artifactId>bda-rtis</artifactId>
      <version>${project.version}</version>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.synchronoss</groupId>
      <artifactId>rtps</artifactId>
      <version>${project.version}</version>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.junit.vintage</groupId>
      <artifactId>junit-vintage-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <version>3.0.7</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.restdocs</groupId>
      <artifactId>spring-restdocs-restassured</artifactId>
      <version>1.2.1.RELEASE</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.9.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>1.2.3</version>
    </dependency>
    <!-- This one is for integration testing -->
    <dependency>
      <groupId>org.mockftpserver</groupId>
      <artifactId>MockFtpServer</artifactId>
      <version>2.7.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>commons-net</groupId>
      <artifactId>commons-net</artifactId>
      <version>3.6</version>
      <scope>test</scope>
    </dependency>
    <dependency>
	    <groupId>org.springframework.integration</groupId>
	    <artifactId>spring-integration-sftp</artifactId>
	    <version>5.0.8.RELEASE</version>
	</dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <version>1.0.0</version>
        <configuration>
          <files>
            <file>${project.basedir}/src/test/cloud/cloud-region-${sip.cloud.region}.properties</file>
          </files>
        </configuration>
        <executions>
          <execution>
            <phase>initialize</phase>
            <goals>
              <goal>read-project-properties</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.6.1</version>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
          <showDepreciation>true</showDepreciation>
          <showWarnings>true</showWarnings>
          <compilerArgument>-Xlint:all</compilerArgument>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <configuration>
          <descriptors>
            <descriptor>src/main/assembly/assembly.xml</descriptor>
          </descriptors>
          <!-- Leave version number of SAW bundle project out of
               artifact name, to avoid confusion as each SAW module at
               least for now has its own release cycle -->
          <finalName>${project.parent.artifactId}-${project.version}</finalName>
          <!-- Remove artifact classifier "bin" from archive name -->
          <appendAssemblyId>false</appendAssemblyId>
          <!-- Enable long file names without Maven warning -->
          <tarLongFileMode>posix</tarLongFileMode>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.googlecode.maven-download-plugin</groupId>
        <artifactId>download-maven-plugin</artifactId>
        <version>1.4.1</version>
        <executions>
          <execution>
            <goals>
              <goal>wget</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <!-- Package for old SIP version to test upgrading from -->
          <!-- Workaround: The SIP 3.0 package fails to deploy on
               multinode configurations, due to a race condition in
               the Transport Service MapR-DB table initialization
               which has been later fixed.  The old version to upgrade
               from should preferably be a previous release.  However,
               due to the aforementioned issue, use an intermediate
               build instead.  When SIP 3.1 is release, use that
               instead. -->
          <!--<url>https://bamboo.synchronoss.net:8443/browse/BDA-BDASAW-882/artifact/shared/SIP-Package/saw-3.0.0.tgz</url>-->
          <url>https://bamboo.synchronoss.net:8443/browse/BDA-BDASAW-1084/artifact/shared/SIP-Package/saw-3.0.0-1721-g2f766e3fa.tgz</url>
          <outputDirectory>${project.build.directory}/docker/sip-admin/${revision}/build/maven/sip-old</outputDirectory>
          <skip>${sip.upgrade.skip}</skip>
        </configuration>
      </plugin>
      <plugin>
	      <groupId>org.apache.maven.plugins</groupId>
	      <artifactId>maven-failsafe-plugin</artifactId>
	      <executions>
	        <execution>
	          <goals>
	            <goal>integration-test</goal>
	            <goal>verify</goal>
	          </goals>
          </execution>
        </executions>
        <configuration>
          <systemPropertyVariables>
            <saw.docker.host>${saw.docker.ip}</saw.docker.host>
            <saw.docker.port>${saw.docker.port}</saw.docker.port>
          </systemPropertyVariables>
        </configuration>
      </plugin>
      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>0.26.0</version>
        <configuration>
          <!-- Automatically create required Docker networks -->
          <autoCreateCustomNetworks>true</autoCreateCustomNetworks>
          <!-- Workaround: Remove volumes created for Bamboo agent
               disk space workaround (see the VOLUME directive in
               "dist/src/test/docker-mapr/Dockerfile". -->
          <removeVolumes>true</removeVolumes>
          <!-- Start containers in parallel to reduce startup time -->
          <startParallel>true</startParallel>
          <!-- Ignore the Docker Machine configuration by default, and
               only enable it from the cloud profile when needed -->
          <skipMachine>${saw.docker.skip.machine}</skipMachine>
          <buildArgs>
            <yarn_enabled>${saw.yarn.enabled}</yarn_enabled>
          </buildArgs>
          <!-- Configure Docker Machine -->
          <machine>
            <name>sip-${sip.cloud.name}</name>
            <autoCreate>true</autoCreate>
            <regenerateCertsAfterStart>true</regenerateCertsAfterStart>
            <createOptions>
              <driver>amazonec2</driver>
              <amazonec2-region>${sip.cloud.aws.region}</amazonec2-region>
              <amazonec2-access-key>${sip.cloud.key}</amazonec2-access-key>
              <amazonec2-secret-key>${sip.cloud.key.secret}</amazonec2-secret-key>
              <!-- Note: Use an instance type with at least 64 GB of
                   memory.  The first preference for this would be the
                   r5a.2xlarge due to price, but it does not have
                   reliable spot capacity.  The next choice would be
                   r5.2xlarge, but there are no reserved instances for
                   this type.  Therefor the choice is currently
                   r4.2xlarge, as there are reserved instances
                   available for this type.  -->
              <amazonec2-instance-type>r4.2xlarge</amazonec2-instance-type>
              <amazonec2-root-size>64</amazonec2-root-size>
              <!-- Use CentOS 7 image, see
                   https://wiki.centos.org/Cloud/AWS for AMI IDs -->
              <amazonec2-ami>${sip.cloud.aws.ami}</amazonec2-ami>
              <amazonec2-ssh-user>centos</amazonec2-ssh-user>
              <amazonec2-userdata>${project.basedir}/src/test/cloud/cloud-config.yaml</amazonec2-userdata>
              <!-- Set IAM instance profile to get AWS Route 53 permissions -->
              <amazonec2-iam-instance-profile>UserEnvironment</amazonec2-iam-instance-profile>
              <amazonec2-monitoring/>
              <!--
                  Workaround: Docker Machine defaults to devicemapper,
                  which has < 10G default base size.  Can't change
                  base size using daemon.json, due to overlay2 failing
                  on unknown dm.basesize option at startup.  So use
                  the overlay2 storage driver, which gets the size of
                  the backing filesystem.
              -->
              <engine-storage-driver>overlay2</engine-storage-driver>
            </createOptions>
          </machine>
          <images>
            <image>
              <name>sip-base:${project.version}</name>
              <build>
                <dockerFileDir>${project.basedir}/src/test/docker-base</dockerFileDir>
              </build>
              <run>
                <skip>true</skip>
              </run>
            </image>
            <image>
              <name>sip-base-maprclient:${project.version}</name>
              <build>
                <dockerFileDir>${project.basedir}/src/test/docker-base-maprclient</dockerFileDir>
              </build>
              <run>
                <skip>true</skip>
              </run>
            </image>
            <image>
              <name>sip-app:${project.version}</name>
              <build>
                <dockerFileDir>${project.basedir}/src/test/docker-app</dockerFileDir>
              </build>
              <run>
                <skip>true</skip>
              </run>
            </image>
            <image>
              <name>sip-admin:${project.version}</name>
              <alias>sip-admin</alias>
              <build>
                <dockerFileDir>${project.basedir}/src/test/docker-admin</dockerFileDir>
                <assembly>
                  <inline xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                          xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2"
                          xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd">
                    <fileSets>
                      <fileSet>
                        <directory>${project.build.directory}</directory>
                        <outputDirectory>.</outputDirectory>
                        <includes>
                          <include>*.tgz</include>
                        </includes>
                      </fileSet>
                    </fileSets>
                  </inline>
                  <!-- Workaround: Building on Windows causes execute
                       permissions on files getting lost, so set to
                       "auto" as a workaround. -->
                  <permissions>auto</permissions>
                </assembly>
              </build>
              <run>
                <hostname>sip-admin</hostname>
                <namingStrategy>alias</namingStrategy>
                <network>
                  <name>saw</name>
                </network>
                <!-- Run privileged for systemd -->
                <privileged>true</privileged>
                <!-- Restart containers when Docker engine comes up
                     again.  This allows users to stop the Docker
                     engine, for example due to a host reboot, and
                     continue working with the same SAW instance
                     afterwards -->
                <restartPolicy>
                  <name>always</name>
                </restartPolicy>
                <volumes>
                  <bind>
                    <!-- Bind mount volume for saving system logs in
                         case needed for troubleshooting after a
                         failed run -->
                    <volume>${project.build.directory}:/build</volume>
                  </bind>
                </volumes>
                <wait>
                  <healthy>true</healthy>
                  <time>${sip.docker.wait.time}</time>
                </wait>
              </run>
            </image>
            <image>
              <name>sip-proxy:${project.version}</name>
              <alias>sip-proxy</alias>
              <build>
                <dockerFileDir>${project.basedir}/src/test/docker-proxy</dockerFileDir>
              </build>
              <run>
                <hostname>sip-proxy</hostname>
                <namingStrategy>alias</namingStrategy>
                <network>
                  <name>saw</name>
                </network>
                <ports>
                  <port>+saw.docker.ip:saw.docker.port:80</port>
                  <port>+saw.docker.ip:saw.squid.port:3128</port>
                </ports>
                <privileged>true</privileged>
                <restartPolicy>
                  <name>always</name>
                </restartPolicy>
                <wait>
                  <healthy>true</healthy>
                  <time>${sip.docker.wait.time}</time>
                </wait>
              </run>
            </image>
            <!-- First SIP application node -->
            <image>
              <name>sip-app:${project.version}</name>
              <!-- Note: The node has a suffix "1", because additional
                   SAW nodes might be added for high availability
                   configurations -->
              <alias>sip-app1</alias>
              <run>
                <hostname>sip-app1</hostname>
                <namingStrategy>alias</namingStrategy>
                <network>
                  <name>saw</name>
                </network>
                <privileged>true</privileged>
                <restartPolicy>
                  <name>always</name>
                </restartPolicy>
                <wait>
                  <healthy>true</healthy>
                  <time>${sip.docker.wait.time}</time>
                </wait>
              </run>
            </image>
            <!-- Second SIP application node: runs same services as
                 first node, to provide redundancy -->
            <image>
              <name>sip-app:${project.version}</name>
              <alias>sip-app2</alias>
              <run>
                <hostname>sip-app2</hostname>
                <namingStrategy>alias</namingStrategy>
                <network>
                  <name>saw</name>
                </network>
                <privileged>true</privileged>
                <restartPolicy>
                  <name>always</name>
                </restartPolicy>
                <wait>
                  <healthy>true</healthy>
                  <time>${sip.docker.wait.time}</time>
                </wait>
              </run>
            </image>
            <!-- Third SIP application node: only used for MariaDB
                 Galera cluster arbitrator node to resolve split brain
                 situations-->
            <image>
              <name>sip-app:${project.version}</name>
              <alias>sip-app3</alias>
              <run>
                <hostname>sip-app3</hostname>
                <namingStrategy>alias</namingStrategy>
                <network>
                  <name>saw</name>
                </network>
                <privileged>true</privileged>
                <restartPolicy>
                  <name>always</name>
                </restartPolicy>
                <!-- Development environments are for now by default
                     only single SAW node environments, at least until
                     everyone has moved to cloud deployments with more
                     memory.  So skip running the second SAW container
                     by default. -->
                <wait>
                  <healthy>true</healthy>
                  <time>${sip.docker.wait.time}</time>
                </wait>
              </run>
            </image>
            <image>
              <name>sip-elastic:${project.version}</name>
              <alias>sip-elastic</alias>
              <build>
                <dockerFileDir>${project.basedir}/src/test/docker-elastic</dockerFileDir>
              </build>
              <run>
                <hostname>sip-elastic</hostname>
                <namingStrategy>alias</namingStrategy>
                <network>
                  <name>saw</name>
                </network>
                <privileged>true</privileged>
                <restartPolicy>
                  <name>always</name>
                </restartPolicy>
                <wait>
                  <healthy>true</healthy>
                  <time>${sip.docker.wait.time}</time>
                </wait>
              </run>
            </image>
            <image>
              <name>sip-mapr:${project.version}</name>
              <alias>sip-mapr</alias>
              <build>
                <dockerFileDir>${project.basedir}/src/test/docker-mapr</dockerFileDir>
              </build>
              <run>
                <hostname>sip-mapr</hostname>
                <namingStrategy>alias</namingStrategy>
                <network>
                  <name>saw</name>
                </network>
                <!-- Run privileged for MapR -->
                <privileged>true</privileged>
                <wait>
                  <healthy>true</healthy>
                  <time>${sip.docker.wait.time}</time>
                </wait>
              </run>
            </image>
          </images>
        </configuration>
        <executions>
          <execution>
            <id>start</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>build</goal>
              <goal>start</goal>
            </goals>
          </execution>
          <execution>
            <id>stop</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.github.eirslett</groupId>
        <artifactId>frontend-maven-plugin</artifactId>
        <version>1.6</version>
        <executions>
          <execution>
            <id>install-node-and-npm</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>install-node-and-npm</goal>
            </goals>
            <configuration>
              <nodeVersion>v8.10.0</nodeVersion>
              <npmVersion>5.6.0</npmVersion>
            </configuration>
          </execution>
          <execution>
            <id>npm-install</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>npm</goal>
            </goals>
            <configuration>
              <arguments>install</arguments>
            </configuration>
          </execution>
          <execution>
            <id>npm-run-webdriver-manager</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>npm</goal>
            </goals>
            <configuration>
              <arguments>run webdriver-manager</arguments>
            </configuration>
          </execution>
          <execution>
            <id>npm-run-protractor</id>
            <phase>integration-test</phase>
            <goals>
              <goal>npm</goal>
            </goals>
            <configuration>
              <arguments>run protractor -- --baseUrl=http://${docker.host.address}:${saw.docker.port}/saw/web/ --suite=${saw.e2e.suite}</arguments>
            </configuration>
          </execution>
           <execution>
            <id>npm-run-generate-report</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>npm</goal>
            </goals>
            <configuration>
              <arguments>run generate-report</arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
	      <groupId>org.asciidoctor</groupId>
	      <artifactId>asciidoctor-maven-plugin</artifactId>
	      <version>1.5.7.1</version>
	      <dependencies>
          <dependency>
            <groupId>org.asciidoctor</groupId>
            <artifactId>asciidoctorj-diagram</artifactId>
            <version>1.5.11</version>
          </dependency>
          <dependency>
            <groupId>org.asciidoctor</groupId>
            <artifactId>asciidoctorj-pdf</artifactId>
            <version>1.5.0-alpha.16</version>
          </dependency>
          <dependency>
            <groupId>org.springframework.restdocs</groupId>
            <artifactId>spring-restdocs-asciidoctor</artifactId>
            <version>2.0.2.RELEASE</version>
          </dependency>
        </dependencies>
        <configuration>
          <attributes>
            <project-version>${project.version}</project-version>
          </attributes>
          <preserveDirectories>true</preserveDirectories>
          <requires>
            <require>asciidoctor-diagram</require>
          </requires>
          <sourceHighlighter>highlight.js</sourceHighlighter>
        </configuration>
        <executions>
          <execution>
            <id>generate-docs-html</id>
            <!-- Generate documentation only after integration tests
                 have run, so that snippets generated by Spring REST
                 Docs as part of running the integration tests are
                 available -->
            <phase>post-integration-test</phase>
            <goals>
              <goal>process-asciidoc</goal>
            </goals>
            <configuration>
              <backend>html</backend>
            </configuration>
          </execution>
          <execution>
            <id>generate-docs-pdf</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>process-asciidoc</goal>
            </goals>
            <configuration>
              <backend>pdf</backend>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <repositories>
    <repository>
      <id>synchronoss</id>
      <url>http://mavenrepo.synchronoss.net:8081/nexus/content/repositories/releases-only</url>
    </repository>
  </repositories>
  <profiles>
    <!-- Base Docker profile -->
    <profile>
      <id>docker-start</id>
      <activation>
        <property>
          <name>docker-start</name>
        </property>
      </activation>
      <properties>
        <!-- Show Docker image build output by default to keep users
             up to date on the progress, as it can take considerable
             time for the first run and after Dockerfile modifications
             -->
        <docker.verbose>true</docker.verbose>
      </properties>
    </profile>
    <!-- Local Docker profile -->
    <profile>
      <id>docker-start-local</id>
      <activation>
        <property>
          <name>docker-start</name>
          <value>local</value>
        </property>
      </activation>
      <properties>
        <!-- Disable Docker Machine configuration when using local -->
        <saw.docker.skip.machine>true</saw.docker.skip.machine>
        <!-- Limit access to local machine only when no remote access
             needed -->
        <saw.docker.ip>127.0.0.1</saw.docker.ip>
      </properties>
    </profile>
    <!-- Docker with Yarn enable-->
    <!-- Cloud Docker profile -->
    <profile>
      <id>docker-start-cloud</id>
      <activation>
        <property>
          <name>docker-start</name>
          <value>cloud</value>
        </property>
      </activation>
      <build>
        <plugins>
          <!-- Enable Enforcer plug-in to ensure that required
               properties and environment variables have been set -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-enforcer-plugin</artifactId>
            <version>3.0.0-M1</version>
            <configuration>
              <skip>false</skip>
              <rules>
                <requireProperty>
                  <property>sip.cloud.region</property>
                  <regex>(us|in)</regex>
                  <regexMessage>The "sip.cloud.region" property must be set to one of the following values: "us" or "in"</regexMessage>
                </requireProperty>
                <requireProperty>
                  <property>env.SIP_CLOUD_KEY_SECRET</property>
                  <message>The environment variable SIP_CLOUD_KEY_SECRET must be set (please ask a team member for the secret key)</message>
                </requireProperty>
                <requireProperty>
                  <property>sip.cloud.name</property>
                  <regex>\w{4}\d{4}(-.*)?</regex>
                  <regexMessage>The "sip.cloud.name" property must start with a Synchronoss Active Directory username in the form "abcd0001"</regexMessage>
                </requireProperty>
              </rules>
              <fail>true</fail>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
