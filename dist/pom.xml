<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.synchronoss.saw</groupId>
    <artifactId>saw</artifactId>
    <version>${revision}</version>
  </parent>
  <artifactId>dist</artifactId>
  <version>${revision}</version>
  <packaging>jar</packaging>
  <name>saw-dist</name>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <docker.naming>none</docker.naming>
  </properties>
  <dependencies>
    <dependency>
      <groupId>com.sncr</groupId>
      <artifactId>saw-security</artifactId>
      <version>${project.version}</version>
      <type>war</type>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <!-- io.jsonwebtoken -->
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt</artifactId>
      <version>0.7.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.synchronoss.saw</groupId>
      <artifactId>saw-services-dist</artifactId>
      <version>${project.version}</version>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.synchronoss</groupId>
      <artifactId>bda-saw</artifactId>
      <version>${project.version}</version>
      <type>war</type>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.sncr</groupId>
      <artifactId>saw-security-command-line-tool</artifactId>
      <version>${project.version}</version>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.sncr</groupId>
      <artifactId>saw-security-parent</artifactId>
      <version>${project.version}</version>
      <type>pom</type>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <version>3.0.3</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.restdocs</groupId>
      <artifactId>spring-restdocs-restassured</artifactId>
      <version>1.2.1.RELEASE</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.9.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.6.1</version>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
          <showDepreciation>true</showDepreciation>
          <showWarnings>true</showWarnings>
          <compilerArgument>-Xlint:all</compilerArgument>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <configuration>
          <descriptors>
            <descriptor>src/main/assembly/assembly.xml</descriptor>
          </descriptors>
          <!-- Leave version number of SAW bundle project out of
               artifact name, to avoid confusion as each SAW module at
               least for now has its own release cycle -->
          <finalName>${project.parent.artifactId}-${project.version}</finalName>
          <!-- Remove artifact classifier "bin" from archive name -->
          <appendAssemblyId>false</appendAssemblyId>
          <!-- Enable long file names without Maven warning -->
          <tarLongFileMode>posix</tarLongFileMode>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-failsafe-plugin</artifactId>
	<executions>
	  <execution>
	    <goals>
	      <goal>integration-test</goal>
	      <goal>verify</goal>
	    </goals>
          </execution>
        </executions>
        <configuration>
          <systemPropertyVariables>
            <saw.docker.port>${saw.docker.port}</saw.docker.port>
          </systemPropertyVariables>
        </configuration>
      </plugin>
      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>0.24.0</version>
        <configuration>
          <!-- Automatically create required Docker networks -->
          <autoCreateCustomNetworks>true</autoCreateCustomNetworks>
          <!-- Workaround: Remove volumes created for Bamboo agent
               disk space workaround (see the VOLUME directive in
               "dist/src/test/docker-mapr/Dockerfile". -->
          <removeVolumes>true</removeVolumes>
          <!-- Start containers in parallel to reduce startup time -->
          <startParallel>true</startParallel>
          <!-- Ignore the Docker Machine configuration by default, and
               only enable it from the cloud profile when needed -->
          <skipMachine>${docker.skip.machine}</skipMachine>
          <!-- Configure Docker Machine -->
          <machine>
            <name>user-${env.SAW_AWS_USERNAME}</name>
            <autoCreate>true</autoCreate>
            <createOptions>
              <driver>amazonec2</driver>
              <amazonec2-region>${saw.docker.machine.aws.region}</amazonec2-region>
              <amazonec2-access-key>${env.SAW_AWS_ACCESS_KEY_ID}</amazonec2-access-key>
              <amazonec2-secret-key>${env.SAW_AWS_SECRET_ACCESS_KEY}</amazonec2-secret-key>
              <amazonec2-instance-type>t2.xlarge</amazonec2-instance-type>
              <amazonec2-root-size>32</amazonec2-root-size>
              <!-- Use CentOS 7 image, see
                   https://wiki.centos.org/Cloud/AWS for AMI IDs -->
              <amazonec2-ami>${saw.docker.machine.aws.ami}</amazonec2-ami>
              <amazonec2-ssh-user>centos</amazonec2-ssh-user>
              <amazonec2-userdata>${project.basedir}/src/test/cloud/cloud-config.yaml</amazonec2-userdata>
              <amazonec2-monitoring/>
              <!--
                  Workaround: Docker Machine defaults to devicemapper,
                  which has < 10G default base size.  Can't change
                  base size using daemon.json, due to overlay2 failing
                  on unknown dm.basesize option at startup.  So use
                  the overlay2 storage driver, which gets the size of
                  the backing filesystem.
              -->
              <engine-storage-driver>overlay2</engine-storage-driver>
            </createOptions>
          </machine>
          <images>
            <image>
              <name>saw:${project.version}</name>
              <alias>saw</alias>
              <build>
                <dockerFileDir>${project.basedir}/src/test/docker</dockerFileDir>
                <assembly>
                  <inline xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                          xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2"
                          xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd">
                    <fileSets>
                      <fileSet>
                        <directory>${project.build.directory}</directory>
                        <outputDirectory>.</outputDirectory>
                        <includes>
                          <include>*.tgz</include>
                        </includes>
                      </fileSet>
                    </fileSets>
                  </inline>
                  <!-- Workaround: Building on Windows causes execute
                       permissions on files getting lost, so set to
                       "auto" as a workaround. -->
                  <permissions>auto</permissions>
                </assembly>
              </build>
              <run>
                <namingStrategy>${saw.docker.naming}</namingStrategy>
                <network>
                  <name>saw</name>
                </network>
                <ports>
                  <port>+saw.docker.ip:saw.docker.port:80</port>
                  <port>+saw.docker.ip:saw.kibana.port:5601</port>
                  <port>+saw.docker.ip:saw.journal.port:19531</port>
                </ports>
                <!-- Run privileged for systemd -->
                <privileged>true</privileged>
                <!-- Restart containers when Docker engine comes up
                     again.  This allows users to stop the Docker
                     engine, for example due to a host reboot, and
                     continue working with the same SAW instance
                     afterwards -->
                <restartPolicy>
                  <name>always</name>
                </restartPolicy>
                <volumes>
                  <bind>
                    <!-- Bind mount volume for saving system logs in
                         case needed for troubleshooting after a
                         failed run -->
                    <volume>${project.build.directory}:/build</volume>
                  </bind>
                </volumes>
                <wait>
                  <!-- Wait until the container health check reports
                       that systemd services are up and running -->
                  <healthy>true</healthy>
                  <!-- Increase timeout to allow application
                       deployment to finish -->
                  <time>1200000</time>
                </wait>
              </run>
            </image>
            <image>
              <name>saw-mapr:${project.version}</name>
              <alias>saw-mapr</alias>
              <build>
                <dockerFileDir>${project.basedir}/src/test/docker-mapr</dockerFileDir>
              </build>
              <run>
                <namingStrategy>${saw.docker.naming}</namingStrategy>
                <network>
                  <name>saw</name>
                  <alias>saw-mapr</alias>
                </network>
                <ports>
                  <port>+saw.docker.ip:saw.mapr.web.port:8443</port>
                  <port>+saw.docker.ip:saw.mapr.cldb.port:7222</port>
                  <port>+saw.docker.ip:saw.yarn.resource.port:8088</port>
                  <port>+saw.docker.ip:saw.yarn.node.port:8042</port>
                  <port>+saw.docker.ip:saw.spark.master.port:8080</port>
                  <port>+saw.docker.ip:saw.spark.worker.port:8081</port>
                  <port>+saw.docker.ip:saw.livy.port:8998</port>
                </ports>
                <!-- Run privileged for MapR -->
                <privileged>true</privileged>
                <wait>
                  <!-- Wait until the container health check reports
                       that MapR is up and running -->
                  <healthy>true</healthy>
                  <!-- Increase timeout to allow MapR to start -->
                  <time>1200000</time>
                </wait>
              </run>
            </image>
          </images>
        </configuration>
        <executions>
          <execution>
            <id>start</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>build</goal>
              <goal>start</goal>
            </goals>
          </execution>
          <execution>
            <id>stop</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.github.eirslett</groupId>
        <artifactId>frontend-maven-plugin</artifactId>
        <version>1.6</version>
        <executions>
          <execution>
            <id>install-node-and-npm</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>install-node-and-npm</goal>
            </goals>
            <configuration>
              <nodeVersion>v8.10.0</nodeVersion>
              <npmVersion>5.6.0</npmVersion>
            </configuration>
          </execution>
          <execution>
            <id>npm-install</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>npm</goal>
            </goals>
            <configuration>
              <arguments>install</arguments>
            </configuration>
          </execution>
          <execution>
            <id>npm-run-webdriver-manager</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>npm</goal>
            </goals>
            <configuration>
              <arguments>run webdriver-manager</arguments>
            </configuration>
          </execution>
          <execution>
            <id>npm-run-protractor</id>
            <phase>integration-test</phase>
            <goals>
              <goal>npm</goal>
            </goals>
            <configuration>
              <arguments>run protractor -- --params.saw.docker.port=${saw.docker.port}</arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
	<groupId>org.asciidoctor</groupId>
	<artifactId>asciidoctor-maven-plugin</artifactId>
	<version>1.5.6</version>
	<dependencies>
          <dependency>
            <groupId>org.asciidoctor</groupId>
            <artifactId>asciidoctorj-diagram</artifactId>
            <version>1.5.4.1</version>
          </dependency>
          <dependency>
            <groupId>org.asciidoctor</groupId>
            <artifactId>asciidoctorj-pdf</artifactId>
            <version>1.5.0-alpha.16</version>
          </dependency>
          <dependency>
            <groupId>org.springframework.restdocs</groupId>
            <artifactId>spring-restdocs-asciidoctor</artifactId>
            <version>1.2.1.RELEASE</version>
          </dependency>
        </dependencies>
        <configuration>
          <attributes>
            <project-version>${project.version}</project-version>
          </attributes>
          <preserveDirectories>true</preserveDirectories>
          <requires>
            <require>asciidoctor-diagram</require>
          </requires>
          <sourceHighlighter>highlight.js</sourceHighlighter>
        </configuration>
        <executions>
          <execution>
            <id>generate-docs-html</id>
            <!-- Generate documentation only after integration tests
                 have run, so that snippets generated by Spring REST
                 Docs as part of running the integration tests are
                 available -->
            <phase>post-integration-test</phase>
            <goals>
              <goal>process-asciidoc</goal>
            </goals>
            <configuration>
              <backend>html</backend>
            </configuration>
          </execution>
          <execution>
            <id>generate-docs-pdf</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>process-asciidoc</goal>
            </goals>
            <configuration>
              <backend>pdf</backend>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <repositories>
    <repository>
      <id>synchronoss</id>
      <url>http://maven-us.synchronoss.net:8081/nexus/content/repositories/releases-only</url>
    </repository>
  </repositories>
  <profiles>
    <!-- Base Docker profile -->
    <profile>
      <id>docker-start</id>
      <activation>
        <property>
          <name>docker-start</name>
        </property>
      </activation>
      <properties>
        <saw.docker.port>80</saw.docker.port>
        <saw.docker.naming>alias</saw.docker.naming>
        <saw.mapr.web.port>18443</saw.mapr.web.port>
        <saw.mapr.cldb.port>17222</saw.mapr.cldb.port>
        <saw.yarn.resource.port>18088</saw.yarn.resource.port>
        <saw.yarn.node.port>18042</saw.yarn.node.port>
        <saw.spark.master.port>18080</saw.spark.master.port>
        <saw.spark.worker.port>18081</saw.spark.worker.port>
        <saw.livy.port>18998</saw.livy.port>
        <saw.kibana.port>15601</saw.kibana.port>
        <saw.journal.port>19531</saw.journal.port>
        <!-- Show Docker image build output by default to keep users
             up to date on the progress, as it can take considerable
             time for the first run and after Dockerfile modifications
             -->
        <docker.verbose>true</docker.verbose>
      </properties>
    </profile>
    <!-- Local Docker profile -->
    <profile>
      <id>docker-start-local</id>
      <activation>
        <property>
          <name>docker-start</name>
          <value>local</value>
        </property>
      </activation>
      <properties>
        <!-- Limit access to local machine only by default -->
        <saw.docker.ip>localhost</saw.docker.ip>
      </properties>
    </profile>
    <!-- Cloud Docker profile -->
    <profile>
      <id>docker-start-cloud</id>
      <activation>
        <property>
          <name>docker-start</name>
          <value>cloud</value>
        </property>
      </activation>
      <properties>
        <!-- Enable Docker Machine configuration when using cloud -->
        <docker.skip.machine>false</docker.skip.machine>
        <!-- Bind to all interfaces so that environment can be
             accessed remotely -->
        <saw.docker.ip>0.0.0.0</saw.docker.ip>
      </properties>
      <build>
        <plugins>
          <!-- Enable Enforcer plug-in to ensure that required SAW_AWS_*
               environment variables have been set -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-enforcer-plugin</artifactId>
            <version>3.0.0-M1</version>
            <configuration>
              <skip>false</skip>
              <rules>
                <requireProperty>
                  <property>env.SAW_AWS_REGION</property>
                  <message>The environment variable SAW_AWS_REGION must be set</message>
                  <regex>(us|in)</regex>
                  <regexMessage>Region must be one of the supported regions: "us" or "in"</regexMessage>
                </requireProperty>
                <requireProperty>
                  <property>env.SAW_AWS_ACCESS_KEY_ID</property>
                  <message>The environment variable SAW_AWS_ACCESS_KEY_ID must be set</message>
                </requireProperty>
                <requireProperty>
                  <property>env.SAW_AWS_SECRET_ACCESS_KEY</property>
                  <message>The environment variable SAW_AWS_SECRET_ACCESS_KEY must be set</message>
                </requireProperty>
                <requireProperty>
                  <property>env.SAW_AWS_USERNAME</property>
                  <message>The environment variable SAW_AWS_USERNAME must be set</message>
                  <regex>\w{4}\d{4}(-.*)?</regex>
                  <regexMessage>
                    Username must be in the form "abcd0001" with an optional suffix</regexMessage>
                </requireProperty>
              </rules>
              <fail>true</fail>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>properties-maven-plugin</artifactId>
            <version>1.0.0</version>
            <configuration>
              <files>
                <file>${project.basedir}/src/test/cloud/cloud-region-${env.SAW_AWS_REGION}.properties</file>
              </files>
              <!-- Workaround: The properties plug-in is invoked for
                   the parent project too, for which the path above
                   cannot be found.  As a workaround configure the
                   plug-in to be quiet to work around that error.  The
                   Maven profile should perhaps somehow be moved into
                   the submodule instead, so that dist-related
                   plug-ins are not invoked at the top-level
              -->
              <quiet>true</quiet>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
