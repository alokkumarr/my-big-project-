play.crypto.secret="PbJ2]H^WhFEBqKT3rlNtJMY1i^PHUX>eMjiPyaC`w5RB[W]jihkhK?Vb1m`gJMw5"

# CORS filter configuration
play.filters.cors {
    # The path prefixes to filter.
    pathPrefixes = ["/"]

    # The allowed origins. If null, all origins are allowed.
    allowedOrigins = null

    # The allowed HTTP methods. If null, all methods are allowed
    allowedHttpMethods = [ "POST", "GET", "OPTIONS" ]

    # The allowed HTTP headers. If null, all headers are allowed.
    allowedHttpHeaders = null

    # The exposed headers
    exposedHeaders = []

    # Whether to support credentials
    supportsCredentials = true

    # The maximum amount of time the CORS meta data should be cached by the client
    preflightMaxAge = 1 hour
}

play.http.filters = "controllers.Filters"

# Port must be passed to play as CMD parameter, THERE IS NO DEFAULT VALUE
http.port=9200
play.i18n.langs = [ "en" ]

es = {
  #  es 5
  host = "{{ saw_elasticsearch_host  | default('localhost') }}"
  timeout = 30
  port = {{ saw_elasticsearch_port | default('9200') }}
  username = "{{ saw_elasticsearch_username | default('elastic') }}"
  password = "{{ saw_elasticsearch_password | default('elastic') }}"
  protocol = "{{ saw_elasticsearch_protocol | default('http') }}"
}

metadata = {
  path = "/main/metadata"
  zookeeper-quorum = "{{ saw_zookeeper_quorum | default('localhost') }}"
  user = "mapr"
}
akka
  { jvm-exit-on-fatal-error = false }

spark = {
  master = "{{ saw_spark_master_url | default('spark://localhost:7077') }}"
{% if saw_spark_yarn_queue is defined %}
  yarn.queue = "{{ saw_spark_yarn_queue }}"
{% endif %}
{% if saw_spark_driver_port is defined %}
  driver.port = "{{ saw_spark_driver_port }}"
{% endif %}
{% if saw_spark_driver_host is defined %}
  driver.host = "{{ saw_spark_driver_host }}"
{% endif %}
{% if saw_spark_driver_bind_address is defined %}
  driver.bindAddress = "{{ saw_spark_driver_bind_address }}"
{% endif %}
{% if saw_spark_driver_blockmanager_port is defined %}
  driver.blockManager.port = "{{ saw_spark_driver_blockmanager_port }}"
{% endif %}
  executor.memory = "8G"
  cores.max = "8"
  driver.memory = "2G"

  sql-executor = {
    # --------- Not used anymore ------------------------------
    input-file-location = "/main/data/saw/sql-executor/input"
    result-file-location = "/main/data/saw/sql-executor/results"
    script = "/opt/saw/sql-executor/bin/run.sh"
    # ----------------------------------------------------------

    wait-time = 5
    inline-data-store-limit-bytes = 268435456
    inline-data-store-limit-rows = 10000

    # The location is to store results genereted by SQL Executor
    output-location = "/main/data/saw/sql-executor/output"
    semantic-layer-tmp-location = "/main/data/saw/sql-executor/temp"

    output-type = "parquet"

    jar-location = "/opt/saw/service/sparklib"
  }
}
